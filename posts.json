[{"title": "Contributing To A Open Source Library", "pubDate": "2022-02-17 15:48:05", "link": "https://medium.com/@athletecoder/my-first-attempt-to-contribute-to-a-open-source-library-87aee810d31e?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/87aee810d31e", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png", "description": "<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4><p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things....</p>", "content": "\n<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4>\n<p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things.</p>\n<p>But recently, I attempted to implement a new feature for the <a href=\"https://github.com/agencyenterprise/react-native-health\">React-Native-Health</a> library. Its intended purpose is to interact with the Apple HealthKit for\u00a0iOS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png\"></figure><h3>Backstory</h3>\n<p>I built this app called <a href=\"https://www.softlete.com/\">softlete</a> with the <a href=\"https://reactnative.dev/\">React-Native</a> framework. It\u2019s a training tool for athletes (anyone who physically trains for any purpose) that helps them organize their training while also providing meaningful resources, information, and feedback. It\u2019s still in its development phase.</p>\n<p>With the React-Native-Health library installed, I immediately have the configuration set up (permissions and methods) to retrieve data from Apple HealthKit.</p>\n<p>Most of the methods provided by the library satisfy my needs, but there is a method that is missing for a few key features I want to implement.</p>\n<h4>Key Features</h4>\n<p>A couple of key features I want to add\u00a0are:</p>\n<ol>\n<li>Display the user\u2019s workout route on a\u00a0map.</li>\n<li>Provide in-depth performance statistics and feedback for a user\u2019s workout\u00a0route.</li>\n</ol>\n<p>Plenty of fitness apps already offer these features, like Strava, so I thought I might as well\u00a0too.</p>\n<p>The issue is the React-Native-Health library doesn\u2019t have a method to accomplish this. And to implement these features, I need access to the workout route\u00a0data.</p>\n<p>So I was like, \u201cyou know what. I\u2019ll try to do it myself.\u201d And that\u2019s exactly what I\u00a0did.</p>\n<h3>The Journey</h3>\n<p>Beware, I\u2019m unfamiliar with native iOS development. I\u2019ve never attempted to contribute to an open-source library. So I\u2019m stepping into unknown territory.</p>\n<p>I had no idea how to export native modules in React Native. So, like what everyone would do, I headed straight to the motherland (React docs) and walked through the <a href=\"https://reactnative.dev/docs/native-modules-intro\">native modules documentation</a>.</p>\n<p>I followed \u201cexactly\u201d the steps in the documentation to add the demo method into my app. And\u00a0\u2026 I completely broke it. I spend the whole day debugging, looking through forums, blogs, and everything you can think\u00a0of.</p>\n<p>Nothing.</p>\n<p>After banging my head on the keyboard a couple of times. I took a leap of faith and assumed it was Xcode (It definitely wasn\u2019t Xcode itself, but my clumsiness). I uninstalled and reinstalled it. That night, I laid in bed, stared at the ceiling, and regretted my decision to attempt\u00a0this.</p>\n<p>I woke up, relieved myself, and sprinted straight to my computer. Xcode was successfully installed. I opened my app project, pushed the build button that looks like a play button, and I stared at the status, biting my nails (I know, it\u2019s a bad habit), as it slowly proceeded to\u00a0build.</p>\n<p>\u201cBuild Succeeded.\u201d</p>\n<p>I opened the console, and \u201cidgaf Keisha\u201d was\u00a0printed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/236/0*6HtxzsZxAH18YKtV.jpg\"></figure><h3>The Implementation</h3>\n<p>Now onto what I wanted to implement.</p>\n<p>I didn\u2019t even know how to edit the libraries that I installed into my app. So I started poking around and came across the Pods file. I opened it and then opened the development pods folder. I saw the <strong>RCTAppleHealthKit </strong>folder. It looked promising so I opened\u00a0it.</p>\n<p>What\u2019s up with the\u00a0.h and\u00a0.m\u00a0files?</p>\n<p>I opened the <strong>RCTAppleHealthKit.h</strong>. It didn\u2019t look too bad. I then proceeded to open the <strong>RCTAppleHealthKit.m</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/275/0*DAwbkHKlJnDcUG1D\"></figure><p>Why does Objective-C function declaration syntax look so confusing? It\u2019s like they intentionally wanted to scare people away from Objective-C.</p>\n<p>Example:</p>\n<p><strong>- (void)workout_getRoute:(NSDictionary *)input callback:(RCTResponseSenderBlock)callback;</strong></p>\n<p>Why is the first parameter of the function formatted differently than the subsequent parameters?</p>\n<p>Thank God for Google and people smarter than me willing to post and respond to blogs and forums because I would have been completely lost.</p>\n<p>So I pretty much copied and pasted the <strong>getAnchoredWorkouts</strong> method in the\u00a0<strong>.m </strong>file, changed the name to \u201c<strong>getWorkoutRoute</strong>,\u201d and updated the function logic to log \u201cWazzzzup\u201d in the\u00a0console.</p>\n<p>I rebuild my app and BOOM! I can see the text \u201cWazzzzup\u201d logged on the\u00a0console.</p>\n<h4>Implementation Steps</h4>\n<p>Now for the difficult, but fun part. Using <a href=\"https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/reading_route_data\">this</a> Apple Developer Docs article as a reference, I had to perform these three queries in sequence.</p>\n<ol>\n<li><strong>Get workout</strong></li>\n<li><strong>Get route</strong></li>\n<li><strong>Get locations</strong></li>\n</ol>\n<p>The problem with the article is that the code is stuck on Swift. The language option at the top won\u2019t convert the language to Objective-C. And I\u2019ve never even seen Swift code\u00a0before.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*g8Qwj_nQYHM1LNqq\"><figcaption>Photo by <a href=\"https://unsplash.com/@a_d_s_w?utm_source=medium&amp;utm_medium=referral\">Adrian Swancar</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I had no clue how to export or import classes so I continued to use the method <strong>getAnchoredWorkouts </strong>as a reference.</p>\n<p>I created another method called <strong>workout_getRoute </strong>in the <strong>Methods_Workout</strong> files. This method will be used as the container for the logic to handle fetching the\u00a0data.</p>\n<p>Alright. The first step is to get the <strong>HKWorkout</strong> class. How do I do that? I\u2019ll just see how <strong>getAnchoredWorkouts </strong>does\u00a0it.</p>\n<p>Great. Create another method in the <strong>Queries</strong> files and I\u2019ll call it <strong>\u201cfetchWorkoutById.\u201d </strong>Use the <strong>HKSampleQuery </strong>class to get the <strong>HKWorkout</strong> class.</p>\n<p>Next, I need to get the <strong>HKWorkoutRoute </strong>class that is associated with the <strong>HKWorkout</strong> class, and to do this I need to perform another query using the <strong>HKAnchoredObjectQuery </strong>class.</p>\n<p>So I created another method in the <strong>Queries</strong> files, called it <strong>\u201cfetchWorkoutRoute,\u201d </strong>and inserted the configuration to get the <strong>HKWorkoutRoute</strong>.</p>\n<p>Lastly, I needed to query for the location data associated with the <strong>HKWorkoutRoute</strong> class by using the <strong>HKWorkoutRouteQuery</strong> class. I inserted this logic inside the same method I created previously, <strong>fetchWorkoutRoute.</strong></p>\n<p>Yay! I got a response! I did\u00a0it!</p>\n<p>And obviously, it didn\u2019t go as smoothly as I described above. It literally took me a week to get a successful response. And most of the time I spent figuring out syntax and type\u00a0issues.</p>\n<p>So I integrated this method into my app. I created a new screen, imported a map, and configured it to display the locations on the\u00a0map.</p>\n<p>I rebuilt my project and tested it on my device for a run I did early that\u00a0day.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/413/0*WtODBvapT8BoO0sb.jpg\"></figure><p>I wasn\u2019t done. It wasn\u2019t displaying the whole route. Something was wrong with my configuration.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/354/1*hl3hyMmBRMWj4SCNq44H7w.png\"></figure><p>I promise I ran further than\u00a0this\u2026</p>\n<p>Like every developer would do, I went straight to Google. To my luck, nobody had this issue. And surprisingly, not many people attempted this.</p>\n<p>After two days of debugging, I almost lost hope and was about to throw in the\u00a0towel.</p>\n<blockquote>But then I realized that I was the main character and kept\u00a0going.</blockquote>\n<p>Not even an hour later, I found out what the problem\u00a0was.</p>\n<blockquote>\u201cYour block receives one or more batches of location data. When the block\u2019s done parameter is true, you have received all the\u00a0data.\u201d</blockquote>\n<p>After rereading this statement a million times, I realized my logic inside the data handler block was configured incorrectly.</p>\n<p>I assumed all the location data was passed at once when the done parameter was set to true, but I was wrong. Now that I think about it, this assumption made no\u00a0sense.</p>\n<p>I reconfigured my logic, rebuilt my project, and the whole workout route was displayed nicely on the\u00a0map.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*oGgVJQ8EmzKVCTGc\"><figcaption>Photo by <a href=\"https://unsplash.com/@dre0316?utm_source=medium&amp;utm_medium=referral\">Andre Hunter</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3>Conclusion</h3>\n<p>From start to finish, this process took me a little over a week. And this was my first attempt to contribute to an open-source project. It was also my first time being exposed to Objective-C and working with native modules in React\u00a0Native.</p>\n<p>It was a struggle from start to finish. I spent a lot of time trying to figure out syntaxes, types, class references, and other concepts.</p>\n<blockquote>And I thank all of you programmers for contributing to forums, blogs, dicussions, and whatever deemed helpful to me. You people make programming bearable.</blockquote>\n<p>I was a little intimated at first and I wasn\u2019t sure if I had enough competence to accomplish the task, but I\u2019m glad I took on the challenge. I learned a lot about Objective-C, how to interact with Apple HealthKit, and more about what I\u2019m capable\u00a0of.</p>\n<p>Although the code might not be perfect and probably has issues, I\u2019m happy to at least get a response that I\u2019m looking\u00a0for.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/0*8p5zNvZierBPw5R_.jpg\"></figure><p>You can critique my code here: <a href=\"https://github.com/nguyening20/react-native-health\">My React-Native-Health Fork</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=87aee810d31e\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["libraries", "open-source", "app-development", "code", "react-native"], "id": "87aee810d31e"}, {"title": "How to UseEffect In React", "pubDate": "2022-02-13 16:25:41", "link": "https://medium.com/@athletecoder/how-to-useeffect-in-react-97c4e6dc0a88?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/97c4e6dc0a88", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png", "description": "<h4>A quick tutorial on how to useEffect.</h4><p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to ...</p>", "content": "\n<h4>A quick tutorial on how to useEffect.</h4>\n<p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to perform side\u00a0effects.</p>\n<p>Thanks to the React team, now we have\u00a0<a href=\"https://reactjs.org/docs/hooks-intro.html\"><strong>hooks</strong></a><strong>.</strong></p>\n<blockquote>\n<strong>React hooks </strong>give functions similar features to what is provided to\u00a0classes<strong>.</strong>\n</blockquote>\n<p>But In this post, we are going to focus on a React hook called <a href=\"https://reactjs.org/docs/hooks-effect.html\"><strong>useEffect</strong></a>. A hook that is pretty complex at first, but after today you will get a good grasp on how everything works.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png\"></figure><h3>What Is UseEffect</h3>\n<p><strong>useEffect </strong>is a hook that allows you to perform side effects from a functional component. It serves the same purpose as <strong>componentDidMount</strong>, <strong>componentDidUpdate</strong>, and <strong>componentWillUnmount </strong>lifecycle methods in React classes, but is unified into a single\u00a0API.</p>\n<p>useEffect takes two\u00a0params.</p>\n<ol>\n<li><strong>A function</strong></li>\n<li><strong>An array of dependencies (optional)</strong></li>\n</ol>\n<p>Example.</p>\n<blockquote>useEffect(() =&gt;\u00a0{</blockquote>\n<blockquote>},[${dependency}])</blockquote>\n<h3>What We Are Going To\u00a0Learn</h3>\n<p>I think the best way to understand a coding concept is to see it in action. So we are going to identify how we can use useEffect to interact with these\u00a0events:</p>\n<ol>\n<li><strong>When the component mounts.</strong></li>\n<li><strong>When a state variable\u00a0changes.</strong></li>\n<li><strong>When multiple state variable\u00a0changes.</strong></li>\n<li><strong>When the component unmounts.</strong></li>\n</ol>\n<h3>What You\u00a0Need</h3>\n<ul>\n<li>\n<strong>Computer</strong> (Me: Macbook\u00a0Pro)</li>\n<li>\n<strong>Code Editor </strong>(Me: Visual Studio\u00a0Code)</li>\n<li>\n<strong>Browser </strong>(Me:\u00a0Chrome)</li>\n<li>\n<strong>A shallow understanding of React </strong>(Me:\u00a0IDK)</li>\n</ul>\n<h3>Initiate React\u00a0App</h3>\n<p>Go to your chosen directory, and <strong>npx create-react-app useeffect. </strong>I named this project \u201cuseeffect\u201d, but feel free to choose whatever name you would\u00a0like.</p>\n<p>If you need more clarification on how to set up a react project then follow <a href=\"https://create-react-app.dev/docs/getting-started\">these</a> instructions.</p>\n<h4>UseEffect On\u00a0Mount</h4>\n<p>Once you have everything running.</p>\n<ul>\n<li>Go to App.js (src\u00a0folder).</li>\n<li>Import <strong>useEffect</strong> from <strong>react </strong>at the top of the\u00a0file.</li>\n<li>Inside the function component above the <strong>return</strong> statement call the <strong>useEffect</strong> hook.</li>\n<li>Insert an arrow function as the first argument.</li>\n<li>Inside the arrow function, console.log(\u201cmount\u201d).</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*E4nSwhf8S5NdIEv0zJszpw.png\"></figure><p>In the developer console, you will notice \u201cmount\u201d has been logged. And every time you refresh you will see \u201cmount\u201d reappear in the\u00a0console.</p>\n<blockquote>So far, this tells us that every time the component <strong>App</strong> is mounted onto the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a>, the <strong>useEffect</strong> is\u00a0called.</blockquote>\n<h4>UseEffect On State\u00a0Update</h4>\n<p>Now let's see how <strong>useEffect</strong> interacts when a state variable is\u00a0changed.</p>\n<ul>\n<li>Import the <strong>useState</strong> hook at the top of the\u00a0file.</li>\n<li>Initiate a state variable called <strong>count</strong> with the default value\u00a0zero.</li>\n<li>Erase all the contents inside the <strong>div </strong>with the className \u201cApp.\u201d</li>\n<li>Create a button inside the div that displays the count and increments the count by one when\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aQ9SIHRYMBz7_ILRPuMNxg.png\"></figure><p>With the developer console open, interact with the button, and watch how the useEffect responds to the state\u00a0updates.</p>\n<blockquote>In this case, useEffect is initially called after the component as mounted, and then called every time the count state is\u00a0updated.</blockquote>\n<p>Honestly, this was unexpected for me when I started working with React. By not passing a dependency array, I expected useEffect to only be called once when the component mounts.</p>\n<p>To confirm this, we are going to add another state variable and then see how useEffect reacts to each state\u00a0change.</p>\n<h4>UseEffect On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Initiate another state variable called <strong>\u201cdecrement\u201d</strong>. And set the default value as\u00a0100.</li>\n<li>Inside the div class \u201cApp\u201d, add another button that displays the value of <strong>decrement </strong>and decrements by one when the button is\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U6mmguYKC_7E0vKlBJe02A.png\"></figure><p>Notice when you switch between clicking on both buttons, the <strong>useEffect</strong> will always be\u00a0called.</p>\n<blockquote>useEffect will always be called on any state update when we don\u2019t pass a dependency array.</blockquote>\n<p>Since we didn\u2019t provide a dependency array, useEffect will always be called with any state update occurring inside the component.</p>\n<h4>UseEffect With A Dependency When Multiple States Are\u00a0Updated</h4>\n<p>Let\u2019s say we only want useEffect to update when count updates. Well, we can do that by adding a <strong>dependency array </strong>as a second parameter.</p>\n<ul>\n<li>Add an array as a second parameter to the useEffect hook.</li>\n<li>Add count inside the\u00a0array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6LfAIEF7Cg4UPuJOcZpJyg.png\"></figure><blockquote>useEffect is called after the component has mounted and then called again every time count updates and not decrement. This is accomplished through providing count as a dependency.</blockquote>\n<p>By only passing count as a dependency to the useEffect hook, we are essentially telling useEffect to only be called again when the count state variable\u00a0changes.</p>\n<h4>UseEffect With A Empty Dependency Array When Multiple States Are\u00a0Updated</h4>\n<p>We are going to see what happens when we pass an empty dependency array.</p>\n<ul>\n<li>Remove count from dependency array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/774/1*MlkFB2kJ0s1F2l5rNJ-WlQ.png\"></figure><p>As you interact with both buttons, you will notice that the developer console doesn\u2019t relog \u201cmount.\u201d It only logged \u201cmount\u201d after the component has been\u00a0mounted.</p>\n<blockquote>useEffect with an empty dependency array will only be called once after the component has\u00a0mounted.</blockquote>\n<p>But let\u2019s say that we want to separate the logic between how we handle when count updates and when decrement updates.</p>\n<p>We can achieve this by\u00a0either:</p>\n<ol>\n<li>Adding both states to the dependency array of the useEffect and insert logic in the function to separate the\u00a0process.</li>\n<li><strong><em>Adding another useEffect hook.</em></strong></li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*VUPK-jUct6g6NgYC\"><figcaption>Photo by <a href=\"https://unsplash.com/@benwhitephotography?utm_source=medium&amp;utm_medium=referral\">Ben White</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I know. I know. We can have multiple useEffect hooks inside a component. It took me a while to figure out that this was feasible.</p>\n<h4>Multiple UseEffects On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Create another useEffect hook and add decrement as a dependency.</li>\n<li>Update both console.logs to log their dependency variable.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*F--8bKn-bAhui1UgcSj9qQ.png\"></figure><blockquote>Both useEffects are called after the component has been mounted and are called again depending on when their dependencies update.</blockquote>\n<h4><strong>Perform Actions When The Component Will\u00a0Unmount</strong></h4>\n<p>Lastly, we are going to see how we can add logic before the component will unmount. Similarly to how we would use the lifecycle method <strong>componentWillUnmount </strong>for class components.</p>\n<p>A perfect example of when we would need to implement a process like this is when we subscribe to a listener and want to unsubscribe before the component unmounts.</p>\n<ol>\n<li>Remove the useEffects we previously created.</li>\n<li>Create a new useEffect and inside we will subscribe to the event listener\u00a0\u201cclick.\u201d</li>\n<li>At the end of the function, return a function that removes the listener.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yONhKL9uqHvuj9-yVJOJEg.png\"></figure><blockquote>return a function at the end of the useEffect function to perform actions before a component will unmount. Similarly to the lifecycle method componentWillUnmount.</blockquote>\n<p>Ta-da! Now you know how to perform actions before a component will\u00a0unmount.</p>\n<h3>Summary</h3>\n<p>Here\u2019s what we\u00a0learned:</p>\n<ol>\n<li>useEffect is always called once after the component is\u00a0mounted.</li>\n<li>useEffect <strong>without the dependency</strong> array will always be called again when any state is updated inside the component.</li>\n<li>useEffect with an <strong>empty dependency array</strong> will only be called once after the component is\u00a0mounted.</li>\n<li>useEffect with <strong>one or few dependencies</strong> will only be called again depending on when their dependencies update.</li>\n<li>Multiple useEffects can be declared inside a component.</li>\n<li>To handle actions before the component will unmount, return a function at the end of the useEffect function.</li>\n</ol>\n<p>Congrats on getting to the end! Now you have a better grasp on how to useEffect.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=97c4e6dc0a88\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["react", "useeffect", "react-hook", "learning-to-code", "coding"], "id": "97c4e6dc0a88"}, {"title": "Fetch Your Medium Posts Every day At Midnight", "pubDate": "2022-02-08 15:00:33", "link": "https://medium.com/@athletecoder/fetch-your-medium-posts-every-day-at-midnight-f9c02cac177c?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/f9c02cac177c", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh", "description": "<h4>And create a simple API to update your website\u00a0content.</h4><p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using Node, Express, and\u00a0Cron....</p>", "content": "\n<h3>How To Fetch Your Medium Posts Every day At\u00a0Midnight</h3>\n<h4>And create a simple API to update your website\u00a0content.</h4>\n<p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using <strong>Node</strong>, <strong>Express</strong>, and\u00a0<strong>Cron</strong>.</p>\n<p>I want to automate the process of copying the content from your Medium posts and pasting it to your personal\u00a0website.</p>\n<blockquote>Let\u2019s make our lives easier through automation so we have more free time to do whatever we\u00a0want!</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh\"><figcaption>Photo by <a href=\"https://unsplash.com/@anete_lusina?utm_source=medium&amp;utm_medium=referral\">Anete L\u016bsi\u0146a</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>For this tutorial, I\u2019ll be using <strong>Visual Studio</strong> for my code editor, but feel free to use whatever code editor you\u00a0desire.</p>\n<p>Let\u2019s get right into\u00a0it.</p>\n<h4>If you just want to see the code. Go\u00a0<a href=\"https://github.com/athlete-coder/medium\"><strong>here</strong></a>.</h4>\n<h3>Initiate Project</h3>\n<p>First, create a project folder director. I named my project folder <strong>medium. </strong>Once you have that created, let's init our project by opening the command line and typing <strong><em>npm\u00a0init</em>.</strong></p>\n<blockquote>Ensure that you are in your project director when npm\u00a0initing.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UrujjLmVGqFw9jZp9HYVkg.png\"></figure><p>I accepted all the default parameters when npm initing. After you finish the initiation process create an <strong>index.js</strong> file in the same directory. We will leave it for now and continue with installing our <strong>npm packages</strong>.</p>\n<p>In the command line, type<strong> <em>npm I node-fetch express\u00a0cron</em>.</strong></p>\n<p>After, open your <strong>package.json</strong> file.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gnZNk6poW0Lwl6gY3Yx4kw.png\"></figure><p>Your package.json file should look similar to the screenshot above. If you glance at the \u201c<strong>dependencies\u201d</strong> key, you\u2019ll notice an object with keys associated with the packages we installed and the version\u00a0number.</p>\n<p>This step is important.</p>\n<blockquote><strong>Add another key named \u201ctype\u201d and add \u201cmodule\u201d as its\u00a0value.</strong></blockquote>\n<p>This will allow us to use \u201c<strong>import\u201d </strong>instead<strong> </strong>of \u201c<strong>require\u201d</strong> to import packages into our index.js\u00a0file.</p>\n<p>Nice! We got everything we need to get to the fun part. It\u2019s time to\u00a0code.</p>\n<h3>Get Medium\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open the index.js\u00a0file.</li>\n<li>Import fetch from \u201cnode-fetch.\u201d</li>\n<li>Create an async function called \u201c<strong>getMediumPosts\u201d</strong> that accepts a parameter \u201c<strong>username\u201d</strong>. This function will be used to fetch all your medium posts from the username provided.</li>\n<li>Within the function brackets, let\u2019s write a script that will check if the username name is\u00a0valid.</li>\n<li>Next, within the same function, let\u2019s create a variable called <strong>URL</strong> that assigned a value of the URL we are going to request along with our username.</li>\n</ol>\n<blockquote>\n<strong>https://api.rss2json.com/v1/api.json</strong>?<strong>rss_url=https://medium.com/feed/{@username}</strong>\n</blockquote>\n<ol>\n<li>Next, we use the <strong>fetch</strong> package imported from above to send a request to the URL (created in the previous step) to fetch our profile information. We want the result of the fetch to be the result of this function so we need to add a <strong>return</strong> statement.</li>\n<li>Let\u2019s see the response we get by using <strong>console.log </strong>to log the response of our\u00a0fetch.</li>\n<li>Now, let's call the function with your medium username.</li>\n<li>In the command line run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XT7FSD9K8brp_5XLT_8S6Q.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9Sp_OoeuUN86NjeDe0Pn_g.png\"></figure><p>The terminal should log the response of our fetch function.</p>\n<p>For this tutorial, I only want the medium posts that the user, I, created. Looking at the response, I only need the \u201c<strong>items\u201d </strong>key<strong> </strong>in this response<strong>.</strong></p>\n<p>Next steps (use the next image for reference):</p>\n<ol><li>update the fetch function to only return the <strong>data.items</strong>.</li></ol>\n<p>We successfully created a function that will return the medium posts of the username provided.</p>\n<h3>Process and Store\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>storePosts\u201d</strong> that accepts a parameter \u201c<strong>posts\u201d</strong>. This function will create and store a JSON file of the posts we fetched from the previous function, <strong>getMediumPosts.</strong>\n</li>\n<li>Add <strong><em>Import fs from \u201cfs\u201d</em></strong> at the top of the file. We are going to use this preinstalled package to store the file\u00a0locally.</li>\n<li>Within the <strong>\u201cstorePosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully creates and stores the posts as a JSON file or <strong>rejects</strong> if it fails (reference next\u00a0image).</li>\n<li>Create another async function below<strong> \u201cstorePosts\u201d </strong>named<strong> \u201cprocessPosts\u201d </strong>that doesn\u2019t receive any parameters.</li>\n<li>Within this function, create a variable called <strong>\u201cposts\u201d</strong> that will store the response of the <strong>\u201cgetMediumPosts\u201d. </strong>Ensure you add an <strong>\u201cawait\u201d</strong> to wait for the response before continuing to the next line of\u00a0code.</li>\n<li>Within the same function and on the next line, we now want to pass the variable we created in the previous step to the function <strong>\u201cstorePosts\u201d </strong>to store our posts. Let\u2019s <strong>await</strong> this response.</li>\n<li>Below all of this beautiful code, let's call <strong>\u201cprocessPosts\u201d </strong>to test out our\u00a0logic.</li>\n</ol>\n<p>8. In the terminal run <strong>node\u00a0index.js</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ceFEcvtKt6g8sE3LnXcMTQ.png\"></figure><p>If everything worked properly you should see a <strong>posts.json</strong> file appear in your directory.</p>\n<p>Nice! Now we 3 functions created.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n</ol>\n<h3>Get Stored\u00a0Posts</h3>\n<p>Now, we want to be able to retrieve the posts we stored locally as a JSON\u00a0file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>getPosts\u201d</strong> that has no parameters. This function returns the <strong>posts.json</strong> file the <strong>\u201cstorePosts\u201d </strong>stored\u00a0locally.</li>\n<li>Within the <strong>\u201cgetPosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully retrieves the posts.json file or <strong>rejects</strong> it if it fails (reference next\u00a0image).</li>\n<li>Below this function, let's call <strong>\u201cgetPosts\u201d </strong>and <strong>console.log</strong> our response to ensure it\u2019s working properly.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ytcIyXGBjPd9WF-EHAnX-Q.png\"></figure><p>Nice! It logged our values from the posts.json file.</p>\n<p>Now we added another function to our \u201cfunction created\u201d\u00a0list.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n<li>\n<strong>\u201cgetPosts\u201d\u200a\u2014\u200a</strong>get our locally stored\u00a0posts</li>\n</ol>\n<h3>Create and Serve Our\u00a0Website</h3>\n<p>We are now going to use the <strong>express </strong>package to serve our plain HTML website and create an API that will return our medium\u00a0posts.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Add <strong>import express from \u201cexpress\u201d </strong>at the top of the\u00a0file.</li>\n<li>We need to initiate the express app so below we need to create a variable called <strong>app </strong>and assign it to the response of express (use image as a reference).</li>\n<li>At the bottom, we want our app to listen for a specific port to serve our website. We can use port <strong>3000 </strong>and add a callback function that will console.log that it is listening.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2BEJX3ltuzrHdeS_IgoDRg.png\"></figure><p>You should see listening on port\u00a03000.</p>\n<h4>Routes</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>We are going to create an API route that will send back a response to our client with our posts. Use <strong>\u201capp. get\u201d </strong>to initiate the route we\u00a0need.</li>\n<li>In the <strong>\u201capp. get\u201d</strong> function, for the first parameter, add a string value <strong>\u201c/API/posts/get\u201d. </strong>This will specify the route path the client will need to ping to retrieve the\u00a0posts.</li>\n<li>For the second parameter, add an async callback function (arrow or regular function) with two parameters, <strong>\u201creq\u201d </strong>and\u00a0<strong>\u201cres.\u201d</strong>\n</li>\n<li>In the callback function, call the <strong>\u201cgetPosts\u201d </strong>function.</li>\n<li>\n<strong>\u201cgetPosts\u201d</strong> is an async function that returns a promise. And we need to send the response back to the client. So I\u2019ll use <strong>\u201c.then\u201d </strong>to handle the successful response and <strong>\u201c.catch\u201d </strong>to handle the error if occurred<strong>.</strong>\n</li>\n<li>In the <strong>\u201c.then,\u201d </strong>add a callback function that will send the posts to the client using <strong>\u201cres.send\u201d</strong>.</li>\n<li>In the <strong>\u201c.catch,\u201d </strong>add a callback function that will send a status code of <strong>500 </strong>back to the client to indicate a failed response.</li>\n<li>Next, Using <strong>\u201capp. get\u201d</strong>, we want to create a base route that will send back our website as a response for all other routes. For the first parameter, use <strong>\u201c*\u201d </strong>to indicate all\u00a0routes.</li>\n<li>Add <strong>import path from \u201cpath\u201d </strong>at the top of the file. The path package is preinstalled with node. We will use this package to find the exact location of our <strong>HTML</strong>\u00a0file.</li>\n<li>Above the <strong>\u201capp. get\u201d </strong>we just created, create a variable named root and assign the variable the value of the function <strong>\u201cpath.resolve\u201d </strong>with the parameter of our HTML file, which will be <strong>\u201c./client\u201d.</strong>\n</li>\n<li>We also need to call<strong> \u201cexpress.static(root)\u201d</strong> to serve the static files we will create for our website inside our client folder. Add <strong>\u201capp.use(express.static(root))\u201d </strong>just below the previous step line of\u00a0code.</li>\n<li>In the <strong>\u201capp. get\u201d </strong>and in the second parameter, add a function that will send back the HTML file that we will create later (use the next image as a reference).</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GP1A7jttkivs3g6qsa_KVQ.png\"></figure><p>Congrats on getting this far. Now, have our server set up to the point where it will send back an HTML file that we haven\u2019t quite created yet. Let's get to that\u00a0now.</p>\n<h4>Website</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create a new folder named\u00a0<strong>client</strong>\n</li>\n<li>Inside the folder, create an <strong>index.html</strong> file</li>\n<li>Create another folder inside the client folder we just created named\u00a0<strong>js</strong>\n</li>\n<li>Inside the js folder create a file called<strong> script.js</strong>\n</li>\n<li>Open the <strong>index.html</strong> file, and initiate an HTML document.</li>\n<li>Inside the body tags, add an <strong>h1 </strong>tag and name it \u201cBlog\u201d or whatever you so\u00a0choose.</li>\n<li>Next, add a div with id as\u00a0<strong>root</strong>\n</li>\n<li>Load the js file we created previously by using the script\u00a0tag.</li>\n</ol>\n<blockquote>Shortcut for create an HTML document in VS is\u00a0! and then press\u00a0tab.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*viV8ksFIz72EvZrK08wsag.png\"></figure><p>We got our basic HTML created. Next, we need to update our <strong>script.js </strong>file to fetch our posts from our\u00a0server.</p>\n<p>Open the <strong>script.js </strong>file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called <strong>\u201cgetPosts\u201d</strong>. This function will ping the API we created previously from our server to get our\u00a0posts.</li>\n<li>Within the function, let's use the fetch function (preinstalled) to ping the route <strong>\u201capi/posts/get\u201d </strong>and return the response.</li>\n<li>Let\u2019s call the function and log the output using <strong>console.log</strong>\n</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jFhRJwOFVaQIBFkXF2Cr8Q.png\"></figure><p>Open a browser and go to <strong>localhost:3000. </strong>You should see a page with \u201cBlog\u201d displayed as header\u00a0text.</p>\n<p>In the developer tools, go to the console tab and you should see the posts logged in the\u00a0console.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aFNscSNdTHdCTLlEKf_ujg.png\"></figure><p>Good job! We are almost there. Let\u2019s display the posts on the page with the function <strong>\u201crenderPosts\u201d.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RZRAjPDRFOhjPE_yDfdb0Q.png\"></figure><p>Alright cool. We can see all of our posts displayed on the page now after we refreshed the\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LgZfHzj1SdUJxuJRhRQeuw.png\"></figure><p>One last\u00a0step!</p>\n<h3><strong>Cron Job (Schedule To Fetch Posts At Midnight Every\u00a0Day)</strong></h3>\n<p>Say we want to get the most up-to-date posts. We can do that by creating a job that will run every day at midnight. To do that, we can use the <strong>corn </strong>package that we installed.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open our index.js file to access our server\u00a0code.</li>\n<li>Add <strong>import cron from \u201ccron\u201d </strong>at the top of the\u00a0file.</li>\n<li>Create a variable just below called<strong> \u201cCronJob\u201d </strong>and assign it the value of<strong> \u201ccron.CronJob.\u201d</strong>\n</li>\n<li>Before our API route, create a variable called <strong>\u201cjob\u201d</strong> and assign it the value of the new function <strong>\u201cnew CropJob(\u2026)\u201d </strong>(use the image below for reference)<strong>.</strong>\n</li>\n<li>The first argument will be the time in which the function will be called. We will use <strong>\u201c00 00 * * *\u201d which indicates for every day at midnight. Use </strong><a href=\"https://crontab.guru/\"><strong>crontab</strong></a> for time reference.</li>\n<li>The second argument will be the function that will be called. We want to call <strong>\u201cprocessPosts\u201d </strong>to fetch and store the posts from\u00a0Medium.</li>\n<li>The third argument we can pass\u00a0null</li>\n<li>The fourth argument indicates whether to start the job after initiating. So we will pass\u00a0true.</li>\n<li>Back to the second argument, we want to stop the batch or notify us if an error occurs. In this case, I\u2019ll stop the batch, but you can send yourself a message or email indicating an\u00a0issue.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yPBjIbZcCbWqe2a1u5Rhzg.png\"></figure><h3>Congratulations!</h3>\n<p>You got to the end. That was a long process. Glad you stuck with it all the way through. You now have a server\u00a0that:</p>\n<ol>\n<li><strong>Runs a job at midnight to fetch your Medium posts and stores them\u00a0locally.</strong></li>\n<li><strong>Has an API that will send back a response of the posts that were stored\u00a0locally.</strong></li>\n<li><strong>And serves a basic website that calls the posts API and displays the\u00a0content.</strong></li>\n</ol>\n<p>You can visit the code\u00a0<a href=\"https://github.com/athlete-coder/medium\">here</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f9c02cac177c\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["blog", "express", "code", "automation", "node"], "id": "f9c02cac177c"}, {"title": "Linear-Gradient Underline Text", "pubDate": "2022-02-05 16:03:21", "link": "https://medium.com/@athletecoder/linear-gradient-underline-text-4e42d28aa343?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/4e42d28aa343", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png", "description": "<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4><p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it....</p>", "content": "\n<h3>Make A Linear-Gradient Underline Text</h3>\n<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4>\n<p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png\"></figure><p>I\u2019ll use <a href=\"http://codesandbox.io/\">codesandbox.io</a> for this illustration, but you can use whatever code editor you so\u00a0choose.</p>\n<p>Let\u2019s create a basic layout of a\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CfEvjW3xrVBrGLkjI9STtQ.png\"><figcaption>codesandbox.io</figcaption></figure><p>We now have the basic layout of the page with \u201cHello Everyone\u201d wrapped with an <strong>h1</strong> tag and displayed on the\u00a0page.</p>\n<p>In terms of content, we have everything we need in between the <strong>html</strong> tags. It\u2019s time for\u00a0styling.</p>\n<p>To add <strong>CSS </strong>styles, we need to add the <strong>style</strong> tags above or below the <strong>html</strong> tags. Let's place it above and add the initial styles for our <strong>h1</strong>\u00a0text.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KuP62ApaasDdrjUx9kI5Eg.png\"></figure><p>We made the font size 40 pixels and the font color\u00a0black.</p>\n<p>Now we can get to what you came here for. Adding the cool underline style.</p>\n<p>We first need to add a background color. I chose grey. I thought it complimented the black well, but you can use any color combination. Just replace the <strong>rgba</strong>\u00a0values.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bbPVyTeqbJdpI2ErzSYysQ.png\"></figure><p>We have to use the <strong>background-image </strong>property with <strong>linear-gradient</strong> instead of the <strong>background </strong>property.</p>\n<p>For some browsers, linear-gradient might need a prefix. You can learn more about it at <a href=\"https://www.w3schools.com/cssref/func_linear-gradient.asp\">w3schools.com</a>.</p>\n<p>I tried the background property, but the additional properties we will be adding do not apply to the background property.</p>\n<p>There\u2019s already an issue with the background color extending beyond the text. We\u2019ll fix that\u00a0now.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BmeXcxz3TeofSATNZfL9BA.png\"></figure><p>We set the <strong>display</strong> property as <strong>inline</strong> to make the width and height of the h1 tag the same as its\u00a0content.</p>\n<p>Now, need to adjust the size and position of the background.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ovrse_E1X9HtkHMBVCkonQ.png\"></figure><p>We adjust the size and position of the background based on the size of the font using\u00a0<strong>em.</strong></p>\n<p>And we also made the width of the background 100% to cover the size of the\u00a0content.</p>\n<p>Notice the background did not change when we add the<strong> background-size</strong> and <strong>background-position</strong> properties. We just need to add one more property.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*l3Y27gGKoamnGSPa_bSB9Q.png\"></figure><p>The <strong>background-repeat </strong>property fixed this for us. Now the size of the background is the size we set it\u00a0as.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y6b2U4q8MN1JTJSg7obsRw.png\"></figure><p>And it\u00a0wraps!</p>\n<p>The CSS code is below for your convenience.</p>\n<blockquote>background-image: linear-gradient(to right, rgba(180, 180, 180, 0.8), rgba(180, 180, 180,\u00a00.2));</blockquote>\n<blockquote>display: inline;</blockquote>\n<blockquote>background-position: 0\u00a00.6em;</blockquote>\n<blockquote>background-size: 100%\u00a00.8em;</blockquote>\n<blockquote>background-repeat: repeat-x;</blockquote>\n<p>There are limitations to this technique like not being able to round the background, but if I find a better way to do this I\u2019ll make sure to post it. If you already know a better way, let me know in the comments.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4e42d28aa343\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["html", "programming", "css", "style", "code"], "id": "4e42d28aa343"}, {"title": "What I Experienced Creating An MVP", "pubDate": "2022-02-03 15:35:00", "link": "https://medium.com/@athletecoder/what-i-experienced-creating-an-mvp-3d2702c7a925?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/3d2702c7a925", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9", "description": "<h4>4 months (over 1000\u00a0hours).</h4><p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working...</p>", "content": "\n<h4>4 months (over 1000\u00a0hours).</h4>\n<p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working on this\u00a0app.</p>\n<p>On July 26th, 2021 I began working on the mock-up of my training app. From then to January of 2022, I spent an average of 8 hours a day, over 1000 hours in total, slowly building this app. It was a slow, long, and dreadful process, but it was worth\u00a0it.</p>\n<h3>Issues I had During The\u00a0Process</h3>\n<p>Most of the issues I had were self-inflicting. Not physically, but emotionally and mentally. I would constantly doubt my abilities. I would say to\u00a0myself,</p>\n<blockquote>\u201cNobody is going to like my app. There will be something wrong with it. People are going to make fun of me. It\u2019ll be embarrassing. Is it even worth\u00a0it?\u201d</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9\"><figcaption>Photo by <a href=\"https://unsplash.com/@surface?utm_source=medium&amp;utm_medium=referral\">Surface</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Being a 26-year-old adult living with my mother didn\u2019t help either. In America, at the age of 18, you are expected to be on your own. You go to college and then right into the workforce. You are expected to have your life together before the age of\u00a026.</p>\n<p>So I neglected most of my social life spending most days at home. I would occasionally meet up with a few friends, but I hated when they would ask me, \u201cwhat have you been up to?\u201d And when I would explain to them my endeavors, there would be a confused look on their faces. Then spend emotional energy to get them to understand, but it always ended up in my disappointment.</p>\n<blockquote>Nobody can truly understand your perspective, your vision, your\u00a0dreams.</blockquote>\n<p>But the idea of being alone in my pursuits wasn\u2019t new to me. I felt like most of my life I\u2019ve had dreams that nobody understood or believed in. But I knew that the only opinion that truly mattered was\u00a0mine.</p>\n<h3>How I Coped With My\u00a0Issues</h3>\n<h3>Routine</h3>\n<p>Routine. Routine.\u00a0Routine.</p>\n<p>I briefly outline my routine in my <a href=\"https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3\">previous post</a>, but I can\u2019t emphasize enough how important a routine is and how it significantly improved my well-being and productivity.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*13hu8fUOz6vcN0h2\"><figcaption>Photo by <a href=\"https://unsplash.com/@jazminantoinette?utm_source=medium&amp;utm_medium=referral\">Jazmin Quaynor</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Anxiety improved significantly.</h4>\n<blockquote>Anxiety thrives from the\u00a0unknown.</blockquote>\n<p>I was adventuring into the unknown. I didn\u2019t know exactly what the outcome was going to be. And when I would spend too much time thinking about what could happen, my mind assumed the worse. I was\u00a0scared.</p>\n<blockquote>Adventuring into the unknown isn\u2019t so bad after all if you take it one day at a\u00a0time.</blockquote>\n<p>Taking it one day at a time helped me realize the negative thoughts in my mind were all an illusion. We don\u2019t know what will happen in the\u00a0future.</p>\n<p>Routine gave me a sense of control over my life. I knew what was coming next. Everything was predictable from one task to\u00a0another.</p>\n<p>And when I would rest my head on my pillow at night I could reflect on the day and be proud of myself for the progress I\u00a0made.</p>\n<h4>Productivity stayed consistent.</h4>\n<p>We are habitual creatures. Once a habit is established, the effort to perform the activity becomes effortless. And a routine is, by definition, a sequence of daily\u00a0habits.</p>\n<p>Our habits allow us if chosen and implemented correctly, to minimize <strong><em>decision fatigue</em></strong>. The concept behind decision\u00a0fatigue</p>\n<blockquote>\u201cis that a human\u2019s ability to make decisions can get worse after making many decisions, as their brain will be more fatigued.\u201d\u200a\u2014\u200a<a href=\"https://www.medicalnewstoday.com/articles/decision-fatigue#what-is-it\">Medical News\u00a0Today</a>\n</blockquote>\n<p>I wanted to conserve my energy to be primarily exerted on my work rather than on making decisions on things that can be automated. This robotic way of life is necessary for me to be consistent.</p>\n<p>A work block consists of 90 minutes of work and a 20-minute break. In the article, \u201c<a href=\"https://hubermanlab.com/teach-and-learn-better-with-a-neuroplasticity-super-protocol/\">TEACH &amp; LEARN BETTER WITH A \u201cNEUROPLASTICITY SUPER PROTOCOL</a>\u201d by Andrew Huberman,</p>\n<blockquote>\u201cSolid research shows that 90 minutes is about the longest period we can expect to maintain intense focus and effort toward learning.\u201d\u200a\u2014\u200aAndrew Huberman.</blockquote>\n<p>I came to figure out that 4 sessions a day were my limit. 2 sessions in the morning and 2 sessions in the afternoon.</p>\n<h3><strong>Social Media</strong></h3>\n<p>Have you ever caught yourself mindlessly scrolling through Instagram, Youtube, and/or other social media platforms? Sometimes I will catch myself in the act of scrolling and ask myself, \u201cWhat am I doing?\u201d But then continue to\u00a0scroll.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*FcAzrGhEF5nNIQSG\"><figcaption>Photo by <a href=\"https://unsplash.com/@georgiadelotz?utm_source=medium&amp;utm_medium=referral\">Georgia de Lotz</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Social media can be very helpful, especially Youtube. When an issue arises, Youtube is one of the top places on the internet I go to to find the answer. Youtube is also filled with a ton of aspiring content that motivated me to keep\u00a0going.</p>\n<blockquote>The algorithm is fighting for your attention.</blockquote>\n<p>I\u2019ll be watching a video I intended to watch. And then my curiosity gets the best of me. I\u2019ll scan the recommended videos and I\u2019ll come across an interesting title or thumbnail. Without thinking, I\u2019ll click on that video. And an hour later, I\u2019ll be down this rabbit hole. Repeating the same process over and over\u00a0again.</p>\n<p>Most of us use social media as our entertainment of choice. So I\u2019m not saying to abandon it, but to be aware of when and how you are using\u00a0it.</p>\n<h3>Pros of building an\u00a0MVP</h3>\n<h4>It\u2019s significantly cheaper than outsourcing</h4>\n<p>The tech stack I chose to use was free to get started building. <strong>MongoDB</strong> and <strong>Firebase</strong> have free tiers for development purposes. <strong>Node</strong> and <strong>React Native</strong> are open sources and free to\u00a0use.</p>\n<p>Going live will require some money. For me, I tried my best to spend the least amount of money possible. Below is the list of my monthly expenses after going\u00a0live.</p>\n<ul>\n<li>Heroku ~ $7.00 /\u00a0Month</li>\n<li>MongoDB ~ $50.00 /\u00a0Month</li>\n<li>Domain ~ $5.00 /\u00a0Month</li>\n<li>Custom Email ~ $12 / Month (Maybe, not necessary for\u00a0MVP)</li>\n<li>Apple Developer Program Fee ~ $99 / Year (IOS\u00a0Apps)</li>\n</ul>\n<p>It cost me about $83 per month to have my app live plus a bunch of time to get my product\u00a0built.</p>\n<h4><strong>Becoming more\u00a0skillful</strong></h4>\n<p>Have you ever heard of the compound effect? The concept of it all is that small habits compound over\u00a0time.</p>\n<figure><img alt=\"https://jamesclear.com/continuous-improvement\" src=\"https://cdn-images-1.medium.com/max/700/0*mNyQgkUpXy0v7joC.jpg\"><figcaption><a href=\"https://jamesclear.com/continuous-improvement\">Continuous Improvement:<br>How It Works and How to Master\u00a0It</a></figcaption></figure><blockquote>\u201cIf you get one percent better each day for one year, you\u2019ll end up thirty-seven times better by the time you\u2019re done.\u201d\u200a\u2014<a href=\"https://jamesclear.com/continuous-improvement\"><em>\u200aJames\u00a0Clear</em></a>\n</blockquote>\n<p>The small actions add up over time! So the more I apply my skills daily, the exponentially better I will become at\u00a0it.</p>\n<p>And the more skillful you become the more competitive advantage you have in the labor market. And If the product you build performs decently, then it shows potential clients and/or employers your competence.</p>\n<h4>Identifying Your\u00a0Limits</h4>\n<p>At about 7\u20138 hours of work, my energy levels are significantly drained. It becomes difficult for me to focus and my productivity takes a significant hit.</p>\n<p>There are some days when I would get stuck on a problem and I ended up working 10 hours that day. But I soon found out that I\u2019ve had more trouble sleeping those nights and was less productive the next\u00a0day.</p>\n<p>I don\u2019t know how some people can work beyond 8 hours a day consistently. I guess some people are built differently. I admire\u00a0it.</p>\n<p>I also learned that I can\u2019t function effectively without a sufficient amount of sleep. For me, the least I can get away with was 7 hours. Anything less than 7 hours I\u2019m a zombie. 8 hours of sleep is what I aim\u00a0for.</p>\n<blockquote>Getting enough quality sleep is even more important to our physical and mental health than diet and exercise.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5A-Hc1yNPW7n69fd\"><figcaption>Photo by <a href=\"https://unsplash.com/@twinsfisch?utm_source=medium&amp;utm_medium=referral\">Isabella and Zsa Fischer</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Matthew Walker, a scientist and professor of neuroscience and psychology who specializes in sleep, explains the importance of sleep and the severe side effects if we don\u2019t get enough sleep in his book, \u201c<a href=\"https://www.amazon.com/Why-We-Sleep-Unlocking-Dreams/dp/1501144316\">Why We Sleep</a>.\u201d You should give it a\u00a0read.</p>\n<h3>Cons of building an\u00a0MVP</h3>\n<h4>Time &amp; Hard Work (Expected)</h4>\n<p>Building an app requires discipline over a long time. It is not an easy goal. It\u2019s like a rollercoaster ride.</p>\n<p>It\u2019s somewhat easy at first. You are motivated and inspired by your idea so you start off sprinting. You are eager to get up in the morning so you can get working on your\u00a0project.</p>\n<p>But as you know, motivation fades. And when my motivation faded, about a month in, I relied on my routine to sustain my productivity.</p>\n<p>Expect your motivation to fade and have a plan. For me, my plan was a routine. Like I stated previously, A routine made it significantly easier for me to get myself at my desk and\u00a0work.</p>\n<h4>Money</h4>\n<p>Most products, if not all, require some initial investment. Previously, I stated that it cost me about $83 per month to have my app live. I wouldn\u2019t consider this a large amount of money, but it still cost me\u00a0money.</p>\n<p>The amount of money needed will vary from project to project. Depending on your project, it might require more or less than $83 a month. Beforehand, do your research to ensure you have the proper financial resources to support your\u00a0product.</p>\n<h3>Just Do\u00a0It</h3>\n<p>It will be difficult, but you can do it. Don\u2019t focus too much on the outcome. Focus on what is needed of you daily. Take each day one at a time. Be aware of your thoughts. If you have anxiety issues, established a\u00a0routine.</p>\n<blockquote>The future is nearly unpredictable, so choose to be optimistic about\u00a0it.</blockquote>\n<p>Failure and regret are both painful experiences. But,</p>\n<blockquote>Failure is only temporary. Regret lasts\u00a0forever.</blockquote>\n<p>Failure is an inevitable experience in the process<strong> </strong>of you becoming the best version of yourself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*O7uxEBtk4q5-ZXFr\"><figcaption>Photo by <a href=\"https://unsplash.com/@clarktibbs?utm_source=medium&amp;utm_medium=referral\">Clark Tibbs</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>If you have an idea, and you truly think it\u2019s valuable, then you should go for it. I mean, why not? There\u2019s only good that comes from the experience of trying. And what if everything works out in your favor? Then that will be\u00a0awesome!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3d2702c7a925\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["anxiety", "mvp-development", "overcoming-fear", "habits", "app-development"], "id": "3d2702c7a925"}, {"title": "Turning An Idea Into A Reality", "pubDate": "2022-01-26 15:37:49", "link": "https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/a75af7170fc3", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif", "description": "<h4>I built an\u00a0app</h4><p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new f...</p>", "content": "\n<h4>I built an\u00a0app</h4>\n<p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new favorite. I could feel the soreness in my bum beginning to kick in from sitting on a hard wooden chair for over 2 hours. I suddenly notice my teeth gnawing at a fingernail. I pull my finger away from my mouth and lay them on the\u00a0table.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif\"><figcaption>Photo by <a href=\"https://unsplash.com/@romanbozhko?utm_source=medium&amp;utm_medium=referral\">Roman Bozhko</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I took my gaze away from the screen and moved it to the view in front of me. The sun beamed through the glass windows. The light faded to a dim from the left side of the coffee shop to the right side. There were tables neatly placed around the coffee bar below. The shop was wrapped around with roads and trees. The different shades of green elevated the sense of life. People on motorbikes would constantly speed past. Most were single riders, but some would have multiple passengers. On occasion, I would see riders with multiple boxes stacked on top of each other balancing on the back of the bike. How did they not fall\u00a0over?</p>\n<p>\u201cWhat are you going to do with your life,\u201d I asked\u00a0myself.</p>\n<p>This question seemed to be a common occurrence at the time. I would typically tell myself that I\u2019m going to be a professional football player. But, when I would tell myself that I truly didn\u2019t believe it. The dream of playing professional football seemed unattainable. It seemed beyond my reach. I lost\u00a0faith.</p>\n<p>After what felt like hours, but was only a couple of minutes, the space between each thought began to expand. And then suddenly It became quiet inside my head for a long brief\u00a0moment.</p>\n<p>\u201cWhat if I can create a tool and/or service tailored to athletes, like myself, to help them enhance their training?\u201d</p>\n<p>And that\u2019s the first time the idea popped into my head. At the time, in 2019, I was on my soul-searching trip through Vietnam. The issue was I didn\u2019t know how to bring that idea to life. I didn\u2019t have enough money. Most of the money I made was already invested in this trip. And I didn\u2019t have the knowledge or skills to build it on my own. I only knew the basics of HTML, CSS, and JavaScript (JS).</p>\n<p>Fast forward to the end of January of 2020 (I abandoned the idea for a while), I was in Louisville, Kentucky employed as an IT Consultant. Most days I would arrive at the office about 10 minutes before 9, place a k-cup in the coffee machine, ponder what I\u2019m doing with myself, grab my coffee and then walk over to my desk. I was hardly engaged with what I was doing, so I found myself constantly wondering about life. But one day, the idea reappeared in my thoughts. I felt determined. I told myself I had nothing to lose and all the world to\u00a0gain.</p>\n<p>I brainstormed a couple of strategic options. I came down to two. I could wait until I had enough money to invest in contractors to build it for me, or I could teach myself the skills to do it on my own. The journey to do it on my own had less risk and more benefits if failure was the outcome. I also knew it was going to be a challenge.</p>\n<p>I typed into the Google search bar, \u201cHow to build an application from scratch?\u201d \u201cHave an idea, create a plan, and execute.\u201d I already knew most of these things. I was asking the wrong questions. I needed to know exactly what tech stack I was going to use and how I was going to apply them.<br> I had experience with JS so I stuck with it. NodeJs as the backend environment and JS, HTML, and CSS as the frontend. Doing additional research on frontend development, I stumbled upon JS frameworks. What I learned is that JS frameworks are prewritten JS code that allows for easier development. There were multiple JS frameworks to choose from; <strong>React</strong>, Vue and Angular were the most popular. <a href=\"https://reactjs.org/\"><strong>React</strong></a> seemed the most appealing based on popularity, so I decided to go with\u00a0it.</p>\n<p>I typed, \u201cTutorials on React,\u201d into Google\u2019s search bar. <a href=\"http://udemy.com/\">Udemy</a> was the first result. It was a website I\u2019ve heard about before through numerous ads. I arrived on Udemy\u2019s website, created an account, and found a course called, \u201cModern React and Redux.\u201d I didn\u2019t know what Redux was, but it had plenty of reviews and almost a 5-star rating so I bought\u00a0it.</p>\n<p>5:30 the next morning, and I\u2019m in my apartment sitting in front of my laptop computer screen starting the first lesson of \u201cModern React and Redux.\u201d And for the next month and a half, I would spend most mornings, for an hour or so, tackling each instructional video.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*a3L7KQrSEtxsa2-c\"><figcaption>Photo by <a href=\"https://unsplash.com/@altumcode?utm_source=medium&amp;utm_medium=referral\">AltumCode</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>After completing the course, I had a good understanding of the React Framework and how <a href=\"https://react-redux.js.org/\">Redux</a> integrated with it. But I needed to apply what I learned to\u00a0reality.</p>\n<p>A good buddy of mine recently started a podcast that focused on reviewing books and beers. It was the perfect opportunity for me to apply what I learned so I created a website for\u00a0them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FEMaWPMT6h-QopBZ_OUQFg.png\"><figcaption>The homepage of the website I created for the\u00a0podcast</figcaption></figure><p>The website had a store, blog, admin panel, and basic pages that every website needs. The store was the most difficult to implement. <a href=\"https://stripe.com/\"><strong>Stripe\u2019s API</strong></a> (payment processor) documentation was very easy to go through, but figuring out how to configure the process from item to cart, and then cart to checkout was difficult.</p>\n<p>I continued building other websites for leisure. Coming up with random ideas and then trying to bring those ideas to life. Then one day, I stumbled upon React Native when I was scrolling through Youtube. <a href=\"https://reactnative.dev/\">React Native</a> is a framework used to develop mobile and web applications, but mainly used for mobile applications.</p>\n<p>\u201cWhy not?\u201d I asked myself. I already have experience with React. The world is going towards mobile devices if it hasn\u2019t already. It will be a useful skill to have under my belt. Plus, my training idea will need to be mobile-first.</p>\n<p>I googled \u201cReact Native,\u201d navigated to their website, clicked on the \u201cGet Started\u201d button on the homepage, and then skimmed through their documentation. For newbies, like myself, the documentation recommended using <a href=\"https://expo.dev/\"><strong>Expo CLI</strong></a> to get started. So I dove right into\u00a0it.</p>\n<p>For my first mobile application with React Native, I built a social networking application called, \u201cLetsLink.\u201d It was an app where you were only shown other users within a 1-mile radius. It was complex, but I learned more about how to interact with APIs and honed my skills in React and\u00a0Redux.</p>\n<p>In my next app, I was a little intimidated at first, but I ejected my Expo CLI app into a bare workflow environment. Soon I came to realize it wasn\u2019t as bad as I thought, and that Google is my best\u00a0friend.</p>\n<p>In July of 2021, I was in San Diego, CA visiting my brother. It was a sunny afternoon and I was taking a stroll along the beach. A couple of hours prior, I submitted my first app to the app store. It was a <a href=\"https://habt-b0f23.web.app/\">habit tracker app</a>. I felt confident. \u201cI\u2019m ready,\u201d I whispered to myself with the thought of my main idea in\u00a0mind.</p>\n<p>The following day at about 6:30 AM, I walked over, with a black coffee in hand, to my brother\u2019s standing desk with my laptop resting on top of it. I opened the lid of the laptop and took a couple of sips of coffee while I waited for the laptop to boot up. When the login screen displayed I took one last sip of my coffee and rested the coffee mug to the left of my laptop. I typed in my login credentials.</p>\n<p>I spent the next 4 hours or so brainstorming the functionalities of the app, and creating a broad timeline of the process from scratch to launch. I planned for the app to be on the app store towards the end of December of 2021, so that gave me about 4\u00a0months.</p>\n<p>That same afternoon, after working out and spending some downtime with family and friends, I found myself back at the desk working on designing the prototype in <a href=\"https://www.figma.com/\">Figma</a> (a prototype software). I spent the next week designing a prototype of the app. Design isn\u2019t my strong suit, but I tried my best to say the\u00a0least.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*IS1mh5NZIwsxM5hg\"><figcaption>Photo by <a href=\"https://unsplash.com/@balazsketyi?utm_source=medium&amp;utm_medium=referral\">Bal\u00e1zs K\u00e9tyi</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I was looking outside the airplane window on my way back to Seattle, WA. Being above the clouds makes you wonder if you could just choose to see the brighter side of things. Sometimes we get so caught up below the clouds that we don\u2019t even wonder what\u2019s above\u00a0it.</p>\n<p>Is this going to work? Are people going to like it? What if it fails? It\u2019s going to be embarrassing.</p>\n<p>These negative self-degrading thoughts make a frequent occurrence throughout my pursuit for the next couple of months. I had no choice but to implement a routine to keep these thoughts at\u00a0bay.</p>\n<p>I was normally awake at 6:00 AM. Made coffee, took out the dogs, meditated for 10 minutes, and worked from 6:30 -7:00 AM until about 10:00 AM\u200a\u2014\u200a11:00 AM. I worked in 90-minute intervals with 20-minute breaks in between. Then I would eat breakfast, work out, and be back at it at around 2:00 -3:00 PM until about 6:00\u20137:00 PM. I would have dinner, and then, depending on how I was feeling, I would squeeze in another hour or so before I would get ready for bed. I was in bed at around 9:00 PM and asleep at 10:00 PM. I was consistent most days, but obviously, life and procrastination would sometimes get in the\u00a0way.</p>\n<p>It\u2019s always the first couple of minutes of my work session where my mind would complain about how I don\u2019t want to be doing this right now. And then suddenly, my mind would transition into a deep state of focus on the task at hand. I started to enjoy diving into those work sessions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-umRWDH1aVlAH_7C\"><figcaption>Photo by <a href=\"https://unsplash.com/@avirichards?utm_source=medium&amp;utm_medium=referral\">Avi Richards</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>It\u2019s Mid-December and I had an overwhelming amount of work to be done. I\u2019ve made significant progress, but there was a lot of design and content configuration that needed to be done. I audibled and planned for the app to be completed by the end of December and to hopefully submit the app towards the beginning of\u00a0January.</p>\n<p>January 10th, I was in Denver, Colorado visiting a friend I met in college. It was an early Friday morning, the sun beamed through the window and onto my face. I\u2019m standing at a tall round wooden table with my laptop resting on top of it. I feel a sense of relief as I hit the submit button. My app is finally done. For\u00a0now.</p>\n<p>This was only the start of this app\u2019s journey. This first release was just the MVP (minimal viable product) version. More like a beta version. This app still needs a lot of work. I know things didn\u2019t go exactly how I planned in July, but I\u2019m glad I accomplished my main goal and that was to complete and submit the\u00a0app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BncmMbXS9mSNgh6H\"><figcaption>Photo by <a href=\"https://unsplash.com/@nullplus?utm_source=medium&amp;utm_medium=referral\">Razvan Chisu</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Feel free to check out the app I created <a href=\"https://www.softlete.com/\">here</a>. Let me know what you think through the feedback form on the\u00a0website.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a75af7170fc3\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["entrepreneurship", "ideas", "app-development", "fear-of-failure", "coding"], "id": "a75af7170fc3"}, {"title": "How to UseEffect In React", "pubDate": "2022-02-13 16:25:41", "link": "https://medium.com/@athletecoder/how-to-useeffect-in-react-97c4e6dc0a88?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/97c4e6dc0a88", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png", "description": "<h4>A quick tutorial on how to useEffect.</h4><p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to ...</p>", "content": "\n<h4>A quick tutorial on how to useEffect.</h4>\n<p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to perform side\u00a0effects.</p>\n<p>Thanks to the React team, now we have\u00a0<a href=\"https://reactjs.org/docs/hooks-intro.html\"><strong>hooks</strong></a><strong>.</strong></p>\n<blockquote>\n<strong>React hooks </strong>give functions similar features to what is provided to\u00a0classes<strong>.</strong>\n</blockquote>\n<p>But In this post, we are going to focus on a React hook called <a href=\"https://reactjs.org/docs/hooks-effect.html\"><strong>useEffect</strong></a>. A hook that is pretty complex at first, but after today you will get a good grasp on how everything works.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png\"></figure><h3>What Is UseEffect</h3>\n<p><strong>useEffect </strong>is a hook that allows you to perform side effects from a functional component. It serves the same purpose as <strong>componentDidMount</strong>, <strong>componentDidUpdate</strong>, and <strong>componentWillUnmount </strong>lifecycle methods in React classes, but is unified into a single\u00a0API.</p>\n<p>useEffect takes two\u00a0params.</p>\n<ol>\n<li><strong>A function</strong></li>\n<li><strong>An array of dependencies (optional)</strong></li>\n</ol>\n<p>Example.</p>\n<blockquote>useEffect(() =&gt;\u00a0{</blockquote>\n<blockquote>},[${dependency}])</blockquote>\n<h3>What We Are Going To\u00a0Learn</h3>\n<p>I think the best way to understand a coding concept is to see it in action. So we are going to identify how we can use useEffect to interact with these\u00a0events:</p>\n<ol>\n<li><strong>When the component mounts.</strong></li>\n<li><strong>When a state variable\u00a0changes.</strong></li>\n<li><strong>When multiple state variable\u00a0changes.</strong></li>\n<li><strong>When the component unmounts.</strong></li>\n</ol>\n<h3>What You\u00a0Need</h3>\n<ul>\n<li>\n<strong>Computer</strong> (Me: Macbook\u00a0Pro)</li>\n<li>\n<strong>Code Editor </strong>(Me: Visual Studio\u00a0Code)</li>\n<li>\n<strong>Browser </strong>(Me:\u00a0Chrome)</li>\n<li>\n<strong>A shallow understanding of React </strong>(Me:\u00a0IDK)</li>\n</ul>\n<h3>Initiate React\u00a0App</h3>\n<p>Go to your chosen directory, and <strong>npx create-react-app useeffect. </strong>I named this project \u201cuseeffect\u201d, but feel free to choose whatever name you would\u00a0like.</p>\n<p>If you need more clarification on how to set up a react project then follow <a href=\"https://create-react-app.dev/docs/getting-started\">these</a> instructions.</p>\n<h4>UseEffect On\u00a0Mount</h4>\n<p>Once you have everything running.</p>\n<ul>\n<li>Go to App.js (src\u00a0folder).</li>\n<li>Import <strong>useEffect</strong> from <strong>react </strong>at the top of the\u00a0file.</li>\n<li>Inside the function component above the <strong>return</strong> statement call the <strong>useEffect</strong> hook.</li>\n<li>Insert an arrow function as the first argument.</li>\n<li>Inside the arrow function, console.log(\u201cmount\u201d).</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*E4nSwhf8S5NdIEv0zJszpw.png\"></figure><p>In the developer console, you will notice \u201cmount\u201d has been logged. And every time you refresh you will see \u201cmount\u201d reappear in the\u00a0console.</p>\n<blockquote>So far, this tells us that every time the component <strong>App</strong> is mounted onto the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a>, the <strong>useEffect</strong> is\u00a0called.</blockquote>\n<h4>UseEffect On State\u00a0Update</h4>\n<p>Now let's see how <strong>useEffect</strong> interacts when a state variable is\u00a0changed.</p>\n<ul>\n<li>Import the <strong>useState</strong> hook at the top of the\u00a0file.</li>\n<li>Initiate a state variable called <strong>count</strong> with the default value\u00a0zero.</li>\n<li>Erase all the contents inside the <strong>div </strong>with the className \u201cApp.\u201d</li>\n<li>Create a button inside the div that displays the count and increments the count by one when\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aQ9SIHRYMBz7_ILRPuMNxg.png\"></figure><p>With the developer console open, interact with the button, and watch how the useEffect responds to the state\u00a0updates.</p>\n<blockquote>In this case, useEffect is initially called after the component as mounted, and then called every time the count state is\u00a0updated.</blockquote>\n<p>Honestly, this was unexpected for me when I started working with React. By not passing a dependency array, I expected useEffect to only be called once when the component mounts.</p>\n<p>To confirm this, we are going to add another state variable and then see how useEffect reacts to each state\u00a0change.</p>\n<h4>UseEffect On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Initiate another state variable called <strong>\u201cdecrement\u201d</strong>. And set the default value as\u00a0100.</li>\n<li>Inside the div class \u201cApp\u201d, add another button that displays the value of <strong>decrement </strong>and decrements by one when the button is\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U6mmguYKC_7E0vKlBJe02A.png\"></figure><p>Notice when you switch between clicking on both buttons, the <strong>useEffect</strong> will always be\u00a0called.</p>\n<blockquote>useEffect will always be called on any state update when we don\u2019t pass a dependency array.</blockquote>\n<p>Since we didn\u2019t provide a dependency array, useEffect will always be called with any state update occurring inside the component.</p>\n<h4>UseEffect With A Dependency When Multiple States Are\u00a0Updated</h4>\n<p>Let\u2019s say we only want useEffect to update when count updates. Well, we can do that by adding a <strong>dependency array </strong>as a second parameter.</p>\n<ul>\n<li>Add an array as a second parameter to the useEffect hook.</li>\n<li>Add count inside the\u00a0array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6LfAIEF7Cg4UPuJOcZpJyg.png\"></figure><blockquote>useEffect is called after the component has mounted and then called again every time count updates and not decrement. This is accomplished through providing count as a dependency.</blockquote>\n<p>By only passing count as a dependency to the useEffect hook, we are essentially telling useEffect to only be called again when the count state variable\u00a0changes.</p>\n<h4>UseEffect With A Empty Dependency Array When Multiple States Are\u00a0Updated</h4>\n<p>We are going to see what happens when we pass an empty dependency array.</p>\n<ul>\n<li>Remove count from dependency array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/774/1*MlkFB2kJ0s1F2l5rNJ-WlQ.png\"></figure><p>As you interact with both buttons, you will notice that the developer console doesn\u2019t relog \u201cmount.\u201d It only logged \u201cmount\u201d after the component has been\u00a0mounted.</p>\n<blockquote>useEffect with an empty dependency array will only be called once after the component has\u00a0mounted.</blockquote>\n<p>But let\u2019s say that we want to separate the logic between how we handle when count updates and when decrement updates.</p>\n<p>We can achieve this by\u00a0either:</p>\n<ol>\n<li>Adding both states to the dependency array of the useEffect and insert logic in the function to separate the\u00a0process.</li>\n<li><strong><em>Adding another useEffect hook.</em></strong></li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*VUPK-jUct6g6NgYC\"><figcaption>Photo by <a href=\"https://unsplash.com/@benwhitephotography?utm_source=medium&amp;utm_medium=referral\">Ben White</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I know. I know. We can have multiple useEffect hooks inside a component. It took me a while to figure out that this was feasible.</p>\n<h4>Multiple UseEffects On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Create another useEffect hook and add decrement as a dependency.</li>\n<li>Update both console.logs to log their dependency variable.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*F--8bKn-bAhui1UgcSj9qQ.png\"></figure><blockquote>Both useEffects are called after the component has been mounted and are called again depending on when their dependencies update.</blockquote>\n<h4><strong>Perform Actions When The Component Will\u00a0Unmount</strong></h4>\n<p>Lastly, we are going to see how we can add logic before the component will unmount. Similarly to how we would use the lifecycle method <strong>componentWillUnmount </strong>for class components.</p>\n<p>A perfect example of when we would need to implement a process like this is when we subscribe to a listener and want to unsubscribe before the component unmounts.</p>\n<ol>\n<li>Remove the useEffects we previously created.</li>\n<li>Create a new useEffect and inside we will subscribe to the event listener\u00a0\u201cclick.\u201d</li>\n<li>At the end of the function, return a function that removes the listener.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yONhKL9uqHvuj9-yVJOJEg.png\"></figure><blockquote>return a function at the end of the useEffect function to perform actions before a component will unmount. Similarly to the lifecycle method componentWillUnmount.</blockquote>\n<p>Ta-da! Now you know how to perform actions before a component will\u00a0unmount.</p>\n<h3>Summary</h3>\n<p>Here\u2019s what we\u00a0learned:</p>\n<ol>\n<li>useEffect is always called once after the component is\u00a0mounted.</li>\n<li>useEffect <strong>without the dependency</strong> array will always be called again when any state is updated inside the component.</li>\n<li>useEffect with an <strong>empty dependency array</strong> will only be called once after the component is\u00a0mounted.</li>\n<li>useEffect with <strong>one or few dependencies</strong> will only be called again depending on when their dependencies update.</li>\n<li>Multiple useEffects can be declared inside a component.</li>\n<li>To handle actions before the component will unmount, return a function at the end of the useEffect function.</li>\n</ol>\n<p>Congrats on getting to the end! Now you have a better grasp on how to useEffect.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=97c4e6dc0a88\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["react", "useeffect", "react-hook", "learning-to-code", "coding"], "id": "97c4e6dc0a88"}, {"title": "Fetch Your Medium Posts Every day At Midnight", "pubDate": "2022-02-08 15:00:33", "link": "https://medium.com/@athletecoder/fetch-your-medium-posts-every-day-at-midnight-f9c02cac177c?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/f9c02cac177c", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh", "description": "<h4>And create a simple API to update your website\u00a0content.</h4><p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using Node, Express, and\u00a0Cron....</p>", "content": "\n<h3>How To Fetch Your Medium Posts Every day At\u00a0Midnight</h3>\n<h4>And create a simple API to update your website\u00a0content.</h4>\n<p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using <strong>Node</strong>, <strong>Express</strong>, and\u00a0<strong>Cron</strong>.</p>\n<p>I want to automate the process of copying the content from your Medium posts and pasting it to your personal\u00a0website.</p>\n<blockquote>Let\u2019s make our lives easier through automation so we have more free time to do whatever we\u00a0want!</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh\"><figcaption>Photo by <a href=\"https://unsplash.com/@anete_lusina?utm_source=medium&amp;utm_medium=referral\">Anete L\u016bsi\u0146a</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>For this tutorial, I\u2019ll be using <strong>Visual Studio</strong> for my code editor, but feel free to use whatever code editor you\u00a0desire.</p>\n<p>Let\u2019s get right into\u00a0it.</p>\n<h4>If you just want to see the code. Go\u00a0<a href=\"https://github.com/athlete-coder/medium\"><strong>here</strong></a>.</h4>\n<h3>Initiate Project</h3>\n<p>First, create a project folder director. I named my project folder <strong>medium. </strong>Once you have that created, let's init our project by opening the command line and typing <strong><em>npm\u00a0init</em>.</strong></p>\n<blockquote>Ensure that you are in your project director when npm\u00a0initing.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UrujjLmVGqFw9jZp9HYVkg.png\"></figure><p>I accepted all the default parameters when npm initing. After you finish the initiation process create an <strong>index.js</strong> file in the same directory. We will leave it for now and continue with installing our <strong>npm packages</strong>.</p>\n<p>In the command line, type<strong> <em>npm I node-fetch express\u00a0cron</em>.</strong></p>\n<p>After, open your <strong>package.json</strong> file.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gnZNk6poW0Lwl6gY3Yx4kw.png\"></figure><p>Your package.json file should look similar to the screenshot above. If you glance at the \u201c<strong>dependencies\u201d</strong> key, you\u2019ll notice an object with keys associated with the packages we installed and the version\u00a0number.</p>\n<p>This step is important.</p>\n<blockquote><strong>Add another key named \u201ctype\u201d and add \u201cmodule\u201d as its\u00a0value.</strong></blockquote>\n<p>This will allow us to use \u201c<strong>import\u201d </strong>instead<strong> </strong>of \u201c<strong>require\u201d</strong> to import packages into our index.js\u00a0file.</p>\n<p>Nice! We got everything we need to get to the fun part. It\u2019s time to\u00a0code.</p>\n<h3>Get Medium\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open the index.js\u00a0file.</li>\n<li>Import fetch from \u201cnode-fetch.\u201d</li>\n<li>Create an async function called \u201c<strong>getMediumPosts\u201d</strong> that accepts a parameter \u201c<strong>username\u201d</strong>. This function will be used to fetch all your medium posts from the username provided.</li>\n<li>Within the function brackets, let\u2019s write a script that will check if the username name is\u00a0valid.</li>\n<li>Next, within the same function, let\u2019s create a variable called <strong>URL</strong> that assigned a value of the URL we are going to request along with our username.</li>\n</ol>\n<blockquote>\n<strong>https://api.rss2json.com/v1/api.json</strong>?<strong>rss_url=https://medium.com/feed/{@username}</strong>\n</blockquote>\n<ol>\n<li>Next, we use the <strong>fetch</strong> package imported from above to send a request to the URL (created in the previous step) to fetch our profile information. We want the result of the fetch to be the result of this function so we need to add a <strong>return</strong> statement.</li>\n<li>Let\u2019s see the response we get by using <strong>console.log </strong>to log the response of our\u00a0fetch.</li>\n<li>Now, let's call the function with your medium username.</li>\n<li>In the command line run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XT7FSD9K8brp_5XLT_8S6Q.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9Sp_OoeuUN86NjeDe0Pn_g.png\"></figure><p>The terminal should log the response of our fetch function.</p>\n<p>For this tutorial, I only want the medium posts that the user, I, created. Looking at the response, I only need the \u201c<strong>items\u201d </strong>key<strong> </strong>in this response<strong>.</strong></p>\n<p>Next steps (use the next image for reference):</p>\n<ol><li>update the fetch function to only return the <strong>data.items</strong>.</li></ol>\n<p>We successfully created a function that will return the medium posts of the username provided.</p>\n<h3>Process and Store\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>storePosts\u201d</strong> that accepts a parameter \u201c<strong>posts\u201d</strong>. This function will create and store a JSON file of the posts we fetched from the previous function, <strong>getMediumPosts.</strong>\n</li>\n<li>Add <strong><em>Import fs from \u201cfs\u201d</em></strong> at the top of the file. We are going to use this preinstalled package to store the file\u00a0locally.</li>\n<li>Within the <strong>\u201cstorePosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully creates and stores the posts as a JSON file or <strong>rejects</strong> if it fails (reference next\u00a0image).</li>\n<li>Create another async function below<strong> \u201cstorePosts\u201d </strong>named<strong> \u201cprocessPosts\u201d </strong>that doesn\u2019t receive any parameters.</li>\n<li>Within this function, create a variable called <strong>\u201cposts\u201d</strong> that will store the response of the <strong>\u201cgetMediumPosts\u201d. </strong>Ensure you add an <strong>\u201cawait\u201d</strong> to wait for the response before continuing to the next line of\u00a0code.</li>\n<li>Within the same function and on the next line, we now want to pass the variable we created in the previous step to the function <strong>\u201cstorePosts\u201d </strong>to store our posts. Let\u2019s <strong>await</strong> this response.</li>\n<li>Below all of this beautiful code, let's call <strong>\u201cprocessPosts\u201d </strong>to test out our\u00a0logic.</li>\n</ol>\n<p>8. In the terminal run <strong>node\u00a0index.js</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ceFEcvtKt6g8sE3LnXcMTQ.png\"></figure><p>If everything worked properly you should see a <strong>posts.json</strong> file appear in your directory.</p>\n<p>Nice! Now we 3 functions created.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n</ol>\n<h3>Get Stored\u00a0Posts</h3>\n<p>Now, we want to be able to retrieve the posts we stored locally as a JSON\u00a0file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>getPosts\u201d</strong> that has no parameters. This function returns the <strong>posts.json</strong> file the <strong>\u201cstorePosts\u201d </strong>stored\u00a0locally.</li>\n<li>Within the <strong>\u201cgetPosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully retrieves the posts.json file or <strong>rejects</strong> it if it fails (reference next\u00a0image).</li>\n<li>Below this function, let's call <strong>\u201cgetPosts\u201d </strong>and <strong>console.log</strong> our response to ensure it\u2019s working properly.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ytcIyXGBjPd9WF-EHAnX-Q.png\"></figure><p>Nice! It logged our values from the posts.json file.</p>\n<p>Now we added another function to our \u201cfunction created\u201d\u00a0list.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n<li>\n<strong>\u201cgetPosts\u201d\u200a\u2014\u200a</strong>get our locally stored\u00a0posts</li>\n</ol>\n<h3>Create and Serve Our\u00a0Website</h3>\n<p>We are now going to use the <strong>express </strong>package to serve our plain HTML website and create an API that will return our medium\u00a0posts.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Add <strong>import express from \u201cexpress\u201d </strong>at the top of the\u00a0file.</li>\n<li>We need to initiate the express app so below we need to create a variable called <strong>app </strong>and assign it to the response of express (use image as a reference).</li>\n<li>At the bottom, we want our app to listen for a specific port to serve our website. We can use port <strong>3000 </strong>and add a callback function that will console.log that it is listening.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2BEJX3ltuzrHdeS_IgoDRg.png\"></figure><p>You should see listening on port\u00a03000.</p>\n<h4>Routes</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>We are going to create an API route that will send back a response to our client with our posts. Use <strong>\u201capp. get\u201d </strong>to initiate the route we\u00a0need.</li>\n<li>In the <strong>\u201capp. get\u201d</strong> function, for the first parameter, add a string value <strong>\u201c/API/posts/get\u201d. </strong>This will specify the route path the client will need to ping to retrieve the\u00a0posts.</li>\n<li>For the second parameter, add an async callback function (arrow or regular function) with two parameters, <strong>\u201creq\u201d </strong>and\u00a0<strong>\u201cres.\u201d</strong>\n</li>\n<li>In the callback function, call the <strong>\u201cgetPosts\u201d </strong>function.</li>\n<li>\n<strong>\u201cgetPosts\u201d</strong> is an async function that returns a promise. And we need to send the response back to the client. So I\u2019ll use <strong>\u201c.then\u201d </strong>to handle the successful response and <strong>\u201c.catch\u201d </strong>to handle the error if occurred<strong>.</strong>\n</li>\n<li>In the <strong>\u201c.then,\u201d </strong>add a callback function that will send the posts to the client using <strong>\u201cres.send\u201d</strong>.</li>\n<li>In the <strong>\u201c.catch,\u201d </strong>add a callback function that will send a status code of <strong>500 </strong>back to the client to indicate a failed response.</li>\n<li>Next, Using <strong>\u201capp. get\u201d</strong>, we want to create a base route that will send back our website as a response for all other routes. For the first parameter, use <strong>\u201c*\u201d </strong>to indicate all\u00a0routes.</li>\n<li>Add <strong>import path from \u201cpath\u201d </strong>at the top of the file. The path package is preinstalled with node. We will use this package to find the exact location of our <strong>HTML</strong>\u00a0file.</li>\n<li>Above the <strong>\u201capp. get\u201d </strong>we just created, create a variable named root and assign the variable the value of the function <strong>\u201cpath.resolve\u201d </strong>with the parameter of our HTML file, which will be <strong>\u201c./client\u201d.</strong>\n</li>\n<li>We also need to call<strong> \u201cexpress.static(root)\u201d</strong> to serve the static files we will create for our website inside our client folder. Add <strong>\u201capp.use(express.static(root))\u201d </strong>just below the previous step line of\u00a0code.</li>\n<li>In the <strong>\u201capp. get\u201d </strong>and in the second parameter, add a function that will send back the HTML file that we will create later (use the next image as a reference).</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GP1A7jttkivs3g6qsa_KVQ.png\"></figure><p>Congrats on getting this far. Now, have our server set up to the point where it will send back an HTML file that we haven\u2019t quite created yet. Let's get to that\u00a0now.</p>\n<h4>Website</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create a new folder named\u00a0<strong>client</strong>\n</li>\n<li>Inside the folder, create an <strong>index.html</strong> file</li>\n<li>Create another folder inside the client folder we just created named\u00a0<strong>js</strong>\n</li>\n<li>Inside the js folder create a file called<strong> script.js</strong>\n</li>\n<li>Open the <strong>index.html</strong> file, and initiate an HTML document.</li>\n<li>Inside the body tags, add an <strong>h1 </strong>tag and name it \u201cBlog\u201d or whatever you so\u00a0choose.</li>\n<li>Next, add a div with id as\u00a0<strong>root</strong>\n</li>\n<li>Load the js file we created previously by using the script\u00a0tag.</li>\n</ol>\n<blockquote>Shortcut for create an HTML document in VS is\u00a0! and then press\u00a0tab.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*viV8ksFIz72EvZrK08wsag.png\"></figure><p>We got our basic HTML created. Next, we need to update our <strong>script.js </strong>file to fetch our posts from our\u00a0server.</p>\n<p>Open the <strong>script.js </strong>file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called <strong>\u201cgetPosts\u201d</strong>. This function will ping the API we created previously from our server to get our\u00a0posts.</li>\n<li>Within the function, let's use the fetch function (preinstalled) to ping the route <strong>\u201capi/posts/get\u201d </strong>and return the response.</li>\n<li>Let\u2019s call the function and log the output using <strong>console.log</strong>\n</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jFhRJwOFVaQIBFkXF2Cr8Q.png\"></figure><p>Open a browser and go to <strong>localhost:3000. </strong>You should see a page with \u201cBlog\u201d displayed as header\u00a0text.</p>\n<p>In the developer tools, go to the console tab and you should see the posts logged in the\u00a0console.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aFNscSNdTHdCTLlEKf_ujg.png\"></figure><p>Good job! We are almost there. Let\u2019s display the posts on the page with the function <strong>\u201crenderPosts\u201d.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RZRAjPDRFOhjPE_yDfdb0Q.png\"></figure><p>Alright cool. We can see all of our posts displayed on the page now after we refreshed the\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LgZfHzj1SdUJxuJRhRQeuw.png\"></figure><p>One last\u00a0step!</p>\n<h3><strong>Cron Job (Schedule To Fetch Posts At Midnight Every\u00a0Day)</strong></h3>\n<p>Say we want to get the most up-to-date posts. We can do that by creating a job that will run every day at midnight. To do that, we can use the <strong>corn </strong>package that we installed.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open our index.js file to access our server\u00a0code.</li>\n<li>Add <strong>import cron from \u201ccron\u201d </strong>at the top of the\u00a0file.</li>\n<li>Create a variable just below called<strong> \u201cCronJob\u201d </strong>and assign it the value of<strong> \u201ccron.CronJob.\u201d</strong>\n</li>\n<li>Before our API route, create a variable called <strong>\u201cjob\u201d</strong> and assign it the value of the new function <strong>\u201cnew CropJob(\u2026)\u201d </strong>(use the image below for reference)<strong>.</strong>\n</li>\n<li>The first argument will be the time in which the function will be called. We will use <strong>\u201c00 00 * * *\u201d which indicates for every day at midnight. Use </strong><a href=\"https://crontab.guru/\"><strong>crontab</strong></a> for time reference.</li>\n<li>The second argument will be the function that will be called. We want to call <strong>\u201cprocessPosts\u201d </strong>to fetch and store the posts from\u00a0Medium.</li>\n<li>The third argument we can pass\u00a0null</li>\n<li>The fourth argument indicates whether to start the job after initiating. So we will pass\u00a0true.</li>\n<li>Back to the second argument, we want to stop the batch or notify us if an error occurs. In this case, I\u2019ll stop the batch, but you can send yourself a message or email indicating an\u00a0issue.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yPBjIbZcCbWqe2a1u5Rhzg.png\"></figure><h3>Congratulations!</h3>\n<p>You got to the end. That was a long process. Glad you stuck with it all the way through. You now have a server\u00a0that:</p>\n<ol>\n<li><strong>Runs a job at midnight to fetch your Medium posts and stores them\u00a0locally.</strong></li>\n<li><strong>Has an API that will send back a response of the posts that were stored\u00a0locally.</strong></li>\n<li><strong>And serves a basic website that calls the posts API and displays the\u00a0content.</strong></li>\n</ol>\n<p>You can visit the code\u00a0<a href=\"https://github.com/athlete-coder/medium\">here</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f9c02cac177c\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["blog", "express", "code", "automation", "node"], "id": "f9c02cac177c"}, {"title": "Linear-Gradient Underline Text", "pubDate": "2022-02-05 16:03:21", "link": "https://medium.com/@athletecoder/linear-gradient-underline-text-4e42d28aa343?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/4e42d28aa343", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png", "description": "<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4><p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it....</p>", "content": "\n<h3>Make A Linear-Gradient Underline Text</h3>\n<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4>\n<p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png\"></figure><p>I\u2019ll use <a href=\"http://codesandbox.io/\">codesandbox.io</a> for this illustration, but you can use whatever code editor you so\u00a0choose.</p>\n<p>Let\u2019s create a basic layout of a\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CfEvjW3xrVBrGLkjI9STtQ.png\"><figcaption>codesandbox.io</figcaption></figure><p>We now have the basic layout of the page with \u201cHello Everyone\u201d wrapped with an <strong>h1</strong> tag and displayed on the\u00a0page.</p>\n<p>In terms of content, we have everything we need in between the <strong>html</strong> tags. It\u2019s time for\u00a0styling.</p>\n<p>To add <strong>CSS </strong>styles, we need to add the <strong>style</strong> tags above or below the <strong>html</strong> tags. Let's place it above and add the initial styles for our <strong>h1</strong>\u00a0text.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KuP62ApaasDdrjUx9kI5Eg.png\"></figure><p>We made the font size 40 pixels and the font color\u00a0black.</p>\n<p>Now we can get to what you came here for. Adding the cool underline style.</p>\n<p>We first need to add a background color. I chose grey. I thought it complimented the black well, but you can use any color combination. Just replace the <strong>rgba</strong>\u00a0values.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bbPVyTeqbJdpI2ErzSYysQ.png\"></figure><p>We have to use the <strong>background-image </strong>property with <strong>linear-gradient</strong> instead of the <strong>background </strong>property.</p>\n<p>For some browsers, linear-gradient might need a prefix. You can learn more about it at <a href=\"https://www.w3schools.com/cssref/func_linear-gradient.asp\">w3schools.com</a>.</p>\n<p>I tried the background property, but the additional properties we will be adding do not apply to the background property.</p>\n<p>There\u2019s already an issue with the background color extending beyond the text. We\u2019ll fix that\u00a0now.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BmeXcxz3TeofSATNZfL9BA.png\"></figure><p>We set the <strong>display</strong> property as <strong>inline</strong> to make the width and height of the h1 tag the same as its\u00a0content.</p>\n<p>Now, need to adjust the size and position of the background.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ovrse_E1X9HtkHMBVCkonQ.png\"></figure><p>We adjust the size and position of the background based on the size of the font using\u00a0<strong>em.</strong></p>\n<p>And we also made the width of the background 100% to cover the size of the\u00a0content.</p>\n<p>Notice the background did not change when we add the<strong> background-size</strong> and <strong>background-position</strong> properties. We just need to add one more property.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*l3Y27gGKoamnGSPa_bSB9Q.png\"></figure><p>The <strong>background-repeat </strong>property fixed this for us. Now the size of the background is the size we set it\u00a0as.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y6b2U4q8MN1JTJSg7obsRw.png\"></figure><p>And it\u00a0wraps!</p>\n<p>The CSS code is below for your convenience.</p>\n<blockquote>background-image: linear-gradient(to right, rgba(180, 180, 180, 0.8), rgba(180, 180, 180,\u00a00.2));</blockquote>\n<blockquote>display: inline;</blockquote>\n<blockquote>background-position: 0\u00a00.6em;</blockquote>\n<blockquote>background-size: 100%\u00a00.8em;</blockquote>\n<blockquote>background-repeat: repeat-x;</blockquote>\n<p>There are limitations to this technique like not being able to round the background, but if I find a better way to do this I\u2019ll make sure to post it. If you already know a better way, let me know in the comments.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4e42d28aa343\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["html", "programming", "css", "style", "code"], "id": "4e42d28aa343"}, {"title": "What I Experienced Creating An MVP", "pubDate": "2022-02-03 15:35:00", "link": "https://medium.com/@athletecoder/what-i-experienced-creating-an-mvp-3d2702c7a925?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/3d2702c7a925", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9", "description": "<h4>4 months (over 1000\u00a0hours).</h4><p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working...</p>", "content": "\n<h4>4 months (over 1000\u00a0hours).</h4>\n<p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working on this\u00a0app.</p>\n<p>On July 26th, 2021 I began working on the mock-up of my training app. From then to January of 2022, I spent an average of 8 hours a day, over 1000 hours in total, slowly building this app. It was a slow, long, and dreadful process, but it was worth\u00a0it.</p>\n<h3>Issues I had During The\u00a0Process</h3>\n<p>Most of the issues I had were self-inflicting. Not physically, but emotionally and mentally. I would constantly doubt my abilities. I would say to\u00a0myself,</p>\n<blockquote>\u201cNobody is going to like my app. There will be something wrong with it. People are going to make fun of me. It\u2019ll be embarrassing. Is it even worth\u00a0it?\u201d</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9\"><figcaption>Photo by <a href=\"https://unsplash.com/@surface?utm_source=medium&amp;utm_medium=referral\">Surface</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Being a 26-year-old adult living with my mother didn\u2019t help either. In America, at the age of 18, you are expected to be on your own. You go to college and then right into the workforce. You are expected to have your life together before the age of\u00a026.</p>\n<p>So I neglected most of my social life spending most days at home. I would occasionally meet up with a few friends, but I hated when they would ask me, \u201cwhat have you been up to?\u201d And when I would explain to them my endeavors, there would be a confused look on their faces. Then spend emotional energy to get them to understand, but it always ended up in my disappointment.</p>\n<blockquote>Nobody can truly understand your perspective, your vision, your\u00a0dreams.</blockquote>\n<p>But the idea of being alone in my pursuits wasn\u2019t new to me. I felt like most of my life I\u2019ve had dreams that nobody understood or believed in. But I knew that the only opinion that truly mattered was\u00a0mine.</p>\n<h3>How I Coped With My\u00a0Issues</h3>\n<h3>Routine</h3>\n<p>Routine. Routine.\u00a0Routine.</p>\n<p>I briefly outline my routine in my <a href=\"https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3\">previous post</a>, but I can\u2019t emphasize enough how important a routine is and how it significantly improved my well-being and productivity.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*13hu8fUOz6vcN0h2\"><figcaption>Photo by <a href=\"https://unsplash.com/@jazminantoinette?utm_source=medium&amp;utm_medium=referral\">Jazmin Quaynor</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Anxiety improved significantly.</h4>\n<blockquote>Anxiety thrives from the\u00a0unknown.</blockquote>\n<p>I was adventuring into the unknown. I didn\u2019t know exactly what the outcome was going to be. And when I would spend too much time thinking about what could happen, my mind assumed the worse. I was\u00a0scared.</p>\n<blockquote>Adventuring into the unknown isn\u2019t so bad after all if you take it one day at a\u00a0time.</blockquote>\n<p>Taking it one day at a time helped me realize the negative thoughts in my mind were all an illusion. We don\u2019t know what will happen in the\u00a0future.</p>\n<p>Routine gave me a sense of control over my life. I knew what was coming next. Everything was predictable from one task to\u00a0another.</p>\n<p>And when I would rest my head on my pillow at night I could reflect on the day and be proud of myself for the progress I\u00a0made.</p>\n<h4>Productivity stayed consistent.</h4>\n<p>We are habitual creatures. Once a habit is established, the effort to perform the activity becomes effortless. And a routine is, by definition, a sequence of daily\u00a0habits.</p>\n<p>Our habits allow us if chosen and implemented correctly, to minimize <strong><em>decision fatigue</em></strong>. The concept behind decision\u00a0fatigue</p>\n<blockquote>\u201cis that a human\u2019s ability to make decisions can get worse after making many decisions, as their brain will be more fatigued.\u201d\u200a\u2014\u200a<a href=\"https://www.medicalnewstoday.com/articles/decision-fatigue#what-is-it\">Medical News\u00a0Today</a>\n</blockquote>\n<p>I wanted to conserve my energy to be primarily exerted on my work rather than on making decisions on things that can be automated. This robotic way of life is necessary for me to be consistent.</p>\n<p>A work block consists of 90 minutes of work and a 20-minute break. In the article, \u201c<a href=\"https://hubermanlab.com/teach-and-learn-better-with-a-neuroplasticity-super-protocol/\">TEACH &amp; LEARN BETTER WITH A \u201cNEUROPLASTICITY SUPER PROTOCOL</a>\u201d by Andrew Huberman,</p>\n<blockquote>\u201cSolid research shows that 90 minutes is about the longest period we can expect to maintain intense focus and effort toward learning.\u201d\u200a\u2014\u200aAndrew Huberman.</blockquote>\n<p>I came to figure out that 4 sessions a day were my limit. 2 sessions in the morning and 2 sessions in the afternoon.</p>\n<h3><strong>Social Media</strong></h3>\n<p>Have you ever caught yourself mindlessly scrolling through Instagram, Youtube, and/or other social media platforms? Sometimes I will catch myself in the act of scrolling and ask myself, \u201cWhat am I doing?\u201d But then continue to\u00a0scroll.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*FcAzrGhEF5nNIQSG\"><figcaption>Photo by <a href=\"https://unsplash.com/@georgiadelotz?utm_source=medium&amp;utm_medium=referral\">Georgia de Lotz</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Social media can be very helpful, especially Youtube. When an issue arises, Youtube is one of the top places on the internet I go to to find the answer. Youtube is also filled with a ton of aspiring content that motivated me to keep\u00a0going.</p>\n<blockquote>The algorithm is fighting for your attention.</blockquote>\n<p>I\u2019ll be watching a video I intended to watch. And then my curiosity gets the best of me. I\u2019ll scan the recommended videos and I\u2019ll come across an interesting title or thumbnail. Without thinking, I\u2019ll click on that video. And an hour later, I\u2019ll be down this rabbit hole. Repeating the same process over and over\u00a0again.</p>\n<p>Most of us use social media as our entertainment of choice. So I\u2019m not saying to abandon it, but to be aware of when and how you are using\u00a0it.</p>\n<h3>Pros of building an\u00a0MVP</h3>\n<h4>It\u2019s significantly cheaper than outsourcing</h4>\n<p>The tech stack I chose to use was free to get started building. <strong>MongoDB</strong> and <strong>Firebase</strong> have free tiers for development purposes. <strong>Node</strong> and <strong>React Native</strong> are open sources and free to\u00a0use.</p>\n<p>Going live will require some money. For me, I tried my best to spend the least amount of money possible. Below is the list of my monthly expenses after going\u00a0live.</p>\n<ul>\n<li>Heroku ~ $7.00 /\u00a0Month</li>\n<li>MongoDB ~ $50.00 /\u00a0Month</li>\n<li>Domain ~ $5.00 /\u00a0Month</li>\n<li>Custom Email ~ $12 / Month (Maybe, not necessary for\u00a0MVP)</li>\n<li>Apple Developer Program Fee ~ $99 / Year (IOS\u00a0Apps)</li>\n</ul>\n<p>It cost me about $83 per month to have my app live plus a bunch of time to get my product\u00a0built.</p>\n<h4><strong>Becoming more\u00a0skillful</strong></h4>\n<p>Have you ever heard of the compound effect? The concept of it all is that small habits compound over\u00a0time.</p>\n<figure><img alt=\"https://jamesclear.com/continuous-improvement\" src=\"https://cdn-images-1.medium.com/max/700/0*mNyQgkUpXy0v7joC.jpg\"><figcaption><a href=\"https://jamesclear.com/continuous-improvement\">Continuous Improvement:<br>How It Works and How to Master\u00a0It</a></figcaption></figure><blockquote>\u201cIf you get one percent better each day for one year, you\u2019ll end up thirty-seven times better by the time you\u2019re done.\u201d\u200a\u2014<a href=\"https://jamesclear.com/continuous-improvement\"><em>\u200aJames\u00a0Clear</em></a>\n</blockquote>\n<p>The small actions add up over time! So the more I apply my skills daily, the exponentially better I will become at\u00a0it.</p>\n<p>And the more skillful you become the more competitive advantage you have in the labor market. And If the product you build performs decently, then it shows potential clients and/or employers your competence.</p>\n<h4>Identifying Your\u00a0Limits</h4>\n<p>At about 7\u20138 hours of work, my energy levels are significantly drained. It becomes difficult for me to focus and my productivity takes a significant hit.</p>\n<p>There are some days when I would get stuck on a problem and I ended up working 10 hours that day. But I soon found out that I\u2019ve had more trouble sleeping those nights and was less productive the next\u00a0day.</p>\n<p>I don\u2019t know how some people can work beyond 8 hours a day consistently. I guess some people are built differently. I admire\u00a0it.</p>\n<p>I also learned that I can\u2019t function effectively without a sufficient amount of sleep. For me, the least I can get away with was 7 hours. Anything less than 7 hours I\u2019m a zombie. 8 hours of sleep is what I aim\u00a0for.</p>\n<blockquote>Getting enough quality sleep is even more important to our physical and mental health than diet and exercise.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5A-Hc1yNPW7n69fd\"><figcaption>Photo by <a href=\"https://unsplash.com/@twinsfisch?utm_source=medium&amp;utm_medium=referral\">Isabella and Zsa Fischer</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Matthew Walker, a scientist and professor of neuroscience and psychology who specializes in sleep, explains the importance of sleep and the severe side effects if we don\u2019t get enough sleep in his book, \u201c<a href=\"https://www.amazon.com/Why-We-Sleep-Unlocking-Dreams/dp/1501144316\">Why We Sleep</a>.\u201d You should give it a\u00a0read.</p>\n<h3>Cons of building an\u00a0MVP</h3>\n<h4>Time &amp; Hard Work (Expected)</h4>\n<p>Building an app requires discipline over a long time. It is not an easy goal. It\u2019s like a rollercoaster ride.</p>\n<p>It\u2019s somewhat easy at first. You are motivated and inspired by your idea so you start off sprinting. You are eager to get up in the morning so you can get working on your\u00a0project.</p>\n<p>But as you know, motivation fades. And when my motivation faded, about a month in, I relied on my routine to sustain my productivity.</p>\n<p>Expect your motivation to fade and have a plan. For me, my plan was a routine. Like I stated previously, A routine made it significantly easier for me to get myself at my desk and\u00a0work.</p>\n<h4>Money</h4>\n<p>Most products, if not all, require some initial investment. Previously, I stated that it cost me about $83 per month to have my app live. I wouldn\u2019t consider this a large amount of money, but it still cost me\u00a0money.</p>\n<p>The amount of money needed will vary from project to project. Depending on your project, it might require more or less than $83 a month. Beforehand, do your research to ensure you have the proper financial resources to support your\u00a0product.</p>\n<h3>Just Do\u00a0It</h3>\n<p>It will be difficult, but you can do it. Don\u2019t focus too much on the outcome. Focus on what is needed of you daily. Take each day one at a time. Be aware of your thoughts. If you have anxiety issues, established a\u00a0routine.</p>\n<blockquote>The future is nearly unpredictable, so choose to be optimistic about\u00a0it.</blockquote>\n<p>Failure and regret are both painful experiences. But,</p>\n<blockquote>Failure is only temporary. Regret lasts\u00a0forever.</blockquote>\n<p>Failure is an inevitable experience in the process<strong> </strong>of you becoming the best version of yourself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*O7uxEBtk4q5-ZXFr\"><figcaption>Photo by <a href=\"https://unsplash.com/@clarktibbs?utm_source=medium&amp;utm_medium=referral\">Clark Tibbs</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>If you have an idea, and you truly think it\u2019s valuable, then you should go for it. I mean, why not? There\u2019s only good that comes from the experience of trying. And what if everything works out in your favor? Then that will be\u00a0awesome!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3d2702c7a925\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["anxiety", "mvp-development", "overcoming-fear", "habits", "app-development"], "id": "3d2702c7a925"}, {"title": "Turning An Idea Into A Reality", "pubDate": "2022-01-26 15:37:49", "link": "https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/a75af7170fc3", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif", "description": "<h4>I built an\u00a0app</h4><p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new f...</p>", "content": "\n<h4>I built an\u00a0app</h4>\n<p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new favorite. I could feel the soreness in my bum beginning to kick in from sitting on a hard wooden chair for over 2 hours. I suddenly notice my teeth gnawing at a fingernail. I pull my finger away from my mouth and lay them on the\u00a0table.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif\"><figcaption>Photo by <a href=\"https://unsplash.com/@romanbozhko?utm_source=medium&amp;utm_medium=referral\">Roman Bozhko</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I took my gaze away from the screen and moved it to the view in front of me. The sun beamed through the glass windows. The light faded to a dim from the left side of the coffee shop to the right side. There were tables neatly placed around the coffee bar below. The shop was wrapped around with roads and trees. The different shades of green elevated the sense of life. People on motorbikes would constantly speed past. Most were single riders, but some would have multiple passengers. On occasion, I would see riders with multiple boxes stacked on top of each other balancing on the back of the bike. How did they not fall\u00a0over?</p>\n<p>\u201cWhat are you going to do with your life,\u201d I asked\u00a0myself.</p>\n<p>This question seemed to be a common occurrence at the time. I would typically tell myself that I\u2019m going to be a professional football player. But, when I would tell myself that I truly didn\u2019t believe it. The dream of playing professional football seemed unattainable. It seemed beyond my reach. I lost\u00a0faith.</p>\n<p>After what felt like hours, but was only a couple of minutes, the space between each thought began to expand. And then suddenly It became quiet inside my head for a long brief\u00a0moment.</p>\n<p>\u201cWhat if I can create a tool and/or service tailored to athletes, like myself, to help them enhance their training?\u201d</p>\n<p>And that\u2019s the first time the idea popped into my head. At the time, in 2019, I was on my soul-searching trip through Vietnam. The issue was I didn\u2019t know how to bring that idea to life. I didn\u2019t have enough money. Most of the money I made was already invested in this trip. And I didn\u2019t have the knowledge or skills to build it on my own. I only knew the basics of HTML, CSS, and JavaScript (JS).</p>\n<p>Fast forward to the end of January of 2020 (I abandoned the idea for a while), I was in Louisville, Kentucky employed as an IT Consultant. Most days I would arrive at the office about 10 minutes before 9, place a k-cup in the coffee machine, ponder what I\u2019m doing with myself, grab my coffee and then walk over to my desk. I was hardly engaged with what I was doing, so I found myself constantly wondering about life. But one day, the idea reappeared in my thoughts. I felt determined. I told myself I had nothing to lose and all the world to\u00a0gain.</p>\n<p>I brainstormed a couple of strategic options. I came down to two. I could wait until I had enough money to invest in contractors to build it for me, or I could teach myself the skills to do it on my own. The journey to do it on my own had less risk and more benefits if failure was the outcome. I also knew it was going to be a challenge.</p>\n<p>I typed into the Google search bar, \u201cHow to build an application from scratch?\u201d \u201cHave an idea, create a plan, and execute.\u201d I already knew most of these things. I was asking the wrong questions. I needed to know exactly what tech stack I was going to use and how I was going to apply them.<br> I had experience with JS so I stuck with it. NodeJs as the backend environment and JS, HTML, and CSS as the frontend. Doing additional research on frontend development, I stumbled upon JS frameworks. What I learned is that JS frameworks are prewritten JS code that allows for easier development. There were multiple JS frameworks to choose from; <strong>React</strong>, Vue and Angular were the most popular. <a href=\"https://reactjs.org/\"><strong>React</strong></a> seemed the most appealing based on popularity, so I decided to go with\u00a0it.</p>\n<p>I typed, \u201cTutorials on React,\u201d into Google\u2019s search bar. <a href=\"http://udemy.com/\">Udemy</a> was the first result. It was a website I\u2019ve heard about before through numerous ads. I arrived on Udemy\u2019s website, created an account, and found a course called, \u201cModern React and Redux.\u201d I didn\u2019t know what Redux was, but it had plenty of reviews and almost a 5-star rating so I bought\u00a0it.</p>\n<p>5:30 the next morning, and I\u2019m in my apartment sitting in front of my laptop computer screen starting the first lesson of \u201cModern React and Redux.\u201d And for the next month and a half, I would spend most mornings, for an hour or so, tackling each instructional video.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*a3L7KQrSEtxsa2-c\"><figcaption>Photo by <a href=\"https://unsplash.com/@altumcode?utm_source=medium&amp;utm_medium=referral\">AltumCode</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>After completing the course, I had a good understanding of the React Framework and how <a href=\"https://react-redux.js.org/\">Redux</a> integrated with it. But I needed to apply what I learned to\u00a0reality.</p>\n<p>A good buddy of mine recently started a podcast that focused on reviewing books and beers. It was the perfect opportunity for me to apply what I learned so I created a website for\u00a0them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FEMaWPMT6h-QopBZ_OUQFg.png\"><figcaption>The homepage of the website I created for the\u00a0podcast</figcaption></figure><p>The website had a store, blog, admin panel, and basic pages that every website needs. The store was the most difficult to implement. <a href=\"https://stripe.com/\"><strong>Stripe\u2019s API</strong></a> (payment processor) documentation was very easy to go through, but figuring out how to configure the process from item to cart, and then cart to checkout was difficult.</p>\n<p>I continued building other websites for leisure. Coming up with random ideas and then trying to bring those ideas to life. Then one day, I stumbled upon React Native when I was scrolling through Youtube. <a href=\"https://reactnative.dev/\">React Native</a> is a framework used to develop mobile and web applications, but mainly used for mobile applications.</p>\n<p>\u201cWhy not?\u201d I asked myself. I already have experience with React. The world is going towards mobile devices if it hasn\u2019t already. It will be a useful skill to have under my belt. Plus, my training idea will need to be mobile-first.</p>\n<p>I googled \u201cReact Native,\u201d navigated to their website, clicked on the \u201cGet Started\u201d button on the homepage, and then skimmed through their documentation. For newbies, like myself, the documentation recommended using <a href=\"https://expo.dev/\"><strong>Expo CLI</strong></a> to get started. So I dove right into\u00a0it.</p>\n<p>For my first mobile application with React Native, I built a social networking application called, \u201cLetsLink.\u201d It was an app where you were only shown other users within a 1-mile radius. It was complex, but I learned more about how to interact with APIs and honed my skills in React and\u00a0Redux.</p>\n<p>In my next app, I was a little intimidated at first, but I ejected my Expo CLI app into a bare workflow environment. Soon I came to realize it wasn\u2019t as bad as I thought, and that Google is my best\u00a0friend.</p>\n<p>In July of 2021, I was in San Diego, CA visiting my brother. It was a sunny afternoon and I was taking a stroll along the beach. A couple of hours prior, I submitted my first app to the app store. It was a <a href=\"https://habt-b0f23.web.app/\">habit tracker app</a>. I felt confident. \u201cI\u2019m ready,\u201d I whispered to myself with the thought of my main idea in\u00a0mind.</p>\n<p>The following day at about 6:30 AM, I walked over, with a black coffee in hand, to my brother\u2019s standing desk with my laptop resting on top of it. I opened the lid of the laptop and took a couple of sips of coffee while I waited for the laptop to boot up. When the login screen displayed I took one last sip of my coffee and rested the coffee mug to the left of my laptop. I typed in my login credentials.</p>\n<p>I spent the next 4 hours or so brainstorming the functionalities of the app, and creating a broad timeline of the process from scratch to launch. I planned for the app to be on the app store towards the end of December of 2021, so that gave me about 4\u00a0months.</p>\n<p>That same afternoon, after working out and spending some downtime with family and friends, I found myself back at the desk working on designing the prototype in <a href=\"https://www.figma.com/\">Figma</a> (a prototype software). I spent the next week designing a prototype of the app. Design isn\u2019t my strong suit, but I tried my best to say the\u00a0least.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*IS1mh5NZIwsxM5hg\"><figcaption>Photo by <a href=\"https://unsplash.com/@balazsketyi?utm_source=medium&amp;utm_medium=referral\">Bal\u00e1zs K\u00e9tyi</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I was looking outside the airplane window on my way back to Seattle, WA. Being above the clouds makes you wonder if you could just choose to see the brighter side of things. Sometimes we get so caught up below the clouds that we don\u2019t even wonder what\u2019s above\u00a0it.</p>\n<p>Is this going to work? Are people going to like it? What if it fails? It\u2019s going to be embarrassing.</p>\n<p>These negative self-degrading thoughts make a frequent occurrence throughout my pursuit for the next couple of months. I had no choice but to implement a routine to keep these thoughts at\u00a0bay.</p>\n<p>I was normally awake at 6:00 AM. Made coffee, took out the dogs, meditated for 10 minutes, and worked from 6:30 -7:00 AM until about 10:00 AM\u200a\u2014\u200a11:00 AM. I worked in 90-minute intervals with 20-minute breaks in between. Then I would eat breakfast, work out, and be back at it at around 2:00 -3:00 PM until about 6:00\u20137:00 PM. I would have dinner, and then, depending on how I was feeling, I would squeeze in another hour or so before I would get ready for bed. I was in bed at around 9:00 PM and asleep at 10:00 PM. I was consistent most days, but obviously, life and procrastination would sometimes get in the\u00a0way.</p>\n<p>It\u2019s always the first couple of minutes of my work session where my mind would complain about how I don\u2019t want to be doing this right now. And then suddenly, my mind would transition into a deep state of focus on the task at hand. I started to enjoy diving into those work sessions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-umRWDH1aVlAH_7C\"><figcaption>Photo by <a href=\"https://unsplash.com/@avirichards?utm_source=medium&amp;utm_medium=referral\">Avi Richards</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>It\u2019s Mid-December and I had an overwhelming amount of work to be done. I\u2019ve made significant progress, but there was a lot of design and content configuration that needed to be done. I audibled and planned for the app to be completed by the end of December and to hopefully submit the app towards the beginning of\u00a0January.</p>\n<p>January 10th, I was in Denver, Colorado visiting a friend I met in college. It was an early Friday morning, the sun beamed through the window and onto my face. I\u2019m standing at a tall round wooden table with my laptop resting on top of it. I feel a sense of relief as I hit the submit button. My app is finally done. For\u00a0now.</p>\n<p>This was only the start of this app\u2019s journey. This first release was just the MVP (minimal viable product) version. More like a beta version. This app still needs a lot of work. I know things didn\u2019t go exactly how I planned in July, but I\u2019m glad I accomplished my main goal and that was to complete and submit the\u00a0app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BncmMbXS9mSNgh6H\"><figcaption>Photo by <a href=\"https://unsplash.com/@nullplus?utm_source=medium&amp;utm_medium=referral\">Razvan Chisu</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Feel free to check out the app I created <a href=\"https://www.softlete.com/\">here</a>. Let me know what you think through the feedback form on the\u00a0website.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a75af7170fc3\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["entrepreneurship", "ideas", "app-development", "fear-of-failure", "coding"], "id": "a75af7170fc3"}, {"title": "Contributing To A Open Source Library", "pubDate": "2022-02-17 15:48:05", "link": "https://medium.com/@athletecoder/my-first-attempt-to-contribute-to-a-open-source-library-87aee810d31e?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/87aee810d31e", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png", "description": "<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4><p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things....</p>", "content": "\n<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4>\n<p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things.</p>\n<p>But recently, I attempted to implement a new feature for the <a href=\"https://github.com/agencyenterprise/react-native-health\">React-Native-Health</a> library. Its intended purpose is to interact with the Apple HealthKit for\u00a0iOS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png\"></figure><h3>Backstory</h3>\n<p>I built this app called <a href=\"https://www.softlete.com/\">softlete</a> with the <a href=\"https://reactnative.dev/\">React-Native</a> framework. It\u2019s a training tool for athletes (anyone who physically trains for any purpose) that helps them organize their training while also providing meaningful resources, information, and feedback. It\u2019s still in its development phase.</p>\n<p>With the React-Native-Health library installed, I immediately have the configuration set up (permissions and methods) to retrieve data from Apple HealthKit.</p>\n<p>Most of the methods provided by the library satisfy my needs, but there is a method that is missing for a few key features I want to implement.</p>\n<h4>Key Features</h4>\n<p>A couple of key features I want to add\u00a0are:</p>\n<ol>\n<li>Display the user\u2019s workout route on a\u00a0map.</li>\n<li>Provide in-depth performance statistics and feedback for a user\u2019s workout\u00a0route.</li>\n</ol>\n<p>Plenty of fitness apps already offer these features, like Strava, so I thought I might as well\u00a0too.</p>\n<p>The issue is the React-Native-Health library doesn\u2019t have a method to accomplish this. And to implement these features, I need access to the workout route\u00a0data.</p>\n<p>So I was like, \u201cyou know what. I\u2019ll try to do it myself.\u201d And that\u2019s exactly what I\u00a0did.</p>\n<h3>The Journey</h3>\n<p>Beware, I\u2019m unfamiliar with native iOS development. I\u2019ve never attempted to contribute to an open-source library. So I\u2019m stepping into unknown territory.</p>\n<p>I had no idea how to export native modules in React Native. So, like what everyone would do, I headed straight to the motherland (React docs) and walked through the <a href=\"https://reactnative.dev/docs/native-modules-intro\">native modules documentation</a>.</p>\n<p>I followed \u201cexactly\u201d the steps in the documentation to add the demo method into my app. And\u00a0\u2026 I completely broke it. I spend the whole day debugging, looking through forums, blogs, and everything you can think\u00a0of.</p>\n<p>Nothing.</p>\n<p>After banging my head on the keyboard a couple of times. I took a leap of faith and assumed it was Xcode (It definitely wasn\u2019t Xcode itself, but my clumsiness). I uninstalled and reinstalled it. That night, I laid in bed, stared at the ceiling, and regretted my decision to attempt\u00a0this.</p>\n<p>I woke up, relieved myself, and sprinted straight to my computer. Xcode was successfully installed. I opened my app project, pushed the build button that looks like a play button, and I stared at the status, biting my nails (I know, it\u2019s a bad habit), as it slowly proceeded to\u00a0build.</p>\n<p>\u201cBuild Succeeded.\u201d</p>\n<p>I opened the console, and \u201cidgaf Keisha\u201d was\u00a0printed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/236/0*6HtxzsZxAH18YKtV.jpg\"></figure><h3>The Implementation</h3>\n<p>Now onto what I wanted to implement.</p>\n<p>I didn\u2019t even know how to edit the libraries that I installed into my app. So I started poking around and came across the Pods file. I opened it and then opened the development pods folder. I saw the <strong>RCTAppleHealthKit </strong>folder. It looked promising so I opened\u00a0it.</p>\n<p>What\u2019s up with the\u00a0.h and\u00a0.m\u00a0files?</p>\n<p>I opened the <strong>RCTAppleHealthKit.h</strong>. It didn\u2019t look too bad. I then proceeded to open the <strong>RCTAppleHealthKit.m</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/275/0*DAwbkHKlJnDcUG1D\"></figure><p>Why does Objective-C function declaration syntax look so confusing? It\u2019s like they intentionally wanted to scare people away from Objective-C.</p>\n<p>Example:</p>\n<p><strong>- (void)workout_getRoute:(NSDictionary *)input callback:(RCTResponseSenderBlock)callback;</strong></p>\n<p>Why is the first parameter of the function formatted differently than the subsequent parameters?</p>\n<p>Thank God for Google and people smarter than me willing to post and respond to blogs and forums because I would have been completely lost.</p>\n<p>So I pretty much copied and pasted the <strong>getAnchoredWorkouts</strong> method in the\u00a0<strong>.m </strong>file, changed the name to \u201c<strong>getWorkoutRoute</strong>,\u201d and updated the function logic to log \u201cWazzzzup\u201d in the\u00a0console.</p>\n<p>I rebuild my app and BOOM! I can see the text \u201cWazzzzup\u201d logged on the\u00a0console.</p>\n<h4>Implementation Steps</h4>\n<p>Now for the difficult, but fun part. Using <a href=\"https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/reading_route_data\">this</a> Apple Developer Docs article as a reference, I had to perform these three queries in sequence.</p>\n<ol>\n<li><strong>Get workout</strong></li>\n<li><strong>Get route</strong></li>\n<li><strong>Get locations</strong></li>\n</ol>\n<p>The problem with the article is that the code is stuck on Swift. The language option at the top won\u2019t convert the language to Objective-C. And I\u2019ve never even seen Swift code\u00a0before.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*g8Qwj_nQYHM1LNqq\"><figcaption>Photo by <a href=\"https://unsplash.com/@a_d_s_w?utm_source=medium&amp;utm_medium=referral\">Adrian Swancar</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I had no clue how to export or import classes so I continued to use the method <strong>getAnchoredWorkouts </strong>as a reference.</p>\n<p>I created another method called <strong>workout_getRoute </strong>in the <strong>Methods_Workout</strong> files. This method will be used as the container for the logic to handle fetching the\u00a0data.</p>\n<p>Alright. The first step is to get the <strong>HKWorkout</strong> class. How do I do that? I\u2019ll just see how <strong>getAnchoredWorkouts </strong>does\u00a0it.</p>\n<p>Great. Create another method in the <strong>Queries</strong> files and I\u2019ll call it <strong>\u201cfetchWorkoutById.\u201d </strong>Use the <strong>HKSampleQuery </strong>class to get the <strong>HKWorkout</strong> class.</p>\n<p>Next, I need to get the <strong>HKWorkoutRoute </strong>class that is associated with the <strong>HKWorkout</strong> class, and to do this I need to perform another query using the <strong>HKAnchoredObjectQuery </strong>class.</p>\n<p>So I created another method in the <strong>Queries</strong> files, called it <strong>\u201cfetchWorkoutRoute,\u201d </strong>and inserted the configuration to get the <strong>HKWorkoutRoute</strong>.</p>\n<p>Lastly, I needed to query for the location data associated with the <strong>HKWorkoutRoute</strong> class by using the <strong>HKWorkoutRouteQuery</strong> class. I inserted this logic inside the same method I created previously, <strong>fetchWorkoutRoute.</strong></p>\n<p>Yay! I got a response! I did\u00a0it!</p>\n<p>And obviously, it didn\u2019t go as smoothly as I described above. It literally took me a week to get a successful response. And most of the time I spent figuring out syntax and type\u00a0issues.</p>\n<p>So I integrated this method into my app. I created a new screen, imported a map, and configured it to display the locations on the\u00a0map.</p>\n<p>I rebuilt my project and tested it on my device for a run I did early that\u00a0day.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/413/0*WtODBvapT8BoO0sb.jpg\"></figure><p>I wasn\u2019t done. It wasn\u2019t displaying the whole route. Something was wrong with my configuration.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/354/1*hl3hyMmBRMWj4SCNq44H7w.png\"></figure><p>I promise I ran further than\u00a0this\u2026</p>\n<p>Like every developer would do, I went straight to Google. To my luck, nobody had this issue. And surprisingly, not many people attempted this.</p>\n<p>After two days of debugging, I almost lost hope and was about to throw in the\u00a0towel.</p>\n<blockquote>But then I realized that I was the main character and kept\u00a0going.</blockquote>\n<p>Not even an hour later, I found out what the problem\u00a0was.</p>\n<blockquote>\u201cYour block receives one or more batches of location data. When the block\u2019s done parameter is true, you have received all the\u00a0data.\u201d</blockquote>\n<p>After rereading this statement a million times, I realized my logic inside the data handler block was configured incorrectly.</p>\n<p>I assumed all the location data was passed at once when the done parameter was set to true, but I was wrong. Now that I think about it, this assumption made no\u00a0sense.</p>\n<p>I reconfigured my logic, rebuilt my project, and the whole workout route was displayed nicely on the\u00a0map.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*oGgVJQ8EmzKVCTGc\"><figcaption>Photo by <a href=\"https://unsplash.com/@dre0316?utm_source=medium&amp;utm_medium=referral\">Andre Hunter</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3>Conclusion</h3>\n<p>From start to finish, this process took me a little over a week. And this was my first attempt to contribute to an open-source project. It was also my first time being exposed to Objective-C and working with native modules in React\u00a0Native.</p>\n<p>It was a struggle from start to finish. I spent a lot of time trying to figure out syntaxes, types, class references, and other concepts.</p>\n<blockquote>And I thank all of you programmers for contributing to forums, blogs, dicussions, and whatever deemed helpful to me. You people make programming bearable.</blockquote>\n<p>I was a little intimated at first and I wasn\u2019t sure if I had enough competence to accomplish the task, but I\u2019m glad I took on the challenge. I learned a lot about Objective-C, how to interact with Apple HealthKit, and more about what I\u2019m capable\u00a0of.</p>\n<p>Although the code might not be perfect and probably has issues, I\u2019m happy to at least get a response that I\u2019m looking\u00a0for.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/0*8p5zNvZierBPw5R_.jpg\"></figure><p>You can critique my code here: <a href=\"https://github.com/nguyening20/react-native-health\">My React-Native-Health Fork</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=87aee810d31e\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["libraries", "open-source", "app-development", "code", "react-native"], "id": "87aee810d31e"}, {"title": "Fetch Your Medium Posts Every day At Midnight", "pubDate": "2022-02-08 15:00:33", "link": "https://medium.com/@athletecoder/fetch-your-medium-posts-every-day-at-midnight-f9c02cac177c?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/f9c02cac177c", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh", "description": "<h4>And create a simple API to update your website\u00a0content.</h4><p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using Node, Express, and\u00a0Cron....</p>", "content": "\n<h3>How To Fetch Your Medium Posts Every day At\u00a0Midnight</h3>\n<h4>And create a simple API to update your website\u00a0content.</h4>\n<p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using <strong>Node</strong>, <strong>Express</strong>, and\u00a0<strong>Cron</strong>.</p>\n<p>I want to automate the process of copying the content from your Medium posts and pasting it to your personal\u00a0website.</p>\n<blockquote>Let\u2019s make our lives easier through automation so we have more free time to do whatever we\u00a0want!</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh\"><figcaption>Photo by <a href=\"https://unsplash.com/@anete_lusina?utm_source=medium&amp;utm_medium=referral\">Anete L\u016bsi\u0146a</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>For this tutorial, I\u2019ll be using <strong>Visual Studio</strong> for my code editor, but feel free to use whatever code editor you\u00a0desire.</p>\n<p>Let\u2019s get right into\u00a0it.</p>\n<h4>If you just want to see the code. Go\u00a0<a href=\"https://github.com/athlete-coder/medium\"><strong>here</strong></a>.</h4>\n<h3>Initiate Project</h3>\n<p>First, create a project folder director. I named my project folder <strong>medium. </strong>Once you have that created, let's init our project by opening the command line and typing <strong><em>npm\u00a0init</em>.</strong></p>\n<blockquote>Ensure that you are in your project director when npm\u00a0initing.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UrujjLmVGqFw9jZp9HYVkg.png\"></figure><p>I accepted all the default parameters when npm initing. After you finish the initiation process create an <strong>index.js</strong> file in the same directory. We will leave it for now and continue with installing our <strong>npm packages</strong>.</p>\n<p>In the command line, type<strong> <em>npm I node-fetch express\u00a0cron</em>.</strong></p>\n<p>After, open your <strong>package.json</strong> file.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gnZNk6poW0Lwl6gY3Yx4kw.png\"></figure><p>Your package.json file should look similar to the screenshot above. If you glance at the \u201c<strong>dependencies\u201d</strong> key, you\u2019ll notice an object with keys associated with the packages we installed and the version\u00a0number.</p>\n<p>This step is important.</p>\n<blockquote><strong>Add another key named \u201ctype\u201d and add \u201cmodule\u201d as its\u00a0value.</strong></blockquote>\n<p>This will allow us to use \u201c<strong>import\u201d </strong>instead<strong> </strong>of \u201c<strong>require\u201d</strong> to import packages into our index.js\u00a0file.</p>\n<p>Nice! We got everything we need to get to the fun part. It\u2019s time to\u00a0code.</p>\n<h3>Get Medium\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open the index.js\u00a0file.</li>\n<li>Import fetch from \u201cnode-fetch.\u201d</li>\n<li>Create an async function called \u201c<strong>getMediumPosts\u201d</strong> that accepts a parameter \u201c<strong>username\u201d</strong>. This function will be used to fetch all your medium posts from the username provided.</li>\n<li>Within the function brackets, let\u2019s write a script that will check if the username name is\u00a0valid.</li>\n<li>Next, within the same function, let\u2019s create a variable called <strong>URL</strong> that assigned a value of the URL we are going to request along with our username.</li>\n</ol>\n<blockquote>\n<strong>https://api.rss2json.com/v1/api.json</strong>?<strong>rss_url=https://medium.com/feed/{@username}</strong>\n</blockquote>\n<ol>\n<li>Next, we use the <strong>fetch</strong> package imported from above to send a request to the URL (created in the previous step) to fetch our profile information. We want the result of the fetch to be the result of this function so we need to add a <strong>return</strong> statement.</li>\n<li>Let\u2019s see the response we get by using <strong>console.log </strong>to log the response of our\u00a0fetch.</li>\n<li>Now, let's call the function with your medium username.</li>\n<li>In the command line run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XT7FSD9K8brp_5XLT_8S6Q.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9Sp_OoeuUN86NjeDe0Pn_g.png\"></figure><p>The terminal should log the response of our fetch function.</p>\n<p>For this tutorial, I only want the medium posts that the user, I, created. Looking at the response, I only need the \u201c<strong>items\u201d </strong>key<strong> </strong>in this response<strong>.</strong></p>\n<p>Next steps (use the next image for reference):</p>\n<ol><li>update the fetch function to only return the <strong>data.items</strong>.</li></ol>\n<p>We successfully created a function that will return the medium posts of the username provided.</p>\n<h3>Process and Store\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>storePosts\u201d</strong> that accepts a parameter \u201c<strong>posts\u201d</strong>. This function will create and store a JSON file of the posts we fetched from the previous function, <strong>getMediumPosts.</strong>\n</li>\n<li>Add <strong><em>Import fs from \u201cfs\u201d</em></strong> at the top of the file. We are going to use this preinstalled package to store the file\u00a0locally.</li>\n<li>Within the <strong>\u201cstorePosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully creates and stores the posts as a JSON file or <strong>rejects</strong> if it fails (reference next\u00a0image).</li>\n<li>Create another async function below<strong> \u201cstorePosts\u201d </strong>named<strong> \u201cprocessPosts\u201d </strong>that doesn\u2019t receive any parameters.</li>\n<li>Within this function, create a variable called <strong>\u201cposts\u201d</strong> that will store the response of the <strong>\u201cgetMediumPosts\u201d. </strong>Ensure you add an <strong>\u201cawait\u201d</strong> to wait for the response before continuing to the next line of\u00a0code.</li>\n<li>Within the same function and on the next line, we now want to pass the variable we created in the previous step to the function <strong>\u201cstorePosts\u201d </strong>to store our posts. Let\u2019s <strong>await</strong> this response.</li>\n<li>Below all of this beautiful code, let's call <strong>\u201cprocessPosts\u201d </strong>to test out our\u00a0logic.</li>\n</ol>\n<p>8. In the terminal run <strong>node\u00a0index.js</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ceFEcvtKt6g8sE3LnXcMTQ.png\"></figure><p>If everything worked properly you should see a <strong>posts.json</strong> file appear in your directory.</p>\n<p>Nice! Now we 3 functions created.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n</ol>\n<h3>Get Stored\u00a0Posts</h3>\n<p>Now, we want to be able to retrieve the posts we stored locally as a JSON\u00a0file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>getPosts\u201d</strong> that has no parameters. This function returns the <strong>posts.json</strong> file the <strong>\u201cstorePosts\u201d </strong>stored\u00a0locally.</li>\n<li>Within the <strong>\u201cgetPosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully retrieves the posts.json file or <strong>rejects</strong> it if it fails (reference next\u00a0image).</li>\n<li>Below this function, let's call <strong>\u201cgetPosts\u201d </strong>and <strong>console.log</strong> our response to ensure it\u2019s working properly.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ytcIyXGBjPd9WF-EHAnX-Q.png\"></figure><p>Nice! It logged our values from the posts.json file.</p>\n<p>Now we added another function to our \u201cfunction created\u201d\u00a0list.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n<li>\n<strong>\u201cgetPosts\u201d\u200a\u2014\u200a</strong>get our locally stored\u00a0posts</li>\n</ol>\n<h3>Create and Serve Our\u00a0Website</h3>\n<p>We are now going to use the <strong>express </strong>package to serve our plain HTML website and create an API that will return our medium\u00a0posts.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Add <strong>import express from \u201cexpress\u201d </strong>at the top of the\u00a0file.</li>\n<li>We need to initiate the express app so below we need to create a variable called <strong>app </strong>and assign it to the response of express (use image as a reference).</li>\n<li>At the bottom, we want our app to listen for a specific port to serve our website. We can use port <strong>3000 </strong>and add a callback function that will console.log that it is listening.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2BEJX3ltuzrHdeS_IgoDRg.png\"></figure><p>You should see listening on port\u00a03000.</p>\n<h4>Routes</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>We are going to create an API route that will send back a response to our client with our posts. Use <strong>\u201capp. get\u201d </strong>to initiate the route we\u00a0need.</li>\n<li>In the <strong>\u201capp. get\u201d</strong> function, for the first parameter, add a string value <strong>\u201c/API/posts/get\u201d. </strong>This will specify the route path the client will need to ping to retrieve the\u00a0posts.</li>\n<li>For the second parameter, add an async callback function (arrow or regular function) with two parameters, <strong>\u201creq\u201d </strong>and\u00a0<strong>\u201cres.\u201d</strong>\n</li>\n<li>In the callback function, call the <strong>\u201cgetPosts\u201d </strong>function.</li>\n<li>\n<strong>\u201cgetPosts\u201d</strong> is an async function that returns a promise. And we need to send the response back to the client. So I\u2019ll use <strong>\u201c.then\u201d </strong>to handle the successful response and <strong>\u201c.catch\u201d </strong>to handle the error if occurred<strong>.</strong>\n</li>\n<li>In the <strong>\u201c.then,\u201d </strong>add a callback function that will send the posts to the client using <strong>\u201cres.send\u201d</strong>.</li>\n<li>In the <strong>\u201c.catch,\u201d </strong>add a callback function that will send a status code of <strong>500 </strong>back to the client to indicate a failed response.</li>\n<li>Next, Using <strong>\u201capp. get\u201d</strong>, we want to create a base route that will send back our website as a response for all other routes. For the first parameter, use <strong>\u201c*\u201d </strong>to indicate all\u00a0routes.</li>\n<li>Add <strong>import path from \u201cpath\u201d </strong>at the top of the file. The path package is preinstalled with node. We will use this package to find the exact location of our <strong>HTML</strong>\u00a0file.</li>\n<li>Above the <strong>\u201capp. get\u201d </strong>we just created, create a variable named root and assign the variable the value of the function <strong>\u201cpath.resolve\u201d </strong>with the parameter of our HTML file, which will be <strong>\u201c./client\u201d.</strong>\n</li>\n<li>We also need to call<strong> \u201cexpress.static(root)\u201d</strong> to serve the static files we will create for our website inside our client folder. Add <strong>\u201capp.use(express.static(root))\u201d </strong>just below the previous step line of\u00a0code.</li>\n<li>In the <strong>\u201capp. get\u201d </strong>and in the second parameter, add a function that will send back the HTML file that we will create later (use the next image as a reference).</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GP1A7jttkivs3g6qsa_KVQ.png\"></figure><p>Congrats on getting this far. Now, have our server set up to the point where it will send back an HTML file that we haven\u2019t quite created yet. Let's get to that\u00a0now.</p>\n<h4>Website</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create a new folder named\u00a0<strong>client</strong>\n</li>\n<li>Inside the folder, create an <strong>index.html</strong> file</li>\n<li>Create another folder inside the client folder we just created named\u00a0<strong>js</strong>\n</li>\n<li>Inside the js folder create a file called<strong> script.js</strong>\n</li>\n<li>Open the <strong>index.html</strong> file, and initiate an HTML document.</li>\n<li>Inside the body tags, add an <strong>h1 </strong>tag and name it \u201cBlog\u201d or whatever you so\u00a0choose.</li>\n<li>Next, add a div with id as\u00a0<strong>root</strong>\n</li>\n<li>Load the js file we created previously by using the script\u00a0tag.</li>\n</ol>\n<blockquote>Shortcut for create an HTML document in VS is\u00a0! and then press\u00a0tab.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*viV8ksFIz72EvZrK08wsag.png\"></figure><p>We got our basic HTML created. Next, we need to update our <strong>script.js </strong>file to fetch our posts from our\u00a0server.</p>\n<p>Open the <strong>script.js </strong>file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called <strong>\u201cgetPosts\u201d</strong>. This function will ping the API we created previously from our server to get our\u00a0posts.</li>\n<li>Within the function, let's use the fetch function (preinstalled) to ping the route <strong>\u201capi/posts/get\u201d </strong>and return the response.</li>\n<li>Let\u2019s call the function and log the output using <strong>console.log</strong>\n</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jFhRJwOFVaQIBFkXF2Cr8Q.png\"></figure><p>Open a browser and go to <strong>localhost:3000. </strong>You should see a page with \u201cBlog\u201d displayed as header\u00a0text.</p>\n<p>In the developer tools, go to the console tab and you should see the posts logged in the\u00a0console.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aFNscSNdTHdCTLlEKf_ujg.png\"></figure><p>Good job! We are almost there. Let\u2019s display the posts on the page with the function <strong>\u201crenderPosts\u201d.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RZRAjPDRFOhjPE_yDfdb0Q.png\"></figure><p>Alright cool. We can see all of our posts displayed on the page now after we refreshed the\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LgZfHzj1SdUJxuJRhRQeuw.png\"></figure><p>One last\u00a0step!</p>\n<h3><strong>Cron Job (Schedule To Fetch Posts At Midnight Every\u00a0Day)</strong></h3>\n<p>Say we want to get the most up-to-date posts. We can do that by creating a job that will run every day at midnight. To do that, we can use the <strong>corn </strong>package that we installed.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open our index.js file to access our server\u00a0code.</li>\n<li>Add <strong>import cron from \u201ccron\u201d </strong>at the top of the\u00a0file.</li>\n<li>Create a variable just below called<strong> \u201cCronJob\u201d </strong>and assign it the value of<strong> \u201ccron.CronJob.\u201d</strong>\n</li>\n<li>Before our API route, create a variable called <strong>\u201cjob\u201d</strong> and assign it the value of the new function <strong>\u201cnew CropJob(\u2026)\u201d </strong>(use the image below for reference)<strong>.</strong>\n</li>\n<li>The first argument will be the time in which the function will be called. We will use <strong>\u201c00 00 * * *\u201d which indicates for every day at midnight. Use </strong><a href=\"https://crontab.guru/\"><strong>crontab</strong></a> for time reference.</li>\n<li>The second argument will be the function that will be called. We want to call <strong>\u201cprocessPosts\u201d </strong>to fetch and store the posts from\u00a0Medium.</li>\n<li>The third argument we can pass\u00a0null</li>\n<li>The fourth argument indicates whether to start the job after initiating. So we will pass\u00a0true.</li>\n<li>Back to the second argument, we want to stop the batch or notify us if an error occurs. In this case, I\u2019ll stop the batch, but you can send yourself a message or email indicating an\u00a0issue.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yPBjIbZcCbWqe2a1u5Rhzg.png\"></figure><h3>Congratulations!</h3>\n<p>You got to the end. That was a long process. Glad you stuck with it all the way through. You now have a server\u00a0that:</p>\n<ol>\n<li><strong>Runs a job at midnight to fetch your Medium posts and stores them\u00a0locally.</strong></li>\n<li><strong>Has an API that will send back a response of the posts that were stored\u00a0locally.</strong></li>\n<li><strong>And serves a basic website that calls the posts API and displays the\u00a0content.</strong></li>\n</ol>\n<p>You can visit the code\u00a0<a href=\"https://github.com/athlete-coder/medium\">here</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f9c02cac177c\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["blog", "express", "code", "automation", "node"], "id": "f9c02cac177c"}, {"title": "Linear-Gradient Underline Text", "pubDate": "2022-02-05 16:03:21", "link": "https://medium.com/@athletecoder/linear-gradient-underline-text-4e42d28aa343?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/4e42d28aa343", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png", "description": "<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4><p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it....</p>", "content": "\n<h3>Make A Linear-Gradient Underline Text</h3>\n<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4>\n<p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png\"></figure><p>I\u2019ll use <a href=\"http://codesandbox.io/\">codesandbox.io</a> for this illustration, but you can use whatever code editor you so\u00a0choose.</p>\n<p>Let\u2019s create a basic layout of a\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CfEvjW3xrVBrGLkjI9STtQ.png\"><figcaption>codesandbox.io</figcaption></figure><p>We now have the basic layout of the page with \u201cHello Everyone\u201d wrapped with an <strong>h1</strong> tag and displayed on the\u00a0page.</p>\n<p>In terms of content, we have everything we need in between the <strong>html</strong> tags. It\u2019s time for\u00a0styling.</p>\n<p>To add <strong>CSS </strong>styles, we need to add the <strong>style</strong> tags above or below the <strong>html</strong> tags. Let's place it above and add the initial styles for our <strong>h1</strong>\u00a0text.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KuP62ApaasDdrjUx9kI5Eg.png\"></figure><p>We made the font size 40 pixels and the font color\u00a0black.</p>\n<p>Now we can get to what you came here for. Adding the cool underline style.</p>\n<p>We first need to add a background color. I chose grey. I thought it complimented the black well, but you can use any color combination. Just replace the <strong>rgba</strong>\u00a0values.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bbPVyTeqbJdpI2ErzSYysQ.png\"></figure><p>We have to use the <strong>background-image </strong>property with <strong>linear-gradient</strong> instead of the <strong>background </strong>property.</p>\n<p>For some browsers, linear-gradient might need a prefix. You can learn more about it at <a href=\"https://www.w3schools.com/cssref/func_linear-gradient.asp\">w3schools.com</a>.</p>\n<p>I tried the background property, but the additional properties we will be adding do not apply to the background property.</p>\n<p>There\u2019s already an issue with the background color extending beyond the text. We\u2019ll fix that\u00a0now.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BmeXcxz3TeofSATNZfL9BA.png\"></figure><p>We set the <strong>display</strong> property as <strong>inline</strong> to make the width and height of the h1 tag the same as its\u00a0content.</p>\n<p>Now, need to adjust the size and position of the background.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ovrse_E1X9HtkHMBVCkonQ.png\"></figure><p>We adjust the size and position of the background based on the size of the font using\u00a0<strong>em.</strong></p>\n<p>And we also made the width of the background 100% to cover the size of the\u00a0content.</p>\n<p>Notice the background did not change when we add the<strong> background-size</strong> and <strong>background-position</strong> properties. We just need to add one more property.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*l3Y27gGKoamnGSPa_bSB9Q.png\"></figure><p>The <strong>background-repeat </strong>property fixed this for us. Now the size of the background is the size we set it\u00a0as.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y6b2U4q8MN1JTJSg7obsRw.png\"></figure><p>And it\u00a0wraps!</p>\n<p>The CSS code is below for your convenience.</p>\n<blockquote>background-image: linear-gradient(to right, rgba(180, 180, 180, 0.8), rgba(180, 180, 180,\u00a00.2));</blockquote>\n<blockquote>display: inline;</blockquote>\n<blockquote>background-position: 0\u00a00.6em;</blockquote>\n<blockquote>background-size: 100%\u00a00.8em;</blockquote>\n<blockquote>background-repeat: repeat-x;</blockquote>\n<p>There are limitations to this technique like not being able to round the background, but if I find a better way to do this I\u2019ll make sure to post it. If you already know a better way, let me know in the comments.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4e42d28aa343\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["html", "programming", "css", "style", "code"], "id": "4e42d28aa343"}, {"title": "What I Experienced Creating An MVP", "pubDate": "2022-02-03 15:35:00", "link": "https://medium.com/@athletecoder/what-i-experienced-creating-an-mvp-3d2702c7a925?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/3d2702c7a925", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9", "description": "<h4>4 months (over 1000\u00a0hours).</h4><p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working...</p>", "content": "\n<h4>4 months (over 1000\u00a0hours).</h4>\n<p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working on this\u00a0app.</p>\n<p>On July 26th, 2021 I began working on the mock-up of my training app. From then to January of 2022, I spent an average of 8 hours a day, over 1000 hours in total, slowly building this app. It was a slow, long, and dreadful process, but it was worth\u00a0it.</p>\n<h3>Issues I had During The\u00a0Process</h3>\n<p>Most of the issues I had were self-inflicting. Not physically, but emotionally and mentally. I would constantly doubt my abilities. I would say to\u00a0myself,</p>\n<blockquote>\u201cNobody is going to like my app. There will be something wrong with it. People are going to make fun of me. It\u2019ll be embarrassing. Is it even worth\u00a0it?\u201d</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9\"><figcaption>Photo by <a href=\"https://unsplash.com/@surface?utm_source=medium&amp;utm_medium=referral\">Surface</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Being a 26-year-old adult living with my mother didn\u2019t help either. In America, at the age of 18, you are expected to be on your own. You go to college and then right into the workforce. You are expected to have your life together before the age of\u00a026.</p>\n<p>So I neglected most of my social life spending most days at home. I would occasionally meet up with a few friends, but I hated when they would ask me, \u201cwhat have you been up to?\u201d And when I would explain to them my endeavors, there would be a confused look on their faces. Then spend emotional energy to get them to understand, but it always ended up in my disappointment.</p>\n<blockquote>Nobody can truly understand your perspective, your vision, your\u00a0dreams.</blockquote>\n<p>But the idea of being alone in my pursuits wasn\u2019t new to me. I felt like most of my life I\u2019ve had dreams that nobody understood or believed in. But I knew that the only opinion that truly mattered was\u00a0mine.</p>\n<h3>How I Coped With My\u00a0Issues</h3>\n<h3>Routine</h3>\n<p>Routine. Routine.\u00a0Routine.</p>\n<p>I briefly outline my routine in my <a href=\"https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3\">previous post</a>, but I can\u2019t emphasize enough how important a routine is and how it significantly improved my well-being and productivity.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*13hu8fUOz6vcN0h2\"><figcaption>Photo by <a href=\"https://unsplash.com/@jazminantoinette?utm_source=medium&amp;utm_medium=referral\">Jazmin Quaynor</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Anxiety improved significantly.</h4>\n<blockquote>Anxiety thrives from the\u00a0unknown.</blockquote>\n<p>I was adventuring into the unknown. I didn\u2019t know exactly what the outcome was going to be. And when I would spend too much time thinking about what could happen, my mind assumed the worse. I was\u00a0scared.</p>\n<blockquote>Adventuring into the unknown isn\u2019t so bad after all if you take it one day at a\u00a0time.</blockquote>\n<p>Taking it one day at a time helped me realize the negative thoughts in my mind were all an illusion. We don\u2019t know what will happen in the\u00a0future.</p>\n<p>Routine gave me a sense of control over my life. I knew what was coming next. Everything was predictable from one task to\u00a0another.</p>\n<p>And when I would rest my head on my pillow at night I could reflect on the day and be proud of myself for the progress I\u00a0made.</p>\n<h4>Productivity stayed consistent.</h4>\n<p>We are habitual creatures. Once a habit is established, the effort to perform the activity becomes effortless. And a routine is, by definition, a sequence of daily\u00a0habits.</p>\n<p>Our habits allow us if chosen and implemented correctly, to minimize <strong><em>decision fatigue</em></strong>. The concept behind decision\u00a0fatigue</p>\n<blockquote>\u201cis that a human\u2019s ability to make decisions can get worse after making many decisions, as their brain will be more fatigued.\u201d\u200a\u2014\u200a<a href=\"https://www.medicalnewstoday.com/articles/decision-fatigue#what-is-it\">Medical News\u00a0Today</a>\n</blockquote>\n<p>I wanted to conserve my energy to be primarily exerted on my work rather than on making decisions on things that can be automated. This robotic way of life is necessary for me to be consistent.</p>\n<p>A work block consists of 90 minutes of work and a 20-minute break. In the article, \u201c<a href=\"https://hubermanlab.com/teach-and-learn-better-with-a-neuroplasticity-super-protocol/\">TEACH &amp; LEARN BETTER WITH A \u201cNEUROPLASTICITY SUPER PROTOCOL</a>\u201d by Andrew Huberman,</p>\n<blockquote>\u201cSolid research shows that 90 minutes is about the longest period we can expect to maintain intense focus and effort toward learning.\u201d\u200a\u2014\u200aAndrew Huberman.</blockquote>\n<p>I came to figure out that 4 sessions a day were my limit. 2 sessions in the morning and 2 sessions in the afternoon.</p>\n<h3><strong>Social Media</strong></h3>\n<p>Have you ever caught yourself mindlessly scrolling through Instagram, Youtube, and/or other social media platforms? Sometimes I will catch myself in the act of scrolling and ask myself, \u201cWhat am I doing?\u201d But then continue to\u00a0scroll.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*FcAzrGhEF5nNIQSG\"><figcaption>Photo by <a href=\"https://unsplash.com/@georgiadelotz?utm_source=medium&amp;utm_medium=referral\">Georgia de Lotz</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Social media can be very helpful, especially Youtube. When an issue arises, Youtube is one of the top places on the internet I go to to find the answer. Youtube is also filled with a ton of aspiring content that motivated me to keep\u00a0going.</p>\n<blockquote>The algorithm is fighting for your attention.</blockquote>\n<p>I\u2019ll be watching a video I intended to watch. And then my curiosity gets the best of me. I\u2019ll scan the recommended videos and I\u2019ll come across an interesting title or thumbnail. Without thinking, I\u2019ll click on that video. And an hour later, I\u2019ll be down this rabbit hole. Repeating the same process over and over\u00a0again.</p>\n<p>Most of us use social media as our entertainment of choice. So I\u2019m not saying to abandon it, but to be aware of when and how you are using\u00a0it.</p>\n<h3>Pros of building an\u00a0MVP</h3>\n<h4>It\u2019s significantly cheaper than outsourcing</h4>\n<p>The tech stack I chose to use was free to get started building. <strong>MongoDB</strong> and <strong>Firebase</strong> have free tiers for development purposes. <strong>Node</strong> and <strong>React Native</strong> are open sources and free to\u00a0use.</p>\n<p>Going live will require some money. For me, I tried my best to spend the least amount of money possible. Below is the list of my monthly expenses after going\u00a0live.</p>\n<ul>\n<li>Heroku ~ $7.00 /\u00a0Month</li>\n<li>MongoDB ~ $50.00 /\u00a0Month</li>\n<li>Domain ~ $5.00 /\u00a0Month</li>\n<li>Custom Email ~ $12 / Month (Maybe, not necessary for\u00a0MVP)</li>\n<li>Apple Developer Program Fee ~ $99 / Year (IOS\u00a0Apps)</li>\n</ul>\n<p>It cost me about $83 per month to have my app live plus a bunch of time to get my product\u00a0built.</p>\n<h4><strong>Becoming more\u00a0skillful</strong></h4>\n<p>Have you ever heard of the compound effect? The concept of it all is that small habits compound over\u00a0time.</p>\n<figure><img alt=\"https://jamesclear.com/continuous-improvement\" src=\"https://cdn-images-1.medium.com/max/700/0*mNyQgkUpXy0v7joC.jpg\"><figcaption><a href=\"https://jamesclear.com/continuous-improvement\">Continuous Improvement:<br>How It Works and How to Master\u00a0It</a></figcaption></figure><blockquote>\u201cIf you get one percent better each day for one year, you\u2019ll end up thirty-seven times better by the time you\u2019re done.\u201d\u200a\u2014<a href=\"https://jamesclear.com/continuous-improvement\"><em>\u200aJames\u00a0Clear</em></a>\n</blockquote>\n<p>The small actions add up over time! So the more I apply my skills daily, the exponentially better I will become at\u00a0it.</p>\n<p>And the more skillful you become the more competitive advantage you have in the labor market. And If the product you build performs decently, then it shows potential clients and/or employers your competence.</p>\n<h4>Identifying Your\u00a0Limits</h4>\n<p>At about 7\u20138 hours of work, my energy levels are significantly drained. It becomes difficult for me to focus and my productivity takes a significant hit.</p>\n<p>There are some days when I would get stuck on a problem and I ended up working 10 hours that day. But I soon found out that I\u2019ve had more trouble sleeping those nights and was less productive the next\u00a0day.</p>\n<p>I don\u2019t know how some people can work beyond 8 hours a day consistently. I guess some people are built differently. I admire\u00a0it.</p>\n<p>I also learned that I can\u2019t function effectively without a sufficient amount of sleep. For me, the least I can get away with was 7 hours. Anything less than 7 hours I\u2019m a zombie. 8 hours of sleep is what I aim\u00a0for.</p>\n<blockquote>Getting enough quality sleep is even more important to our physical and mental health than diet and exercise.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5A-Hc1yNPW7n69fd\"><figcaption>Photo by <a href=\"https://unsplash.com/@twinsfisch?utm_source=medium&amp;utm_medium=referral\">Isabella and Zsa Fischer</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Matthew Walker, a scientist and professor of neuroscience and psychology who specializes in sleep, explains the importance of sleep and the severe side effects if we don\u2019t get enough sleep in his book, \u201c<a href=\"https://www.amazon.com/Why-We-Sleep-Unlocking-Dreams/dp/1501144316\">Why We Sleep</a>.\u201d You should give it a\u00a0read.</p>\n<h3>Cons of building an\u00a0MVP</h3>\n<h4>Time &amp; Hard Work (Expected)</h4>\n<p>Building an app requires discipline over a long time. It is not an easy goal. It\u2019s like a rollercoaster ride.</p>\n<p>It\u2019s somewhat easy at first. You are motivated and inspired by your idea so you start off sprinting. You are eager to get up in the morning so you can get working on your\u00a0project.</p>\n<p>But as you know, motivation fades. And when my motivation faded, about a month in, I relied on my routine to sustain my productivity.</p>\n<p>Expect your motivation to fade and have a plan. For me, my plan was a routine. Like I stated previously, A routine made it significantly easier for me to get myself at my desk and\u00a0work.</p>\n<h4>Money</h4>\n<p>Most products, if not all, require some initial investment. Previously, I stated that it cost me about $83 per month to have my app live. I wouldn\u2019t consider this a large amount of money, but it still cost me\u00a0money.</p>\n<p>The amount of money needed will vary from project to project. Depending on your project, it might require more or less than $83 a month. Beforehand, do your research to ensure you have the proper financial resources to support your\u00a0product.</p>\n<h3>Just Do\u00a0It</h3>\n<p>It will be difficult, but you can do it. Don\u2019t focus too much on the outcome. Focus on what is needed of you daily. Take each day one at a time. Be aware of your thoughts. If you have anxiety issues, established a\u00a0routine.</p>\n<blockquote>The future is nearly unpredictable, so choose to be optimistic about\u00a0it.</blockquote>\n<p>Failure and regret are both painful experiences. But,</p>\n<blockquote>Failure is only temporary. Regret lasts\u00a0forever.</blockquote>\n<p>Failure is an inevitable experience in the process<strong> </strong>of you becoming the best version of yourself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*O7uxEBtk4q5-ZXFr\"><figcaption>Photo by <a href=\"https://unsplash.com/@clarktibbs?utm_source=medium&amp;utm_medium=referral\">Clark Tibbs</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>If you have an idea, and you truly think it\u2019s valuable, then you should go for it. I mean, why not? There\u2019s only good that comes from the experience of trying. And what if everything works out in your favor? Then that will be\u00a0awesome!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3d2702c7a925\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["anxiety", "mvp-development", "overcoming-fear", "habits", "app-development"], "id": "3d2702c7a925"}, {"title": "Turning An Idea Into A Reality", "pubDate": "2022-01-26 15:37:49", "link": "https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/a75af7170fc3", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif", "description": "<h4>I built an\u00a0app</h4><p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new f...</p>", "content": "\n<h4>I built an\u00a0app</h4>\n<p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new favorite. I could feel the soreness in my bum beginning to kick in from sitting on a hard wooden chair for over 2 hours. I suddenly notice my teeth gnawing at a fingernail. I pull my finger away from my mouth and lay them on the\u00a0table.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif\"><figcaption>Photo by <a href=\"https://unsplash.com/@romanbozhko?utm_source=medium&amp;utm_medium=referral\">Roman Bozhko</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I took my gaze away from the screen and moved it to the view in front of me. The sun beamed through the glass windows. The light faded to a dim from the left side of the coffee shop to the right side. There were tables neatly placed around the coffee bar below. The shop was wrapped around with roads and trees. The different shades of green elevated the sense of life. People on motorbikes would constantly speed past. Most were single riders, but some would have multiple passengers. On occasion, I would see riders with multiple boxes stacked on top of each other balancing on the back of the bike. How did they not fall\u00a0over?</p>\n<p>\u201cWhat are you going to do with your life,\u201d I asked\u00a0myself.</p>\n<p>This question seemed to be a common occurrence at the time. I would typically tell myself that I\u2019m going to be a professional football player. But, when I would tell myself that I truly didn\u2019t believe it. The dream of playing professional football seemed unattainable. It seemed beyond my reach. I lost\u00a0faith.</p>\n<p>After what felt like hours, but was only a couple of minutes, the space between each thought began to expand. And then suddenly It became quiet inside my head for a long brief\u00a0moment.</p>\n<p>\u201cWhat if I can create a tool and/or service tailored to athletes, like myself, to help them enhance their training?\u201d</p>\n<p>And that\u2019s the first time the idea popped into my head. At the time, in 2019, I was on my soul-searching trip through Vietnam. The issue was I didn\u2019t know how to bring that idea to life. I didn\u2019t have enough money. Most of the money I made was already invested in this trip. And I didn\u2019t have the knowledge or skills to build it on my own. I only knew the basics of HTML, CSS, and JavaScript (JS).</p>\n<p>Fast forward to the end of January of 2020 (I abandoned the idea for a while), I was in Louisville, Kentucky employed as an IT Consultant. Most days I would arrive at the office about 10 minutes before 9, place a k-cup in the coffee machine, ponder what I\u2019m doing with myself, grab my coffee and then walk over to my desk. I was hardly engaged with what I was doing, so I found myself constantly wondering about life. But one day, the idea reappeared in my thoughts. I felt determined. I told myself I had nothing to lose and all the world to\u00a0gain.</p>\n<p>I brainstormed a couple of strategic options. I came down to two. I could wait until I had enough money to invest in contractors to build it for me, or I could teach myself the skills to do it on my own. The journey to do it on my own had less risk and more benefits if failure was the outcome. I also knew it was going to be a challenge.</p>\n<p>I typed into the Google search bar, \u201cHow to build an application from scratch?\u201d \u201cHave an idea, create a plan, and execute.\u201d I already knew most of these things. I was asking the wrong questions. I needed to know exactly what tech stack I was going to use and how I was going to apply them.<br> I had experience with JS so I stuck with it. NodeJs as the backend environment and JS, HTML, and CSS as the frontend. Doing additional research on frontend development, I stumbled upon JS frameworks. What I learned is that JS frameworks are prewritten JS code that allows for easier development. There were multiple JS frameworks to choose from; <strong>React</strong>, Vue and Angular were the most popular. <a href=\"https://reactjs.org/\"><strong>React</strong></a> seemed the most appealing based on popularity, so I decided to go with\u00a0it.</p>\n<p>I typed, \u201cTutorials on React,\u201d into Google\u2019s search bar. <a href=\"http://udemy.com/\">Udemy</a> was the first result. It was a website I\u2019ve heard about before through numerous ads. I arrived on Udemy\u2019s website, created an account, and found a course called, \u201cModern React and Redux.\u201d I didn\u2019t know what Redux was, but it had plenty of reviews and almost a 5-star rating so I bought\u00a0it.</p>\n<p>5:30 the next morning, and I\u2019m in my apartment sitting in front of my laptop computer screen starting the first lesson of \u201cModern React and Redux.\u201d And for the next month and a half, I would spend most mornings, for an hour or so, tackling each instructional video.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*a3L7KQrSEtxsa2-c\"><figcaption>Photo by <a href=\"https://unsplash.com/@altumcode?utm_source=medium&amp;utm_medium=referral\">AltumCode</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>After completing the course, I had a good understanding of the React Framework and how <a href=\"https://react-redux.js.org/\">Redux</a> integrated with it. But I needed to apply what I learned to\u00a0reality.</p>\n<p>A good buddy of mine recently started a podcast that focused on reviewing books and beers. It was the perfect opportunity for me to apply what I learned so I created a website for\u00a0them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FEMaWPMT6h-QopBZ_OUQFg.png\"><figcaption>The homepage of the website I created for the\u00a0podcast</figcaption></figure><p>The website had a store, blog, admin panel, and basic pages that every website needs. The store was the most difficult to implement. <a href=\"https://stripe.com/\"><strong>Stripe\u2019s API</strong></a> (payment processor) documentation was very easy to go through, but figuring out how to configure the process from item to cart, and then cart to checkout was difficult.</p>\n<p>I continued building other websites for leisure. Coming up with random ideas and then trying to bring those ideas to life. Then one day, I stumbled upon React Native when I was scrolling through Youtube. <a href=\"https://reactnative.dev/\">React Native</a> is a framework used to develop mobile and web applications, but mainly used for mobile applications.</p>\n<p>\u201cWhy not?\u201d I asked myself. I already have experience with React. The world is going towards mobile devices if it hasn\u2019t already. It will be a useful skill to have under my belt. Plus, my training idea will need to be mobile-first.</p>\n<p>I googled \u201cReact Native,\u201d navigated to their website, clicked on the \u201cGet Started\u201d button on the homepage, and then skimmed through their documentation. For newbies, like myself, the documentation recommended using <a href=\"https://expo.dev/\"><strong>Expo CLI</strong></a> to get started. So I dove right into\u00a0it.</p>\n<p>For my first mobile application with React Native, I built a social networking application called, \u201cLetsLink.\u201d It was an app where you were only shown other users within a 1-mile radius. It was complex, but I learned more about how to interact with APIs and honed my skills in React and\u00a0Redux.</p>\n<p>In my next app, I was a little intimidated at first, but I ejected my Expo CLI app into a bare workflow environment. Soon I came to realize it wasn\u2019t as bad as I thought, and that Google is my best\u00a0friend.</p>\n<p>In July of 2021, I was in San Diego, CA visiting my brother. It was a sunny afternoon and I was taking a stroll along the beach. A couple of hours prior, I submitted my first app to the app store. It was a <a href=\"https://habt-b0f23.web.app/\">habit tracker app</a>. I felt confident. \u201cI\u2019m ready,\u201d I whispered to myself with the thought of my main idea in\u00a0mind.</p>\n<p>The following day at about 6:30 AM, I walked over, with a black coffee in hand, to my brother\u2019s standing desk with my laptop resting on top of it. I opened the lid of the laptop and took a couple of sips of coffee while I waited for the laptop to boot up. When the login screen displayed I took one last sip of my coffee and rested the coffee mug to the left of my laptop. I typed in my login credentials.</p>\n<p>I spent the next 4 hours or so brainstorming the functionalities of the app, and creating a broad timeline of the process from scratch to launch. I planned for the app to be on the app store towards the end of December of 2021, so that gave me about 4\u00a0months.</p>\n<p>That same afternoon, after working out and spending some downtime with family and friends, I found myself back at the desk working on designing the prototype in <a href=\"https://www.figma.com/\">Figma</a> (a prototype software). I spent the next week designing a prototype of the app. Design isn\u2019t my strong suit, but I tried my best to say the\u00a0least.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*IS1mh5NZIwsxM5hg\"><figcaption>Photo by <a href=\"https://unsplash.com/@balazsketyi?utm_source=medium&amp;utm_medium=referral\">Bal\u00e1zs K\u00e9tyi</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I was looking outside the airplane window on my way back to Seattle, WA. Being above the clouds makes you wonder if you could just choose to see the brighter side of things. Sometimes we get so caught up below the clouds that we don\u2019t even wonder what\u2019s above\u00a0it.</p>\n<p>Is this going to work? Are people going to like it? What if it fails? It\u2019s going to be embarrassing.</p>\n<p>These negative self-degrading thoughts make a frequent occurrence throughout my pursuit for the next couple of months. I had no choice but to implement a routine to keep these thoughts at\u00a0bay.</p>\n<p>I was normally awake at 6:00 AM. Made coffee, took out the dogs, meditated for 10 minutes, and worked from 6:30 -7:00 AM until about 10:00 AM\u200a\u2014\u200a11:00 AM. I worked in 90-minute intervals with 20-minute breaks in between. Then I would eat breakfast, work out, and be back at it at around 2:00 -3:00 PM until about 6:00\u20137:00 PM. I would have dinner, and then, depending on how I was feeling, I would squeeze in another hour or so before I would get ready for bed. I was in bed at around 9:00 PM and asleep at 10:00 PM. I was consistent most days, but obviously, life and procrastination would sometimes get in the\u00a0way.</p>\n<p>It\u2019s always the first couple of minutes of my work session where my mind would complain about how I don\u2019t want to be doing this right now. And then suddenly, my mind would transition into a deep state of focus on the task at hand. I started to enjoy diving into those work sessions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-umRWDH1aVlAH_7C\"><figcaption>Photo by <a href=\"https://unsplash.com/@avirichards?utm_source=medium&amp;utm_medium=referral\">Avi Richards</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>It\u2019s Mid-December and I had an overwhelming amount of work to be done. I\u2019ve made significant progress, but there was a lot of design and content configuration that needed to be done. I audibled and planned for the app to be completed by the end of December and to hopefully submit the app towards the beginning of\u00a0January.</p>\n<p>January 10th, I was in Denver, Colorado visiting a friend I met in college. It was an early Friday morning, the sun beamed through the window and onto my face. I\u2019m standing at a tall round wooden table with my laptop resting on top of it. I feel a sense of relief as I hit the submit button. My app is finally done. For\u00a0now.</p>\n<p>This was only the start of this app\u2019s journey. This first release was just the MVP (minimal viable product) version. More like a beta version. This app still needs a lot of work. I know things didn\u2019t go exactly how I planned in July, but I\u2019m glad I accomplished my main goal and that was to complete and submit the\u00a0app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BncmMbXS9mSNgh6H\"><figcaption>Photo by <a href=\"https://unsplash.com/@nullplus?utm_source=medium&amp;utm_medium=referral\">Razvan Chisu</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Feel free to check out the app I created <a href=\"https://www.softlete.com/\">here</a>. Let me know what you think through the feedback form on the\u00a0website.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a75af7170fc3\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["entrepreneurship", "ideas", "app-development", "fear-of-failure", "coding"], "id": "a75af7170fc3"}, {"title": "Contributing To A Open Source Library", "pubDate": "2022-02-17 15:48:05", "link": "https://medium.com/@athletecoder/my-first-attempt-to-contribute-to-a-open-source-library-87aee810d31e?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/87aee810d31e", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png", "description": "<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4><p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things....</p>", "content": "\n<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4>\n<p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things.</p>\n<p>But recently, I attempted to implement a new feature for the <a href=\"https://github.com/agencyenterprise/react-native-health\">React-Native-Health</a> library. Its intended purpose is to interact with the Apple HealthKit for\u00a0iOS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png\"></figure><h3>Backstory</h3>\n<p>I built this app called <a href=\"https://www.softlete.com/\">softlete</a> with the <a href=\"https://reactnative.dev/\">React-Native</a> framework. It\u2019s a training tool for athletes (anyone who physically trains for any purpose) that helps them organize their training while also providing meaningful resources, information, and feedback. It\u2019s still in its development phase.</p>\n<p>With the React-Native-Health library installed, I immediately have the configuration set up (permissions and methods) to retrieve data from Apple HealthKit.</p>\n<p>Most of the methods provided by the library satisfy my needs, but there is a method that is missing for a few key features I want to implement.</p>\n<h4>Key Features</h4>\n<p>A couple of key features I want to add\u00a0are:</p>\n<ol>\n<li>Display the user\u2019s workout route on a\u00a0map.</li>\n<li>Provide in-depth performance statistics and feedback for a user\u2019s workout\u00a0route.</li>\n</ol>\n<p>Plenty of fitness apps already offer these features, like Strava, so I thought I might as well\u00a0too.</p>\n<p>The issue is the React-Native-Health library doesn\u2019t have a method to accomplish this. And to implement these features, I need access to the workout route\u00a0data.</p>\n<p>So I was like, \u201cyou know what. I\u2019ll try to do it myself.\u201d And that\u2019s exactly what I\u00a0did.</p>\n<h3>The Journey</h3>\n<p>Beware, I\u2019m unfamiliar with native iOS development. I\u2019ve never attempted to contribute to an open-source library. So I\u2019m stepping into unknown territory.</p>\n<p>I had no idea how to export native modules in React Native. So, like what everyone would do, I headed straight to the motherland (React docs) and walked through the <a href=\"https://reactnative.dev/docs/native-modules-intro\">native modules documentation</a>.</p>\n<p>I followed \u201cexactly\u201d the steps in the documentation to add the demo method into my app. And\u00a0\u2026 I completely broke it. I spend the whole day debugging, looking through forums, blogs, and everything you can think\u00a0of.</p>\n<p>Nothing.</p>\n<p>After banging my head on the keyboard a couple of times. I took a leap of faith and assumed it was Xcode (It definitely wasn\u2019t Xcode itself, but my clumsiness). I uninstalled and reinstalled it. That night, I laid in bed, stared at the ceiling, and regretted my decision to attempt\u00a0this.</p>\n<p>I woke up, relieved myself, and sprinted straight to my computer. Xcode was successfully installed. I opened my app project, pushed the build button that looks like a play button, and I stared at the status, biting my nails (I know, it\u2019s a bad habit), as it slowly proceeded to\u00a0build.</p>\n<p>\u201cBuild Succeeded.\u201d</p>\n<p>I opened the console, and \u201cidgaf Keisha\u201d was\u00a0printed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/236/0*6HtxzsZxAH18YKtV.jpg\"></figure><h3>The Implementation</h3>\n<p>Now onto what I wanted to implement.</p>\n<p>I didn\u2019t even know how to edit the libraries that I installed into my app. So I started poking around and came across the Pods file. I opened it and then opened the development pods folder. I saw the <strong>RCTAppleHealthKit </strong>folder. It looked promising so I opened\u00a0it.</p>\n<p>What\u2019s up with the\u00a0.h and\u00a0.m\u00a0files?</p>\n<p>I opened the <strong>RCTAppleHealthKit.h</strong>. It didn\u2019t look too bad. I then proceeded to open the <strong>RCTAppleHealthKit.m</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/275/0*DAwbkHKlJnDcUG1D\"></figure><p>Why does Objective-C function declaration syntax look so confusing? It\u2019s like they intentionally wanted to scare people away from Objective-C.</p>\n<p>Example:</p>\n<p><strong>- (void)workout_getRoute:(NSDictionary *)input callback:(RCTResponseSenderBlock)callback;</strong></p>\n<p>Why is the first parameter of the function formatted differently than the subsequent parameters?</p>\n<p>Thank God for Google and people smarter than me willing to post and respond to blogs and forums because I would have been completely lost.</p>\n<p>So I pretty much copied and pasted the <strong>getAnchoredWorkouts</strong> method in the\u00a0<strong>.m </strong>file, changed the name to \u201c<strong>getWorkoutRoute</strong>,\u201d and updated the function logic to log \u201cWazzzzup\u201d in the\u00a0console.</p>\n<p>I rebuild my app and BOOM! I can see the text \u201cWazzzzup\u201d logged on the\u00a0console.</p>\n<h4>Implementation Steps</h4>\n<p>Now for the difficult, but fun part. Using <a href=\"https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/reading_route_data\">this</a> Apple Developer Docs article as a reference, I had to perform these three queries in sequence.</p>\n<ol>\n<li><strong>Get workout</strong></li>\n<li><strong>Get route</strong></li>\n<li><strong>Get locations</strong></li>\n</ol>\n<p>The problem with the article is that the code is stuck on Swift. The language option at the top won\u2019t convert the language to Objective-C. And I\u2019ve never even seen Swift code\u00a0before.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*g8Qwj_nQYHM1LNqq\"><figcaption>Photo by <a href=\"https://unsplash.com/@a_d_s_w?utm_source=medium&amp;utm_medium=referral\">Adrian Swancar</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I had no clue how to export or import classes so I continued to use the method <strong>getAnchoredWorkouts </strong>as a reference.</p>\n<p>I created another method called <strong>workout_getRoute </strong>in the <strong>Methods_Workout</strong> files. This method will be used as the container for the logic to handle fetching the\u00a0data.</p>\n<p>Alright. The first step is to get the <strong>HKWorkout</strong> class. How do I do that? I\u2019ll just see how <strong>getAnchoredWorkouts </strong>does\u00a0it.</p>\n<p>Great. Create another method in the <strong>Queries</strong> files and I\u2019ll call it <strong>\u201cfetchWorkoutById.\u201d </strong>Use the <strong>HKSampleQuery </strong>class to get the <strong>HKWorkout</strong> class.</p>\n<p>Next, I need to get the <strong>HKWorkoutRoute </strong>class that is associated with the <strong>HKWorkout</strong> class, and to do this I need to perform another query using the <strong>HKAnchoredObjectQuery </strong>class.</p>\n<p>So I created another method in the <strong>Queries</strong> files, called it <strong>\u201cfetchWorkoutRoute,\u201d </strong>and inserted the configuration to get the <strong>HKWorkoutRoute</strong>.</p>\n<p>Lastly, I needed to query for the location data associated with the <strong>HKWorkoutRoute</strong> class by using the <strong>HKWorkoutRouteQuery</strong> class. I inserted this logic inside the same method I created previously, <strong>fetchWorkoutRoute.</strong></p>\n<p>Yay! I got a response! I did\u00a0it!</p>\n<p>And obviously, it didn\u2019t go as smoothly as I described above. It literally took me a week to get a successful response. And most of the time I spent figuring out syntax and type\u00a0issues.</p>\n<p>So I integrated this method into my app. I created a new screen, imported a map, and configured it to display the locations on the\u00a0map.</p>\n<p>I rebuilt my project and tested it on my device for a run I did early that\u00a0day.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/413/0*WtODBvapT8BoO0sb.jpg\"></figure><p>I wasn\u2019t done. It wasn\u2019t displaying the whole route. Something was wrong with my configuration.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/354/1*hl3hyMmBRMWj4SCNq44H7w.png\"></figure><p>I promise I ran further than\u00a0this\u2026</p>\n<p>Like every developer would do, I went straight to Google. To my luck, nobody had this issue. And surprisingly, not many people attempted this.</p>\n<p>After two days of debugging, I almost lost hope and was about to throw in the\u00a0towel.</p>\n<blockquote>But then I realized that I was the main character and kept\u00a0going.</blockquote>\n<p>Not even an hour later, I found out what the problem\u00a0was.</p>\n<blockquote>\u201cYour block receives one or more batches of location data. When the block\u2019s done parameter is true, you have received all the\u00a0data.\u201d</blockquote>\n<p>After rereading this statement a million times, I realized my logic inside the data handler block was configured incorrectly.</p>\n<p>I assumed all the location data was passed at once when the done parameter was set to true, but I was wrong. Now that I think about it, this assumption made no\u00a0sense.</p>\n<p>I reconfigured my logic, rebuilt my project, and the whole workout route was displayed nicely on the\u00a0map.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*oGgVJQ8EmzKVCTGc\"><figcaption>Photo by <a href=\"https://unsplash.com/@dre0316?utm_source=medium&amp;utm_medium=referral\">Andre Hunter</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3>Conclusion</h3>\n<p>From start to finish, this process took me a little over a week. And this was my first attempt to contribute to an open-source project. It was also my first time being exposed to Objective-C and working with native modules in React\u00a0Native.</p>\n<p>It was a struggle from start to finish. I spent a lot of time trying to figure out syntaxes, types, class references, and other concepts.</p>\n<blockquote>And I thank all of you programmers for contributing to forums, blogs, dicussions, and whatever deemed helpful to me. You people make programming bearable.</blockquote>\n<p>I was a little intimated at first and I wasn\u2019t sure if I had enough competence to accomplish the task, but I\u2019m glad I took on the challenge. I learned a lot about Objective-C, how to interact with Apple HealthKit, and more about what I\u2019m capable\u00a0of.</p>\n<p>Although the code might not be perfect and probably has issues, I\u2019m happy to at least get a response that I\u2019m looking\u00a0for.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/0*8p5zNvZierBPw5R_.jpg\"></figure><p>You can critique my code here: <a href=\"https://github.com/nguyening20/react-native-health\">My React-Native-Health Fork</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=87aee810d31e\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["libraries", "open-source", "app-development", "code", "react-native"], "id": "87aee810d31e"}, {"title": "How to UseEffect In React", "pubDate": "2022-02-13 16:25:41", "link": "https://medium.com/@athletecoder/how-to-useeffect-in-react-97c4e6dc0a88?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/97c4e6dc0a88", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png", "description": "<h4>A quick tutorial on how to useEffect.</h4><p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to ...</p>", "content": "\n<h4>A quick tutorial on how to useEffect.</h4>\n<p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to perform side\u00a0effects.</p>\n<p>Thanks to the React team, now we have\u00a0<a href=\"https://reactjs.org/docs/hooks-intro.html\"><strong>hooks</strong></a><strong>.</strong></p>\n<blockquote>\n<strong>React hooks </strong>give functions similar features to what is provided to\u00a0classes<strong>.</strong>\n</blockquote>\n<p>But In this post, we are going to focus on a React hook called <a href=\"https://reactjs.org/docs/hooks-effect.html\"><strong>useEffect</strong></a>. A hook that is pretty complex at first, but after today you will get a good grasp on how everything works.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png\"></figure><h3>What Is UseEffect</h3>\n<p><strong>useEffect </strong>is a hook that allows you to perform side effects from a functional component. It serves the same purpose as <strong>componentDidMount</strong>, <strong>componentDidUpdate</strong>, and <strong>componentWillUnmount </strong>lifecycle methods in React classes, but is unified into a single\u00a0API.</p>\n<p>useEffect takes two\u00a0params.</p>\n<ol>\n<li><strong>A function</strong></li>\n<li><strong>An array of dependencies (optional)</strong></li>\n</ol>\n<p>Example.</p>\n<blockquote>useEffect(() =&gt;\u00a0{</blockquote>\n<blockquote>},[${dependency}])</blockquote>\n<h3>What We Are Going To\u00a0Learn</h3>\n<p>I think the best way to understand a coding concept is to see it in action. So we are going to identify how we can use useEffect to interact with these\u00a0events:</p>\n<ol>\n<li><strong>When the component mounts.</strong></li>\n<li><strong>When a state variable\u00a0changes.</strong></li>\n<li><strong>When multiple state variable\u00a0changes.</strong></li>\n<li><strong>When the component unmounts.</strong></li>\n</ol>\n<h3>What You\u00a0Need</h3>\n<ul>\n<li>\n<strong>Computer</strong> (Me: Macbook\u00a0Pro)</li>\n<li>\n<strong>Code Editor </strong>(Me: Visual Studio\u00a0Code)</li>\n<li>\n<strong>Browser </strong>(Me:\u00a0Chrome)</li>\n<li>\n<strong>A shallow understanding of React </strong>(Me:\u00a0IDK)</li>\n</ul>\n<h3>Initiate React\u00a0App</h3>\n<p>Go to your chosen directory, and <strong>npx create-react-app useeffect. </strong>I named this project \u201cuseeffect\u201d, but feel free to choose whatever name you would\u00a0like.</p>\n<p>If you need more clarification on how to set up a react project then follow <a href=\"https://create-react-app.dev/docs/getting-started\">these</a> instructions.</p>\n<h4>UseEffect On\u00a0Mount</h4>\n<p>Once you have everything running.</p>\n<ul>\n<li>Go to App.js (src\u00a0folder).</li>\n<li>Import <strong>useEffect</strong> from <strong>react </strong>at the top of the\u00a0file.</li>\n<li>Inside the function component above the <strong>return</strong> statement call the <strong>useEffect</strong> hook.</li>\n<li>Insert an arrow function as the first argument.</li>\n<li>Inside the arrow function, console.log(\u201cmount\u201d).</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*E4nSwhf8S5NdIEv0zJszpw.png\"></figure><p>In the developer console, you will notice \u201cmount\u201d has been logged. And every time you refresh you will see \u201cmount\u201d reappear in the\u00a0console.</p>\n<blockquote>So far, this tells us that every time the component <strong>App</strong> is mounted onto the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a>, the <strong>useEffect</strong> is\u00a0called.</blockquote>\n<h4>UseEffect On State\u00a0Update</h4>\n<p>Now let's see how <strong>useEffect</strong> interacts when a state variable is\u00a0changed.</p>\n<ul>\n<li>Import the <strong>useState</strong> hook at the top of the\u00a0file.</li>\n<li>Initiate a state variable called <strong>count</strong> with the default value\u00a0zero.</li>\n<li>Erase all the contents inside the <strong>div </strong>with the className \u201cApp.\u201d</li>\n<li>Create a button inside the div that displays the count and increments the count by one when\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aQ9SIHRYMBz7_ILRPuMNxg.png\"></figure><p>With the developer console open, interact with the button, and watch how the useEffect responds to the state\u00a0updates.</p>\n<blockquote>In this case, useEffect is initially called after the component as mounted, and then called every time the count state is\u00a0updated.</blockquote>\n<p>Honestly, this was unexpected for me when I started working with React. By not passing a dependency array, I expected useEffect to only be called once when the component mounts.</p>\n<p>To confirm this, we are going to add another state variable and then see how useEffect reacts to each state\u00a0change.</p>\n<h4>UseEffect On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Initiate another state variable called <strong>\u201cdecrement\u201d</strong>. And set the default value as\u00a0100.</li>\n<li>Inside the div class \u201cApp\u201d, add another button that displays the value of <strong>decrement </strong>and decrements by one when the button is\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U6mmguYKC_7E0vKlBJe02A.png\"></figure><p>Notice when you switch between clicking on both buttons, the <strong>useEffect</strong> will always be\u00a0called.</p>\n<blockquote>useEffect will always be called on any state update when we don\u2019t pass a dependency array.</blockquote>\n<p>Since we didn\u2019t provide a dependency array, useEffect will always be called with any state update occurring inside the component.</p>\n<h4>UseEffect With A Dependency When Multiple States Are\u00a0Updated</h4>\n<p>Let\u2019s say we only want useEffect to update when count updates. Well, we can do that by adding a <strong>dependency array </strong>as a second parameter.</p>\n<ul>\n<li>Add an array as a second parameter to the useEffect hook.</li>\n<li>Add count inside the\u00a0array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6LfAIEF7Cg4UPuJOcZpJyg.png\"></figure><blockquote>useEffect is called after the component has mounted and then called again every time count updates and not decrement. This is accomplished through providing count as a dependency.</blockquote>\n<p>By only passing count as a dependency to the useEffect hook, we are essentially telling useEffect to only be called again when the count state variable\u00a0changes.</p>\n<h4>UseEffect With A Empty Dependency Array When Multiple States Are\u00a0Updated</h4>\n<p>We are going to see what happens when we pass an empty dependency array.</p>\n<ul>\n<li>Remove count from dependency array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/774/1*MlkFB2kJ0s1F2l5rNJ-WlQ.png\"></figure><p>As you interact with both buttons, you will notice that the developer console doesn\u2019t relog \u201cmount.\u201d It only logged \u201cmount\u201d after the component has been\u00a0mounted.</p>\n<blockquote>useEffect with an empty dependency array will only be called once after the component has\u00a0mounted.</blockquote>\n<p>But let\u2019s say that we want to separate the logic between how we handle when count updates and when decrement updates.</p>\n<p>We can achieve this by\u00a0either:</p>\n<ol>\n<li>Adding both states to the dependency array of the useEffect and insert logic in the function to separate the\u00a0process.</li>\n<li><strong><em>Adding another useEffect hook.</em></strong></li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*VUPK-jUct6g6NgYC\"><figcaption>Photo by <a href=\"https://unsplash.com/@benwhitephotography?utm_source=medium&amp;utm_medium=referral\">Ben White</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I know. I know. We can have multiple useEffect hooks inside a component. It took me a while to figure out that this was feasible.</p>\n<h4>Multiple UseEffects On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Create another useEffect hook and add decrement as a dependency.</li>\n<li>Update both console.logs to log their dependency variable.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*F--8bKn-bAhui1UgcSj9qQ.png\"></figure><blockquote>Both useEffects are called after the component has been mounted and are called again depending on when their dependencies update.</blockquote>\n<h4><strong>Perform Actions When The Component Will\u00a0Unmount</strong></h4>\n<p>Lastly, we are going to see how we can add logic before the component will unmount. Similarly to how we would use the lifecycle method <strong>componentWillUnmount </strong>for class components.</p>\n<p>A perfect example of when we would need to implement a process like this is when we subscribe to a listener and want to unsubscribe before the component unmounts.</p>\n<ol>\n<li>Remove the useEffects we previously created.</li>\n<li>Create a new useEffect and inside we will subscribe to the event listener\u00a0\u201cclick.\u201d</li>\n<li>At the end of the function, return a function that removes the listener.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yONhKL9uqHvuj9-yVJOJEg.png\"></figure><blockquote>return a function at the end of the useEffect function to perform actions before a component will unmount. Similarly to the lifecycle method componentWillUnmount.</blockquote>\n<p>Ta-da! Now you know how to perform actions before a component will\u00a0unmount.</p>\n<h3>Summary</h3>\n<p>Here\u2019s what we\u00a0learned:</p>\n<ol>\n<li>useEffect is always called once after the component is\u00a0mounted.</li>\n<li>useEffect <strong>without the dependency</strong> array will always be called again when any state is updated inside the component.</li>\n<li>useEffect with an <strong>empty dependency array</strong> will only be called once after the component is\u00a0mounted.</li>\n<li>useEffect with <strong>one or few dependencies</strong> will only be called again depending on when their dependencies update.</li>\n<li>Multiple useEffects can be declared inside a component.</li>\n<li>To handle actions before the component will unmount, return a function at the end of the useEffect function.</li>\n</ol>\n<p>Congrats on getting to the end! Now you have a better grasp on how to useEffect.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=97c4e6dc0a88\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["react", "useeffect", "react-hook", "learning-to-code", "coding"], "id": "97c4e6dc0a88"}, {"title": "Linear-Gradient Underline Text", "pubDate": "2022-02-05 16:03:21", "link": "https://medium.com/@athletecoder/linear-gradient-underline-text-4e42d28aa343?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/4e42d28aa343", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png", "description": "<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4><p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it....</p>", "content": "\n<h3>Make A Linear-Gradient Underline Text</h3>\n<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4>\n<p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png\"></figure><p>I\u2019ll use <a href=\"http://codesandbox.io/\">codesandbox.io</a> for this illustration, but you can use whatever code editor you so\u00a0choose.</p>\n<p>Let\u2019s create a basic layout of a\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CfEvjW3xrVBrGLkjI9STtQ.png\"><figcaption>codesandbox.io</figcaption></figure><p>We now have the basic layout of the page with \u201cHello Everyone\u201d wrapped with an <strong>h1</strong> tag and displayed on the\u00a0page.</p>\n<p>In terms of content, we have everything we need in between the <strong>html</strong> tags. It\u2019s time for\u00a0styling.</p>\n<p>To add <strong>CSS </strong>styles, we need to add the <strong>style</strong> tags above or below the <strong>html</strong> tags. Let's place it above and add the initial styles for our <strong>h1</strong>\u00a0text.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KuP62ApaasDdrjUx9kI5Eg.png\"></figure><p>We made the font size 40 pixels and the font color\u00a0black.</p>\n<p>Now we can get to what you came here for. Adding the cool underline style.</p>\n<p>We first need to add a background color. I chose grey. I thought it complimented the black well, but you can use any color combination. Just replace the <strong>rgba</strong>\u00a0values.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bbPVyTeqbJdpI2ErzSYysQ.png\"></figure><p>We have to use the <strong>background-image </strong>property with <strong>linear-gradient</strong> instead of the <strong>background </strong>property.</p>\n<p>For some browsers, linear-gradient might need a prefix. You can learn more about it at <a href=\"https://www.w3schools.com/cssref/func_linear-gradient.asp\">w3schools.com</a>.</p>\n<p>I tried the background property, but the additional properties we will be adding do not apply to the background property.</p>\n<p>There\u2019s already an issue with the background color extending beyond the text. We\u2019ll fix that\u00a0now.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BmeXcxz3TeofSATNZfL9BA.png\"></figure><p>We set the <strong>display</strong> property as <strong>inline</strong> to make the width and height of the h1 tag the same as its\u00a0content.</p>\n<p>Now, need to adjust the size and position of the background.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ovrse_E1X9HtkHMBVCkonQ.png\"></figure><p>We adjust the size and position of the background based on the size of the font using\u00a0<strong>em.</strong></p>\n<p>And we also made the width of the background 100% to cover the size of the\u00a0content.</p>\n<p>Notice the background did not change when we add the<strong> background-size</strong> and <strong>background-position</strong> properties. We just need to add one more property.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*l3Y27gGKoamnGSPa_bSB9Q.png\"></figure><p>The <strong>background-repeat </strong>property fixed this for us. Now the size of the background is the size we set it\u00a0as.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y6b2U4q8MN1JTJSg7obsRw.png\"></figure><p>And it\u00a0wraps!</p>\n<p>The CSS code is below for your convenience.</p>\n<blockquote>background-image: linear-gradient(to right, rgba(180, 180, 180, 0.8), rgba(180, 180, 180,\u00a00.2));</blockquote>\n<blockquote>display: inline;</blockquote>\n<blockquote>background-position: 0\u00a00.6em;</blockquote>\n<blockquote>background-size: 100%\u00a00.8em;</blockquote>\n<blockquote>background-repeat: repeat-x;</blockquote>\n<p>There are limitations to this technique like not being able to round the background, but if I find a better way to do this I\u2019ll make sure to post it. If you already know a better way, let me know in the comments.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4e42d28aa343\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["html", "programming", "css", "style", "code"], "id": "4e42d28aa343"}, {"title": "What I Experienced Creating An MVP", "pubDate": "2022-02-03 15:35:00", "link": "https://medium.com/@athletecoder/what-i-experienced-creating-an-mvp-3d2702c7a925?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/3d2702c7a925", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9", "description": "<h4>4 months (over 1000\u00a0hours).</h4><p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working...</p>", "content": "\n<h4>4 months (over 1000\u00a0hours).</h4>\n<p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working on this\u00a0app.</p>\n<p>On July 26th, 2021 I began working on the mock-up of my training app. From then to January of 2022, I spent an average of 8 hours a day, over 1000 hours in total, slowly building this app. It was a slow, long, and dreadful process, but it was worth\u00a0it.</p>\n<h3>Issues I had During The\u00a0Process</h3>\n<p>Most of the issues I had were self-inflicting. Not physically, but emotionally and mentally. I would constantly doubt my abilities. I would say to\u00a0myself,</p>\n<blockquote>\u201cNobody is going to like my app. There will be something wrong with it. People are going to make fun of me. It\u2019ll be embarrassing. Is it even worth\u00a0it?\u201d</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9\"><figcaption>Photo by <a href=\"https://unsplash.com/@surface?utm_source=medium&amp;utm_medium=referral\">Surface</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Being a 26-year-old adult living with my mother didn\u2019t help either. In America, at the age of 18, you are expected to be on your own. You go to college and then right into the workforce. You are expected to have your life together before the age of\u00a026.</p>\n<p>So I neglected most of my social life spending most days at home. I would occasionally meet up with a few friends, but I hated when they would ask me, \u201cwhat have you been up to?\u201d And when I would explain to them my endeavors, there would be a confused look on their faces. Then spend emotional energy to get them to understand, but it always ended up in my disappointment.</p>\n<blockquote>Nobody can truly understand your perspective, your vision, your\u00a0dreams.</blockquote>\n<p>But the idea of being alone in my pursuits wasn\u2019t new to me. I felt like most of my life I\u2019ve had dreams that nobody understood or believed in. But I knew that the only opinion that truly mattered was\u00a0mine.</p>\n<h3>How I Coped With My\u00a0Issues</h3>\n<h3>Routine</h3>\n<p>Routine. Routine.\u00a0Routine.</p>\n<p>I briefly outline my routine in my <a href=\"https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3\">previous post</a>, but I can\u2019t emphasize enough how important a routine is and how it significantly improved my well-being and productivity.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*13hu8fUOz6vcN0h2\"><figcaption>Photo by <a href=\"https://unsplash.com/@jazminantoinette?utm_source=medium&amp;utm_medium=referral\">Jazmin Quaynor</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Anxiety improved significantly.</h4>\n<blockquote>Anxiety thrives from the\u00a0unknown.</blockquote>\n<p>I was adventuring into the unknown. I didn\u2019t know exactly what the outcome was going to be. And when I would spend too much time thinking about what could happen, my mind assumed the worse. I was\u00a0scared.</p>\n<blockquote>Adventuring into the unknown isn\u2019t so bad after all if you take it one day at a\u00a0time.</blockquote>\n<p>Taking it one day at a time helped me realize the negative thoughts in my mind were all an illusion. We don\u2019t know what will happen in the\u00a0future.</p>\n<p>Routine gave me a sense of control over my life. I knew what was coming next. Everything was predictable from one task to\u00a0another.</p>\n<p>And when I would rest my head on my pillow at night I could reflect on the day and be proud of myself for the progress I\u00a0made.</p>\n<h4>Productivity stayed consistent.</h4>\n<p>We are habitual creatures. Once a habit is established, the effort to perform the activity becomes effortless. And a routine is, by definition, a sequence of daily\u00a0habits.</p>\n<p>Our habits allow us if chosen and implemented correctly, to minimize <strong><em>decision fatigue</em></strong>. The concept behind decision\u00a0fatigue</p>\n<blockquote>\u201cis that a human\u2019s ability to make decisions can get worse after making many decisions, as their brain will be more fatigued.\u201d\u200a\u2014\u200a<a href=\"https://www.medicalnewstoday.com/articles/decision-fatigue#what-is-it\">Medical News\u00a0Today</a>\n</blockquote>\n<p>I wanted to conserve my energy to be primarily exerted on my work rather than on making decisions on things that can be automated. This robotic way of life is necessary for me to be consistent.</p>\n<p>A work block consists of 90 minutes of work and a 20-minute break. In the article, \u201c<a href=\"https://hubermanlab.com/teach-and-learn-better-with-a-neuroplasticity-super-protocol/\">TEACH &amp; LEARN BETTER WITH A \u201cNEUROPLASTICITY SUPER PROTOCOL</a>\u201d by Andrew Huberman,</p>\n<blockquote>\u201cSolid research shows that 90 minutes is about the longest period we can expect to maintain intense focus and effort toward learning.\u201d\u200a\u2014\u200aAndrew Huberman.</blockquote>\n<p>I came to figure out that 4 sessions a day were my limit. 2 sessions in the morning and 2 sessions in the afternoon.</p>\n<h3><strong>Social Media</strong></h3>\n<p>Have you ever caught yourself mindlessly scrolling through Instagram, Youtube, and/or other social media platforms? Sometimes I will catch myself in the act of scrolling and ask myself, \u201cWhat am I doing?\u201d But then continue to\u00a0scroll.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*FcAzrGhEF5nNIQSG\"><figcaption>Photo by <a href=\"https://unsplash.com/@georgiadelotz?utm_source=medium&amp;utm_medium=referral\">Georgia de Lotz</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Social media can be very helpful, especially Youtube. When an issue arises, Youtube is one of the top places on the internet I go to to find the answer. Youtube is also filled with a ton of aspiring content that motivated me to keep\u00a0going.</p>\n<blockquote>The algorithm is fighting for your attention.</blockquote>\n<p>I\u2019ll be watching a video I intended to watch. And then my curiosity gets the best of me. I\u2019ll scan the recommended videos and I\u2019ll come across an interesting title or thumbnail. Without thinking, I\u2019ll click on that video. And an hour later, I\u2019ll be down this rabbit hole. Repeating the same process over and over\u00a0again.</p>\n<p>Most of us use social media as our entertainment of choice. So I\u2019m not saying to abandon it, but to be aware of when and how you are using\u00a0it.</p>\n<h3>Pros of building an\u00a0MVP</h3>\n<h4>It\u2019s significantly cheaper than outsourcing</h4>\n<p>The tech stack I chose to use was free to get started building. <strong>MongoDB</strong> and <strong>Firebase</strong> have free tiers for development purposes. <strong>Node</strong> and <strong>React Native</strong> are open sources and free to\u00a0use.</p>\n<p>Going live will require some money. For me, I tried my best to spend the least amount of money possible. Below is the list of my monthly expenses after going\u00a0live.</p>\n<ul>\n<li>Heroku ~ $7.00 /\u00a0Month</li>\n<li>MongoDB ~ $50.00 /\u00a0Month</li>\n<li>Domain ~ $5.00 /\u00a0Month</li>\n<li>Custom Email ~ $12 / Month (Maybe, not necessary for\u00a0MVP)</li>\n<li>Apple Developer Program Fee ~ $99 / Year (IOS\u00a0Apps)</li>\n</ul>\n<p>It cost me about $83 per month to have my app live plus a bunch of time to get my product\u00a0built.</p>\n<h4><strong>Becoming more\u00a0skillful</strong></h4>\n<p>Have you ever heard of the compound effect? The concept of it all is that small habits compound over\u00a0time.</p>\n<figure><img alt=\"https://jamesclear.com/continuous-improvement\" src=\"https://cdn-images-1.medium.com/max/700/0*mNyQgkUpXy0v7joC.jpg\"><figcaption><a href=\"https://jamesclear.com/continuous-improvement\">Continuous Improvement:<br>How It Works and How to Master\u00a0It</a></figcaption></figure><blockquote>\u201cIf you get one percent better each day for one year, you\u2019ll end up thirty-seven times better by the time you\u2019re done.\u201d\u200a\u2014<a href=\"https://jamesclear.com/continuous-improvement\"><em>\u200aJames\u00a0Clear</em></a>\n</blockquote>\n<p>The small actions add up over time! So the more I apply my skills daily, the exponentially better I will become at\u00a0it.</p>\n<p>And the more skillful you become the more competitive advantage you have in the labor market. And If the product you build performs decently, then it shows potential clients and/or employers your competence.</p>\n<h4>Identifying Your\u00a0Limits</h4>\n<p>At about 7\u20138 hours of work, my energy levels are significantly drained. It becomes difficult for me to focus and my productivity takes a significant hit.</p>\n<p>There are some days when I would get stuck on a problem and I ended up working 10 hours that day. But I soon found out that I\u2019ve had more trouble sleeping those nights and was less productive the next\u00a0day.</p>\n<p>I don\u2019t know how some people can work beyond 8 hours a day consistently. I guess some people are built differently. I admire\u00a0it.</p>\n<p>I also learned that I can\u2019t function effectively without a sufficient amount of sleep. For me, the least I can get away with was 7 hours. Anything less than 7 hours I\u2019m a zombie. 8 hours of sleep is what I aim\u00a0for.</p>\n<blockquote>Getting enough quality sleep is even more important to our physical and mental health than diet and exercise.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5A-Hc1yNPW7n69fd\"><figcaption>Photo by <a href=\"https://unsplash.com/@twinsfisch?utm_source=medium&amp;utm_medium=referral\">Isabella and Zsa Fischer</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Matthew Walker, a scientist and professor of neuroscience and psychology who specializes in sleep, explains the importance of sleep and the severe side effects if we don\u2019t get enough sleep in his book, \u201c<a href=\"https://www.amazon.com/Why-We-Sleep-Unlocking-Dreams/dp/1501144316\">Why We Sleep</a>.\u201d You should give it a\u00a0read.</p>\n<h3>Cons of building an\u00a0MVP</h3>\n<h4>Time &amp; Hard Work (Expected)</h4>\n<p>Building an app requires discipline over a long time. It is not an easy goal. It\u2019s like a rollercoaster ride.</p>\n<p>It\u2019s somewhat easy at first. You are motivated and inspired by your idea so you start off sprinting. You are eager to get up in the morning so you can get working on your\u00a0project.</p>\n<p>But as you know, motivation fades. And when my motivation faded, about a month in, I relied on my routine to sustain my productivity.</p>\n<p>Expect your motivation to fade and have a plan. For me, my plan was a routine. Like I stated previously, A routine made it significantly easier for me to get myself at my desk and\u00a0work.</p>\n<h4>Money</h4>\n<p>Most products, if not all, require some initial investment. Previously, I stated that it cost me about $83 per month to have my app live. I wouldn\u2019t consider this a large amount of money, but it still cost me\u00a0money.</p>\n<p>The amount of money needed will vary from project to project. Depending on your project, it might require more or less than $83 a month. Beforehand, do your research to ensure you have the proper financial resources to support your\u00a0product.</p>\n<h3>Just Do\u00a0It</h3>\n<p>It will be difficult, but you can do it. Don\u2019t focus too much on the outcome. Focus on what is needed of you daily. Take each day one at a time. Be aware of your thoughts. If you have anxiety issues, established a\u00a0routine.</p>\n<blockquote>The future is nearly unpredictable, so choose to be optimistic about\u00a0it.</blockquote>\n<p>Failure and regret are both painful experiences. But,</p>\n<blockquote>Failure is only temporary. Regret lasts\u00a0forever.</blockquote>\n<p>Failure is an inevitable experience in the process<strong> </strong>of you becoming the best version of yourself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*O7uxEBtk4q5-ZXFr\"><figcaption>Photo by <a href=\"https://unsplash.com/@clarktibbs?utm_source=medium&amp;utm_medium=referral\">Clark Tibbs</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>If you have an idea, and you truly think it\u2019s valuable, then you should go for it. I mean, why not? There\u2019s only good that comes from the experience of trying. And what if everything works out in your favor? Then that will be\u00a0awesome!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3d2702c7a925\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["anxiety", "mvp-development", "overcoming-fear", "habits", "app-development"], "id": "3d2702c7a925"}, {"title": "Turning An Idea Into A Reality", "pubDate": "2022-01-26 15:37:49", "link": "https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/a75af7170fc3", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif", "description": "<h4>I built an\u00a0app</h4><p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new f...</p>", "content": "\n<h4>I built an\u00a0app</h4>\n<p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new favorite. I could feel the soreness in my bum beginning to kick in from sitting on a hard wooden chair for over 2 hours. I suddenly notice my teeth gnawing at a fingernail. I pull my finger away from my mouth and lay them on the\u00a0table.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif\"><figcaption>Photo by <a href=\"https://unsplash.com/@romanbozhko?utm_source=medium&amp;utm_medium=referral\">Roman Bozhko</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I took my gaze away from the screen and moved it to the view in front of me. The sun beamed through the glass windows. The light faded to a dim from the left side of the coffee shop to the right side. There were tables neatly placed around the coffee bar below. The shop was wrapped around with roads and trees. The different shades of green elevated the sense of life. People on motorbikes would constantly speed past. Most were single riders, but some would have multiple passengers. On occasion, I would see riders with multiple boxes stacked on top of each other balancing on the back of the bike. How did they not fall\u00a0over?</p>\n<p>\u201cWhat are you going to do with your life,\u201d I asked\u00a0myself.</p>\n<p>This question seemed to be a common occurrence at the time. I would typically tell myself that I\u2019m going to be a professional football player. But, when I would tell myself that I truly didn\u2019t believe it. The dream of playing professional football seemed unattainable. It seemed beyond my reach. I lost\u00a0faith.</p>\n<p>After what felt like hours, but was only a couple of minutes, the space between each thought began to expand. And then suddenly It became quiet inside my head for a long brief\u00a0moment.</p>\n<p>\u201cWhat if I can create a tool and/or service tailored to athletes, like myself, to help them enhance their training?\u201d</p>\n<p>And that\u2019s the first time the idea popped into my head. At the time, in 2019, I was on my soul-searching trip through Vietnam. The issue was I didn\u2019t know how to bring that idea to life. I didn\u2019t have enough money. Most of the money I made was already invested in this trip. And I didn\u2019t have the knowledge or skills to build it on my own. I only knew the basics of HTML, CSS, and JavaScript (JS).</p>\n<p>Fast forward to the end of January of 2020 (I abandoned the idea for a while), I was in Louisville, Kentucky employed as an IT Consultant. Most days I would arrive at the office about 10 minutes before 9, place a k-cup in the coffee machine, ponder what I\u2019m doing with myself, grab my coffee and then walk over to my desk. I was hardly engaged with what I was doing, so I found myself constantly wondering about life. But one day, the idea reappeared in my thoughts. I felt determined. I told myself I had nothing to lose and all the world to\u00a0gain.</p>\n<p>I brainstormed a couple of strategic options. I came down to two. I could wait until I had enough money to invest in contractors to build it for me, or I could teach myself the skills to do it on my own. The journey to do it on my own had less risk and more benefits if failure was the outcome. I also knew it was going to be a challenge.</p>\n<p>I typed into the Google search bar, \u201cHow to build an application from scratch?\u201d \u201cHave an idea, create a plan, and execute.\u201d I already knew most of these things. I was asking the wrong questions. I needed to know exactly what tech stack I was going to use and how I was going to apply them.<br> I had experience with JS so I stuck with it. NodeJs as the backend environment and JS, HTML, and CSS as the frontend. Doing additional research on frontend development, I stumbled upon JS frameworks. What I learned is that JS frameworks are prewritten JS code that allows for easier development. There were multiple JS frameworks to choose from; <strong>React</strong>, Vue and Angular were the most popular. <a href=\"https://reactjs.org/\"><strong>React</strong></a> seemed the most appealing based on popularity, so I decided to go with\u00a0it.</p>\n<p>I typed, \u201cTutorials on React,\u201d into Google\u2019s search bar. <a href=\"http://udemy.com/\">Udemy</a> was the first result. It was a website I\u2019ve heard about before through numerous ads. I arrived on Udemy\u2019s website, created an account, and found a course called, \u201cModern React and Redux.\u201d I didn\u2019t know what Redux was, but it had plenty of reviews and almost a 5-star rating so I bought\u00a0it.</p>\n<p>5:30 the next morning, and I\u2019m in my apartment sitting in front of my laptop computer screen starting the first lesson of \u201cModern React and Redux.\u201d And for the next month and a half, I would spend most mornings, for an hour or so, tackling each instructional video.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*a3L7KQrSEtxsa2-c\"><figcaption>Photo by <a href=\"https://unsplash.com/@altumcode?utm_source=medium&amp;utm_medium=referral\">AltumCode</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>After completing the course, I had a good understanding of the React Framework and how <a href=\"https://react-redux.js.org/\">Redux</a> integrated with it. But I needed to apply what I learned to\u00a0reality.</p>\n<p>A good buddy of mine recently started a podcast that focused on reviewing books and beers. It was the perfect opportunity for me to apply what I learned so I created a website for\u00a0them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FEMaWPMT6h-QopBZ_OUQFg.png\"><figcaption>The homepage of the website I created for the\u00a0podcast</figcaption></figure><p>The website had a store, blog, admin panel, and basic pages that every website needs. The store was the most difficult to implement. <a href=\"https://stripe.com/\"><strong>Stripe\u2019s API</strong></a> (payment processor) documentation was very easy to go through, but figuring out how to configure the process from item to cart, and then cart to checkout was difficult.</p>\n<p>I continued building other websites for leisure. Coming up with random ideas and then trying to bring those ideas to life. Then one day, I stumbled upon React Native when I was scrolling through Youtube. <a href=\"https://reactnative.dev/\">React Native</a> is a framework used to develop mobile and web applications, but mainly used for mobile applications.</p>\n<p>\u201cWhy not?\u201d I asked myself. I already have experience with React. The world is going towards mobile devices if it hasn\u2019t already. It will be a useful skill to have under my belt. Plus, my training idea will need to be mobile-first.</p>\n<p>I googled \u201cReact Native,\u201d navigated to their website, clicked on the \u201cGet Started\u201d button on the homepage, and then skimmed through their documentation. For newbies, like myself, the documentation recommended using <a href=\"https://expo.dev/\"><strong>Expo CLI</strong></a> to get started. So I dove right into\u00a0it.</p>\n<p>For my first mobile application with React Native, I built a social networking application called, \u201cLetsLink.\u201d It was an app where you were only shown other users within a 1-mile radius. It was complex, but I learned more about how to interact with APIs and honed my skills in React and\u00a0Redux.</p>\n<p>In my next app, I was a little intimidated at first, but I ejected my Expo CLI app into a bare workflow environment. Soon I came to realize it wasn\u2019t as bad as I thought, and that Google is my best\u00a0friend.</p>\n<p>In July of 2021, I was in San Diego, CA visiting my brother. It was a sunny afternoon and I was taking a stroll along the beach. A couple of hours prior, I submitted my first app to the app store. It was a <a href=\"https://habt-b0f23.web.app/\">habit tracker app</a>. I felt confident. \u201cI\u2019m ready,\u201d I whispered to myself with the thought of my main idea in\u00a0mind.</p>\n<p>The following day at about 6:30 AM, I walked over, with a black coffee in hand, to my brother\u2019s standing desk with my laptop resting on top of it. I opened the lid of the laptop and took a couple of sips of coffee while I waited for the laptop to boot up. When the login screen displayed I took one last sip of my coffee and rested the coffee mug to the left of my laptop. I typed in my login credentials.</p>\n<p>I spent the next 4 hours or so brainstorming the functionalities of the app, and creating a broad timeline of the process from scratch to launch. I planned for the app to be on the app store towards the end of December of 2021, so that gave me about 4\u00a0months.</p>\n<p>That same afternoon, after working out and spending some downtime with family and friends, I found myself back at the desk working on designing the prototype in <a href=\"https://www.figma.com/\">Figma</a> (a prototype software). I spent the next week designing a prototype of the app. Design isn\u2019t my strong suit, but I tried my best to say the\u00a0least.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*IS1mh5NZIwsxM5hg\"><figcaption>Photo by <a href=\"https://unsplash.com/@balazsketyi?utm_source=medium&amp;utm_medium=referral\">Bal\u00e1zs K\u00e9tyi</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I was looking outside the airplane window on my way back to Seattle, WA. Being above the clouds makes you wonder if you could just choose to see the brighter side of things. Sometimes we get so caught up below the clouds that we don\u2019t even wonder what\u2019s above\u00a0it.</p>\n<p>Is this going to work? Are people going to like it? What if it fails? It\u2019s going to be embarrassing.</p>\n<p>These negative self-degrading thoughts make a frequent occurrence throughout my pursuit for the next couple of months. I had no choice but to implement a routine to keep these thoughts at\u00a0bay.</p>\n<p>I was normally awake at 6:00 AM. Made coffee, took out the dogs, meditated for 10 minutes, and worked from 6:30 -7:00 AM until about 10:00 AM\u200a\u2014\u200a11:00 AM. I worked in 90-minute intervals with 20-minute breaks in between. Then I would eat breakfast, work out, and be back at it at around 2:00 -3:00 PM until about 6:00\u20137:00 PM. I would have dinner, and then, depending on how I was feeling, I would squeeze in another hour or so before I would get ready for bed. I was in bed at around 9:00 PM and asleep at 10:00 PM. I was consistent most days, but obviously, life and procrastination would sometimes get in the\u00a0way.</p>\n<p>It\u2019s always the first couple of minutes of my work session where my mind would complain about how I don\u2019t want to be doing this right now. And then suddenly, my mind would transition into a deep state of focus on the task at hand. I started to enjoy diving into those work sessions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-umRWDH1aVlAH_7C\"><figcaption>Photo by <a href=\"https://unsplash.com/@avirichards?utm_source=medium&amp;utm_medium=referral\">Avi Richards</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>It\u2019s Mid-December and I had an overwhelming amount of work to be done. I\u2019ve made significant progress, but there was a lot of design and content configuration that needed to be done. I audibled and planned for the app to be completed by the end of December and to hopefully submit the app towards the beginning of\u00a0January.</p>\n<p>January 10th, I was in Denver, Colorado visiting a friend I met in college. It was an early Friday morning, the sun beamed through the window and onto my face. I\u2019m standing at a tall round wooden table with my laptop resting on top of it. I feel a sense of relief as I hit the submit button. My app is finally done. For\u00a0now.</p>\n<p>This was only the start of this app\u2019s journey. This first release was just the MVP (minimal viable product) version. More like a beta version. This app still needs a lot of work. I know things didn\u2019t go exactly how I planned in July, but I\u2019m glad I accomplished my main goal and that was to complete and submit the\u00a0app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BncmMbXS9mSNgh6H\"><figcaption>Photo by <a href=\"https://unsplash.com/@nullplus?utm_source=medium&amp;utm_medium=referral\">Razvan Chisu</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Feel free to check out the app I created <a href=\"https://www.softlete.com/\">here</a>. Let me know what you think through the feedback form on the\u00a0website.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a75af7170fc3\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["entrepreneurship", "ideas", "app-development", "fear-of-failure", "coding"], "id": "a75af7170fc3"}, {"title": "Contributing To A Open Source Library", "pubDate": "2022-02-17 15:48:05", "link": "https://medium.com/@athletecoder/my-first-attempt-to-contribute-to-a-open-source-library-87aee810d31e?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/87aee810d31e", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png", "description": "<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4><p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things....</p>", "content": "\n<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4>\n<p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things.</p>\n<p>But recently, I attempted to implement a new feature for the <a href=\"https://github.com/agencyenterprise/react-native-health\">React-Native-Health</a> library. Its intended purpose is to interact with the Apple HealthKit for\u00a0iOS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png\"></figure><h3>Backstory</h3>\n<p>I built this app called <a href=\"https://www.softlete.com/\">softlete</a> with the <a href=\"https://reactnative.dev/\">React-Native</a> framework. It\u2019s a training tool for athletes (anyone who physically trains for any purpose) that helps them organize their training while also providing meaningful resources, information, and feedback. It\u2019s still in its development phase.</p>\n<p>With the React-Native-Health library installed, I immediately have the configuration set up (permissions and methods) to retrieve data from Apple HealthKit.</p>\n<p>Most of the methods provided by the library satisfy my needs, but there is a method that is missing for a few key features I want to implement.</p>\n<h4>Key Features</h4>\n<p>A couple of key features I want to add\u00a0are:</p>\n<ol>\n<li>Display the user\u2019s workout route on a\u00a0map.</li>\n<li>Provide in-depth performance statistics and feedback for a user\u2019s workout\u00a0route.</li>\n</ol>\n<p>Plenty of fitness apps already offer these features, like Strava, so I thought I might as well\u00a0too.</p>\n<p>The issue is the React-Native-Health library doesn\u2019t have a method to accomplish this. And to implement these features, I need access to the workout route\u00a0data.</p>\n<p>So I was like, \u201cyou know what. I\u2019ll try to do it myself.\u201d And that\u2019s exactly what I\u00a0did.</p>\n<h3>The Journey</h3>\n<p>Beware, I\u2019m unfamiliar with native iOS development. I\u2019ve never attempted to contribute to an open-source library. So I\u2019m stepping into unknown territory.</p>\n<p>I had no idea how to export native modules in React Native. So, like what everyone would do, I headed straight to the motherland (React docs) and walked through the <a href=\"https://reactnative.dev/docs/native-modules-intro\">native modules documentation</a>.</p>\n<p>I followed \u201cexactly\u201d the steps in the documentation to add the demo method into my app. And\u00a0\u2026 I completely broke it. I spend the whole day debugging, looking through forums, blogs, and everything you can think\u00a0of.</p>\n<p>Nothing.</p>\n<p>After banging my head on the keyboard a couple of times. I took a leap of faith and assumed it was Xcode (It definitely wasn\u2019t Xcode itself, but my clumsiness). I uninstalled and reinstalled it. That night, I laid in bed, stared at the ceiling, and regretted my decision to attempt\u00a0this.</p>\n<p>I woke up, relieved myself, and sprinted straight to my computer. Xcode was successfully installed. I opened my app project, pushed the build button that looks like a play button, and I stared at the status, biting my nails (I know, it\u2019s a bad habit), as it slowly proceeded to\u00a0build.</p>\n<p>\u201cBuild Succeeded.\u201d</p>\n<p>I opened the console, and \u201cidgaf Keisha\u201d was\u00a0printed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/236/0*6HtxzsZxAH18YKtV.jpg\"></figure><h3>The Implementation</h3>\n<p>Now onto what I wanted to implement.</p>\n<p>I didn\u2019t even know how to edit the libraries that I installed into my app. So I started poking around and came across the Pods file. I opened it and then opened the development pods folder. I saw the <strong>RCTAppleHealthKit </strong>folder. It looked promising so I opened\u00a0it.</p>\n<p>What\u2019s up with the\u00a0.h and\u00a0.m\u00a0files?</p>\n<p>I opened the <strong>RCTAppleHealthKit.h</strong>. It didn\u2019t look too bad. I then proceeded to open the <strong>RCTAppleHealthKit.m</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/275/0*DAwbkHKlJnDcUG1D\"></figure><p>Why does Objective-C function declaration syntax look so confusing? It\u2019s like they intentionally wanted to scare people away from Objective-C.</p>\n<p>Example:</p>\n<p><strong>- (void)workout_getRoute:(NSDictionary *)input callback:(RCTResponseSenderBlock)callback;</strong></p>\n<p>Why is the first parameter of the function formatted differently than the subsequent parameters?</p>\n<p>Thank God for Google and people smarter than me willing to post and respond to blogs and forums because I would have been completely lost.</p>\n<p>So I pretty much copied and pasted the <strong>getAnchoredWorkouts</strong> method in the\u00a0<strong>.m </strong>file, changed the name to \u201c<strong>getWorkoutRoute</strong>,\u201d and updated the function logic to log \u201cWazzzzup\u201d in the\u00a0console.</p>\n<p>I rebuild my app and BOOM! I can see the text \u201cWazzzzup\u201d logged on the\u00a0console.</p>\n<h4>Implementation Steps</h4>\n<p>Now for the difficult, but fun part. Using <a href=\"https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/reading_route_data\">this</a> Apple Developer Docs article as a reference, I had to perform these three queries in sequence.</p>\n<ol>\n<li><strong>Get workout</strong></li>\n<li><strong>Get route</strong></li>\n<li><strong>Get locations</strong></li>\n</ol>\n<p>The problem with the article is that the code is stuck on Swift. The language option at the top won\u2019t convert the language to Objective-C. And I\u2019ve never even seen Swift code\u00a0before.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*g8Qwj_nQYHM1LNqq\"><figcaption>Photo by <a href=\"https://unsplash.com/@a_d_s_w?utm_source=medium&amp;utm_medium=referral\">Adrian Swancar</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I had no clue how to export or import classes so I continued to use the method <strong>getAnchoredWorkouts </strong>as a reference.</p>\n<p>I created another method called <strong>workout_getRoute </strong>in the <strong>Methods_Workout</strong> files. This method will be used as the container for the logic to handle fetching the\u00a0data.</p>\n<p>Alright. The first step is to get the <strong>HKWorkout</strong> class. How do I do that? I\u2019ll just see how <strong>getAnchoredWorkouts </strong>does\u00a0it.</p>\n<p>Great. Create another method in the <strong>Queries</strong> files and I\u2019ll call it <strong>\u201cfetchWorkoutById.\u201d </strong>Use the <strong>HKSampleQuery </strong>class to get the <strong>HKWorkout</strong> class.</p>\n<p>Next, I need to get the <strong>HKWorkoutRoute </strong>class that is associated with the <strong>HKWorkout</strong> class, and to do this I need to perform another query using the <strong>HKAnchoredObjectQuery </strong>class.</p>\n<p>So I created another method in the <strong>Queries</strong> files, called it <strong>\u201cfetchWorkoutRoute,\u201d </strong>and inserted the configuration to get the <strong>HKWorkoutRoute</strong>.</p>\n<p>Lastly, I needed to query for the location data associated with the <strong>HKWorkoutRoute</strong> class by using the <strong>HKWorkoutRouteQuery</strong> class. I inserted this logic inside the same method I created previously, <strong>fetchWorkoutRoute.</strong></p>\n<p>Yay! I got a response! I did\u00a0it!</p>\n<p>And obviously, it didn\u2019t go as smoothly as I described above. It literally took me a week to get a successful response. And most of the time I spent figuring out syntax and type\u00a0issues.</p>\n<p>So I integrated this method into my app. I created a new screen, imported a map, and configured it to display the locations on the\u00a0map.</p>\n<p>I rebuilt my project and tested it on my device for a run I did early that\u00a0day.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/413/0*WtODBvapT8BoO0sb.jpg\"></figure><p>I wasn\u2019t done. It wasn\u2019t displaying the whole route. Something was wrong with my configuration.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/354/1*hl3hyMmBRMWj4SCNq44H7w.png\"></figure><p>I promise I ran further than\u00a0this\u2026</p>\n<p>Like every developer would do, I went straight to Google. To my luck, nobody had this issue. And surprisingly, not many people attempted this.</p>\n<p>After two days of debugging, I almost lost hope and was about to throw in the\u00a0towel.</p>\n<blockquote>But then I realized that I was the main character and kept\u00a0going.</blockquote>\n<p>Not even an hour later, I found out what the problem\u00a0was.</p>\n<blockquote>\u201cYour block receives one or more batches of location data. When the block\u2019s done parameter is true, you have received all the\u00a0data.\u201d</blockquote>\n<p>After rereading this statement a million times, I realized my logic inside the data handler block was configured incorrectly.</p>\n<p>I assumed all the location data was passed at once when the done parameter was set to true, but I was wrong. Now that I think about it, this assumption made no\u00a0sense.</p>\n<p>I reconfigured my logic, rebuilt my project, and the whole workout route was displayed nicely on the\u00a0map.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*oGgVJQ8EmzKVCTGc\"><figcaption>Photo by <a href=\"https://unsplash.com/@dre0316?utm_source=medium&amp;utm_medium=referral\">Andre Hunter</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3>Conclusion</h3>\n<p>From start to finish, this process took me a little over a week. And this was my first attempt to contribute to an open-source project. It was also my first time being exposed to Objective-C and working with native modules in React\u00a0Native.</p>\n<p>It was a struggle from start to finish. I spent a lot of time trying to figure out syntaxes, types, class references, and other concepts.</p>\n<blockquote>And I thank all of you programmers for contributing to forums, blogs, dicussions, and whatever deemed helpful to me. You people make programming bearable.</blockquote>\n<p>I was a little intimated at first and I wasn\u2019t sure if I had enough competence to accomplish the task, but I\u2019m glad I took on the challenge. I learned a lot about Objective-C, how to interact with Apple HealthKit, and more about what I\u2019m capable\u00a0of.</p>\n<p>Although the code might not be perfect and probably has issues, I\u2019m happy to at least get a response that I\u2019m looking\u00a0for.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/0*8p5zNvZierBPw5R_.jpg\"></figure><p>You can critique my code here: <a href=\"https://github.com/nguyening20/react-native-health\">My React-Native-Health Fork</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=87aee810d31e\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["libraries", "open-source", "app-development", "code", "react-native"], "id": "87aee810d31e"}, {"title": "How to UseEffect In React", "pubDate": "2022-02-13 16:25:41", "link": "https://medium.com/@athletecoder/how-to-useeffect-in-react-97c4e6dc0a88?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/97c4e6dc0a88", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png", "description": "<h4>A quick tutorial on how to useEffect.</h4><p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to ...</p>", "content": "\n<h4>A quick tutorial on how to useEffect.</h4>\n<p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to perform side\u00a0effects.</p>\n<p>Thanks to the React team, now we have\u00a0<a href=\"https://reactjs.org/docs/hooks-intro.html\"><strong>hooks</strong></a><strong>.</strong></p>\n<blockquote>\n<strong>React hooks </strong>give functions similar features to what is provided to\u00a0classes<strong>.</strong>\n</blockquote>\n<p>But In this post, we are going to focus on a React hook called <a href=\"https://reactjs.org/docs/hooks-effect.html\"><strong>useEffect</strong></a>. A hook that is pretty complex at first, but after today you will get a good grasp on how everything works.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png\"></figure><h3>What Is UseEffect</h3>\n<p><strong>useEffect </strong>is a hook that allows you to perform side effects from a functional component. It serves the same purpose as <strong>componentDidMount</strong>, <strong>componentDidUpdate</strong>, and <strong>componentWillUnmount </strong>lifecycle methods in React classes, but is unified into a single\u00a0API.</p>\n<p>useEffect takes two\u00a0params.</p>\n<ol>\n<li><strong>A function</strong></li>\n<li><strong>An array of dependencies (optional)</strong></li>\n</ol>\n<p>Example.</p>\n<blockquote>useEffect(() =&gt;\u00a0{</blockquote>\n<blockquote>},[${dependency}])</blockquote>\n<h3>What We Are Going To\u00a0Learn</h3>\n<p>I think the best way to understand a coding concept is to see it in action. So we are going to identify how we can use useEffect to interact with these\u00a0events:</p>\n<ol>\n<li><strong>When the component mounts.</strong></li>\n<li><strong>When a state variable\u00a0changes.</strong></li>\n<li><strong>When multiple state variable\u00a0changes.</strong></li>\n<li><strong>When the component unmounts.</strong></li>\n</ol>\n<h3>What You\u00a0Need</h3>\n<ul>\n<li>\n<strong>Computer</strong> (Me: Macbook\u00a0Pro)</li>\n<li>\n<strong>Code Editor </strong>(Me: Visual Studio\u00a0Code)</li>\n<li>\n<strong>Browser </strong>(Me:\u00a0Chrome)</li>\n<li>\n<strong>A shallow understanding of React </strong>(Me:\u00a0IDK)</li>\n</ul>\n<h3>Initiate React\u00a0App</h3>\n<p>Go to your chosen directory, and <strong>npx create-react-app useeffect. </strong>I named this project \u201cuseeffect\u201d, but feel free to choose whatever name you would\u00a0like.</p>\n<p>If you need more clarification on how to set up a react project then follow <a href=\"https://create-react-app.dev/docs/getting-started\">these</a> instructions.</p>\n<h4>UseEffect On\u00a0Mount</h4>\n<p>Once you have everything running.</p>\n<ul>\n<li>Go to App.js (src\u00a0folder).</li>\n<li>Import <strong>useEffect</strong> from <strong>react </strong>at the top of the\u00a0file.</li>\n<li>Inside the function component above the <strong>return</strong> statement call the <strong>useEffect</strong> hook.</li>\n<li>Insert an arrow function as the first argument.</li>\n<li>Inside the arrow function, console.log(\u201cmount\u201d).</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*E4nSwhf8S5NdIEv0zJszpw.png\"></figure><p>In the developer console, you will notice \u201cmount\u201d has been logged. And every time you refresh you will see \u201cmount\u201d reappear in the\u00a0console.</p>\n<blockquote>So far, this tells us that every time the component <strong>App</strong> is mounted onto the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a>, the <strong>useEffect</strong> is\u00a0called.</blockquote>\n<h4>UseEffect On State\u00a0Update</h4>\n<p>Now let's see how <strong>useEffect</strong> interacts when a state variable is\u00a0changed.</p>\n<ul>\n<li>Import the <strong>useState</strong> hook at the top of the\u00a0file.</li>\n<li>Initiate a state variable called <strong>count</strong> with the default value\u00a0zero.</li>\n<li>Erase all the contents inside the <strong>div </strong>with the className \u201cApp.\u201d</li>\n<li>Create a button inside the div that displays the count and increments the count by one when\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aQ9SIHRYMBz7_ILRPuMNxg.png\"></figure><p>With the developer console open, interact with the button, and watch how the useEffect responds to the state\u00a0updates.</p>\n<blockquote>In this case, useEffect is initially called after the component as mounted, and then called every time the count state is\u00a0updated.</blockquote>\n<p>Honestly, this was unexpected for me when I started working with React. By not passing a dependency array, I expected useEffect to only be called once when the component mounts.</p>\n<p>To confirm this, we are going to add another state variable and then see how useEffect reacts to each state\u00a0change.</p>\n<h4>UseEffect On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Initiate another state variable called <strong>\u201cdecrement\u201d</strong>. And set the default value as\u00a0100.</li>\n<li>Inside the div class \u201cApp\u201d, add another button that displays the value of <strong>decrement </strong>and decrements by one when the button is\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U6mmguYKC_7E0vKlBJe02A.png\"></figure><p>Notice when you switch between clicking on both buttons, the <strong>useEffect</strong> will always be\u00a0called.</p>\n<blockquote>useEffect will always be called on any state update when we don\u2019t pass a dependency array.</blockquote>\n<p>Since we didn\u2019t provide a dependency array, useEffect will always be called with any state update occurring inside the component.</p>\n<h4>UseEffect With A Dependency When Multiple States Are\u00a0Updated</h4>\n<p>Let\u2019s say we only want useEffect to update when count updates. Well, we can do that by adding a <strong>dependency array </strong>as a second parameter.</p>\n<ul>\n<li>Add an array as a second parameter to the useEffect hook.</li>\n<li>Add count inside the\u00a0array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6LfAIEF7Cg4UPuJOcZpJyg.png\"></figure><blockquote>useEffect is called after the component has mounted and then called again every time count updates and not decrement. This is accomplished through providing count as a dependency.</blockquote>\n<p>By only passing count as a dependency to the useEffect hook, we are essentially telling useEffect to only be called again when the count state variable\u00a0changes.</p>\n<h4>UseEffect With A Empty Dependency Array When Multiple States Are\u00a0Updated</h4>\n<p>We are going to see what happens when we pass an empty dependency array.</p>\n<ul>\n<li>Remove count from dependency array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/774/1*MlkFB2kJ0s1F2l5rNJ-WlQ.png\"></figure><p>As you interact with both buttons, you will notice that the developer console doesn\u2019t relog \u201cmount.\u201d It only logged \u201cmount\u201d after the component has been\u00a0mounted.</p>\n<blockquote>useEffect with an empty dependency array will only be called once after the component has\u00a0mounted.</blockquote>\n<p>But let\u2019s say that we want to separate the logic between how we handle when count updates and when decrement updates.</p>\n<p>We can achieve this by\u00a0either:</p>\n<ol>\n<li>Adding both states to the dependency array of the useEffect and insert logic in the function to separate the\u00a0process.</li>\n<li><strong><em>Adding another useEffect hook.</em></strong></li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*VUPK-jUct6g6NgYC\"><figcaption>Photo by <a href=\"https://unsplash.com/@benwhitephotography?utm_source=medium&amp;utm_medium=referral\">Ben White</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I know. I know. We can have multiple useEffect hooks inside a component. It took me a while to figure out that this was feasible.</p>\n<h4>Multiple UseEffects On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Create another useEffect hook and add decrement as a dependency.</li>\n<li>Update both console.logs to log their dependency variable.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*F--8bKn-bAhui1UgcSj9qQ.png\"></figure><blockquote>Both useEffects are called after the component has been mounted and are called again depending on when their dependencies update.</blockquote>\n<h4><strong>Perform Actions When The Component Will\u00a0Unmount</strong></h4>\n<p>Lastly, we are going to see how we can add logic before the component will unmount. Similarly to how we would use the lifecycle method <strong>componentWillUnmount </strong>for class components.</p>\n<p>A perfect example of when we would need to implement a process like this is when we subscribe to a listener and want to unsubscribe before the component unmounts.</p>\n<ol>\n<li>Remove the useEffects we previously created.</li>\n<li>Create a new useEffect and inside we will subscribe to the event listener\u00a0\u201cclick.\u201d</li>\n<li>At the end of the function, return a function that removes the listener.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yONhKL9uqHvuj9-yVJOJEg.png\"></figure><blockquote>return a function at the end of the useEffect function to perform actions before a component will unmount. Similarly to the lifecycle method componentWillUnmount.</blockquote>\n<p>Ta-da! Now you know how to perform actions before a component will\u00a0unmount.</p>\n<h3>Summary</h3>\n<p>Here\u2019s what we\u00a0learned:</p>\n<ol>\n<li>useEffect is always called once after the component is\u00a0mounted.</li>\n<li>useEffect <strong>without the dependency</strong> array will always be called again when any state is updated inside the component.</li>\n<li>useEffect with an <strong>empty dependency array</strong> will only be called once after the component is\u00a0mounted.</li>\n<li>useEffect with <strong>one or few dependencies</strong> will only be called again depending on when their dependencies update.</li>\n<li>Multiple useEffects can be declared inside a component.</li>\n<li>To handle actions before the component will unmount, return a function at the end of the useEffect function.</li>\n</ol>\n<p>Congrats on getting to the end! Now you have a better grasp on how to useEffect.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=97c4e6dc0a88\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["react", "useeffect", "react-hook", "learning-to-code", "coding"], "id": "97c4e6dc0a88"}, {"title": "Fetch Your Medium Posts Every day At Midnight", "pubDate": "2022-02-08 15:00:33", "link": "https://medium.com/@athletecoder/fetch-your-medium-posts-every-day-at-midnight-f9c02cac177c?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/f9c02cac177c", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh", "description": "<h4>And create a simple API to update your website\u00a0content.</h4><p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using Node, Express, and\u00a0Cron....</p>", "content": "\n<h3>How To Fetch Your Medium Posts Every day At\u00a0Midnight</h3>\n<h4>And create a simple API to update your website\u00a0content.</h4>\n<p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using <strong>Node</strong>, <strong>Express</strong>, and\u00a0<strong>Cron</strong>.</p>\n<p>I want to automate the process of copying the content from your Medium posts and pasting it to your personal\u00a0website.</p>\n<blockquote>Let\u2019s make our lives easier through automation so we have more free time to do whatever we\u00a0want!</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh\"><figcaption>Photo by <a href=\"https://unsplash.com/@anete_lusina?utm_source=medium&amp;utm_medium=referral\">Anete L\u016bsi\u0146a</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>For this tutorial, I\u2019ll be using <strong>Visual Studio</strong> for my code editor, but feel free to use whatever code editor you\u00a0desire.</p>\n<p>Let\u2019s get right into\u00a0it.</p>\n<h4>If you just want to see the code. Go\u00a0<a href=\"https://github.com/athlete-coder/medium\"><strong>here</strong></a>.</h4>\n<h3>Initiate Project</h3>\n<p>First, create a project folder director. I named my project folder <strong>medium. </strong>Once you have that created, let's init our project by opening the command line and typing <strong><em>npm\u00a0init</em>.</strong></p>\n<blockquote>Ensure that you are in your project director when npm\u00a0initing.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UrujjLmVGqFw9jZp9HYVkg.png\"></figure><p>I accepted all the default parameters when npm initing. After you finish the initiation process create an <strong>index.js</strong> file in the same directory. We will leave it for now and continue with installing our <strong>npm packages</strong>.</p>\n<p>In the command line, type<strong> <em>npm I node-fetch express\u00a0cron</em>.</strong></p>\n<p>After, open your <strong>package.json</strong> file.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gnZNk6poW0Lwl6gY3Yx4kw.png\"></figure><p>Your package.json file should look similar to the screenshot above. If you glance at the \u201c<strong>dependencies\u201d</strong> key, you\u2019ll notice an object with keys associated with the packages we installed and the version\u00a0number.</p>\n<p>This step is important.</p>\n<blockquote><strong>Add another key named \u201ctype\u201d and add \u201cmodule\u201d as its\u00a0value.</strong></blockquote>\n<p>This will allow us to use \u201c<strong>import\u201d </strong>instead<strong> </strong>of \u201c<strong>require\u201d</strong> to import packages into our index.js\u00a0file.</p>\n<p>Nice! We got everything we need to get to the fun part. It\u2019s time to\u00a0code.</p>\n<h3>Get Medium\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open the index.js\u00a0file.</li>\n<li>Import fetch from \u201cnode-fetch.\u201d</li>\n<li>Create an async function called \u201c<strong>getMediumPosts\u201d</strong> that accepts a parameter \u201c<strong>username\u201d</strong>. This function will be used to fetch all your medium posts from the username provided.</li>\n<li>Within the function brackets, let\u2019s write a script that will check if the username name is\u00a0valid.</li>\n<li>Next, within the same function, let\u2019s create a variable called <strong>URL</strong> that assigned a value of the URL we are going to request along with our username.</li>\n</ol>\n<blockquote>\n<strong>https://api.rss2json.com/v1/api.json</strong>?<strong>rss_url=https://medium.com/feed/{@username}</strong>\n</blockquote>\n<ol>\n<li>Next, we use the <strong>fetch</strong> package imported from above to send a request to the URL (created in the previous step) to fetch our profile information. We want the result of the fetch to be the result of this function so we need to add a <strong>return</strong> statement.</li>\n<li>Let\u2019s see the response we get by using <strong>console.log </strong>to log the response of our\u00a0fetch.</li>\n<li>Now, let's call the function with your medium username.</li>\n<li>In the command line run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XT7FSD9K8brp_5XLT_8S6Q.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9Sp_OoeuUN86NjeDe0Pn_g.png\"></figure><p>The terminal should log the response of our fetch function.</p>\n<p>For this tutorial, I only want the medium posts that the user, I, created. Looking at the response, I only need the \u201c<strong>items\u201d </strong>key<strong> </strong>in this response<strong>.</strong></p>\n<p>Next steps (use the next image for reference):</p>\n<ol><li>update the fetch function to only return the <strong>data.items</strong>.</li></ol>\n<p>We successfully created a function that will return the medium posts of the username provided.</p>\n<h3>Process and Store\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>storePosts\u201d</strong> that accepts a parameter \u201c<strong>posts\u201d</strong>. This function will create and store a JSON file of the posts we fetched from the previous function, <strong>getMediumPosts.</strong>\n</li>\n<li>Add <strong><em>Import fs from \u201cfs\u201d</em></strong> at the top of the file. We are going to use this preinstalled package to store the file\u00a0locally.</li>\n<li>Within the <strong>\u201cstorePosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully creates and stores the posts as a JSON file or <strong>rejects</strong> if it fails (reference next\u00a0image).</li>\n<li>Create another async function below<strong> \u201cstorePosts\u201d </strong>named<strong> \u201cprocessPosts\u201d </strong>that doesn\u2019t receive any parameters.</li>\n<li>Within this function, create a variable called <strong>\u201cposts\u201d</strong> that will store the response of the <strong>\u201cgetMediumPosts\u201d. </strong>Ensure you add an <strong>\u201cawait\u201d</strong> to wait for the response before continuing to the next line of\u00a0code.</li>\n<li>Within the same function and on the next line, we now want to pass the variable we created in the previous step to the function <strong>\u201cstorePosts\u201d </strong>to store our posts. Let\u2019s <strong>await</strong> this response.</li>\n<li>Below all of this beautiful code, let's call <strong>\u201cprocessPosts\u201d </strong>to test out our\u00a0logic.</li>\n</ol>\n<p>8. In the terminal run <strong>node\u00a0index.js</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ceFEcvtKt6g8sE3LnXcMTQ.png\"></figure><p>If everything worked properly you should see a <strong>posts.json</strong> file appear in your directory.</p>\n<p>Nice! Now we 3 functions created.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n</ol>\n<h3>Get Stored\u00a0Posts</h3>\n<p>Now, we want to be able to retrieve the posts we stored locally as a JSON\u00a0file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>getPosts\u201d</strong> that has no parameters. This function returns the <strong>posts.json</strong> file the <strong>\u201cstorePosts\u201d </strong>stored\u00a0locally.</li>\n<li>Within the <strong>\u201cgetPosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully retrieves the posts.json file or <strong>rejects</strong> it if it fails (reference next\u00a0image).</li>\n<li>Below this function, let's call <strong>\u201cgetPosts\u201d </strong>and <strong>console.log</strong> our response to ensure it\u2019s working properly.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ytcIyXGBjPd9WF-EHAnX-Q.png\"></figure><p>Nice! It logged our values from the posts.json file.</p>\n<p>Now we added another function to our \u201cfunction created\u201d\u00a0list.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n<li>\n<strong>\u201cgetPosts\u201d\u200a\u2014\u200a</strong>get our locally stored\u00a0posts</li>\n</ol>\n<h3>Create and Serve Our\u00a0Website</h3>\n<p>We are now going to use the <strong>express </strong>package to serve our plain HTML website and create an API that will return our medium\u00a0posts.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Add <strong>import express from \u201cexpress\u201d </strong>at the top of the\u00a0file.</li>\n<li>We need to initiate the express app so below we need to create a variable called <strong>app </strong>and assign it to the response of express (use image as a reference).</li>\n<li>At the bottom, we want our app to listen for a specific port to serve our website. We can use port <strong>3000 </strong>and add a callback function that will console.log that it is listening.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2BEJX3ltuzrHdeS_IgoDRg.png\"></figure><p>You should see listening on port\u00a03000.</p>\n<h4>Routes</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>We are going to create an API route that will send back a response to our client with our posts. Use <strong>\u201capp. get\u201d </strong>to initiate the route we\u00a0need.</li>\n<li>In the <strong>\u201capp. get\u201d</strong> function, for the first parameter, add a string value <strong>\u201c/API/posts/get\u201d. </strong>This will specify the route path the client will need to ping to retrieve the\u00a0posts.</li>\n<li>For the second parameter, add an async callback function (arrow or regular function) with two parameters, <strong>\u201creq\u201d </strong>and\u00a0<strong>\u201cres.\u201d</strong>\n</li>\n<li>In the callback function, call the <strong>\u201cgetPosts\u201d </strong>function.</li>\n<li>\n<strong>\u201cgetPosts\u201d</strong> is an async function that returns a promise. And we need to send the response back to the client. So I\u2019ll use <strong>\u201c.then\u201d </strong>to handle the successful response and <strong>\u201c.catch\u201d </strong>to handle the error if occurred<strong>.</strong>\n</li>\n<li>In the <strong>\u201c.then,\u201d </strong>add a callback function that will send the posts to the client using <strong>\u201cres.send\u201d</strong>.</li>\n<li>In the <strong>\u201c.catch,\u201d </strong>add a callback function that will send a status code of <strong>500 </strong>back to the client to indicate a failed response.</li>\n<li>Next, Using <strong>\u201capp. get\u201d</strong>, we want to create a base route that will send back our website as a response for all other routes. For the first parameter, use <strong>\u201c*\u201d </strong>to indicate all\u00a0routes.</li>\n<li>Add <strong>import path from \u201cpath\u201d </strong>at the top of the file. The path package is preinstalled with node. We will use this package to find the exact location of our <strong>HTML</strong>\u00a0file.</li>\n<li>Above the <strong>\u201capp. get\u201d </strong>we just created, create a variable named root and assign the variable the value of the function <strong>\u201cpath.resolve\u201d </strong>with the parameter of our HTML file, which will be <strong>\u201c./client\u201d.</strong>\n</li>\n<li>We also need to call<strong> \u201cexpress.static(root)\u201d</strong> to serve the static files we will create for our website inside our client folder. Add <strong>\u201capp.use(express.static(root))\u201d </strong>just below the previous step line of\u00a0code.</li>\n<li>In the <strong>\u201capp. get\u201d </strong>and in the second parameter, add a function that will send back the HTML file that we will create later (use the next image as a reference).</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GP1A7jttkivs3g6qsa_KVQ.png\"></figure><p>Congrats on getting this far. Now, have our server set up to the point where it will send back an HTML file that we haven\u2019t quite created yet. Let's get to that\u00a0now.</p>\n<h4>Website</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create a new folder named\u00a0<strong>client</strong>\n</li>\n<li>Inside the folder, create an <strong>index.html</strong> file</li>\n<li>Create another folder inside the client folder we just created named\u00a0<strong>js</strong>\n</li>\n<li>Inside the js folder create a file called<strong> script.js</strong>\n</li>\n<li>Open the <strong>index.html</strong> file, and initiate an HTML document.</li>\n<li>Inside the body tags, add an <strong>h1 </strong>tag and name it \u201cBlog\u201d or whatever you so\u00a0choose.</li>\n<li>Next, add a div with id as\u00a0<strong>root</strong>\n</li>\n<li>Load the js file we created previously by using the script\u00a0tag.</li>\n</ol>\n<blockquote>Shortcut for create an HTML document in VS is\u00a0! and then press\u00a0tab.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*viV8ksFIz72EvZrK08wsag.png\"></figure><p>We got our basic HTML created. Next, we need to update our <strong>script.js </strong>file to fetch our posts from our\u00a0server.</p>\n<p>Open the <strong>script.js </strong>file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called <strong>\u201cgetPosts\u201d</strong>. This function will ping the API we created previously from our server to get our\u00a0posts.</li>\n<li>Within the function, let's use the fetch function (preinstalled) to ping the route <strong>\u201capi/posts/get\u201d </strong>and return the response.</li>\n<li>Let\u2019s call the function and log the output using <strong>console.log</strong>\n</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jFhRJwOFVaQIBFkXF2Cr8Q.png\"></figure><p>Open a browser and go to <strong>localhost:3000. </strong>You should see a page with \u201cBlog\u201d displayed as header\u00a0text.</p>\n<p>In the developer tools, go to the console tab and you should see the posts logged in the\u00a0console.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aFNscSNdTHdCTLlEKf_ujg.png\"></figure><p>Good job! We are almost there. Let\u2019s display the posts on the page with the function <strong>\u201crenderPosts\u201d.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RZRAjPDRFOhjPE_yDfdb0Q.png\"></figure><p>Alright cool. We can see all of our posts displayed on the page now after we refreshed the\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LgZfHzj1SdUJxuJRhRQeuw.png\"></figure><p>One last\u00a0step!</p>\n<h3><strong>Cron Job (Schedule To Fetch Posts At Midnight Every\u00a0Day)</strong></h3>\n<p>Say we want to get the most up-to-date posts. We can do that by creating a job that will run every day at midnight. To do that, we can use the <strong>corn </strong>package that we installed.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open our index.js file to access our server\u00a0code.</li>\n<li>Add <strong>import cron from \u201ccron\u201d </strong>at the top of the\u00a0file.</li>\n<li>Create a variable just below called<strong> \u201cCronJob\u201d </strong>and assign it the value of<strong> \u201ccron.CronJob.\u201d</strong>\n</li>\n<li>Before our API route, create a variable called <strong>\u201cjob\u201d</strong> and assign it the value of the new function <strong>\u201cnew CropJob(\u2026)\u201d </strong>(use the image below for reference)<strong>.</strong>\n</li>\n<li>The first argument will be the time in which the function will be called. We will use <strong>\u201c00 00 * * *\u201d which indicates for every day at midnight. Use </strong><a href=\"https://crontab.guru/\"><strong>crontab</strong></a> for time reference.</li>\n<li>The second argument will be the function that will be called. We want to call <strong>\u201cprocessPosts\u201d </strong>to fetch and store the posts from\u00a0Medium.</li>\n<li>The third argument we can pass\u00a0null</li>\n<li>The fourth argument indicates whether to start the job after initiating. So we will pass\u00a0true.</li>\n<li>Back to the second argument, we want to stop the batch or notify us if an error occurs. In this case, I\u2019ll stop the batch, but you can send yourself a message or email indicating an\u00a0issue.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yPBjIbZcCbWqe2a1u5Rhzg.png\"></figure><h3>Congratulations!</h3>\n<p>You got to the end. That was a long process. Glad you stuck with it all the way through. You now have a server\u00a0that:</p>\n<ol>\n<li><strong>Runs a job at midnight to fetch your Medium posts and stores them\u00a0locally.</strong></li>\n<li><strong>Has an API that will send back a response of the posts that were stored\u00a0locally.</strong></li>\n<li><strong>And serves a basic website that calls the posts API and displays the\u00a0content.</strong></li>\n</ol>\n<p>You can visit the code\u00a0<a href=\"https://github.com/athlete-coder/medium\">here</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f9c02cac177c\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["blog", "express", "code", "automation", "node"], "id": "f9c02cac177c"}, {"title": "What I Experienced Creating An MVP", "pubDate": "2022-02-03 15:35:00", "link": "https://medium.com/@athletecoder/what-i-experienced-creating-an-mvp-3d2702c7a925?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/3d2702c7a925", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9", "description": "<h4>4 months (over 1000\u00a0hours).</h4><p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working...</p>", "content": "\n<h4>4 months (over 1000\u00a0hours).</h4>\n<p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working on this\u00a0app.</p>\n<p>On July 26th, 2021 I began working on the mock-up of my training app. From then to January of 2022, I spent an average of 8 hours a day, over 1000 hours in total, slowly building this app. It was a slow, long, and dreadful process, but it was worth\u00a0it.</p>\n<h3>Issues I had During The\u00a0Process</h3>\n<p>Most of the issues I had were self-inflicting. Not physically, but emotionally and mentally. I would constantly doubt my abilities. I would say to\u00a0myself,</p>\n<blockquote>\u201cNobody is going to like my app. There will be something wrong with it. People are going to make fun of me. It\u2019ll be embarrassing. Is it even worth\u00a0it?\u201d</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9\"><figcaption>Photo by <a href=\"https://unsplash.com/@surface?utm_source=medium&amp;utm_medium=referral\">Surface</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Being a 26-year-old adult living with my mother didn\u2019t help either. In America, at the age of 18, you are expected to be on your own. You go to college and then right into the workforce. You are expected to have your life together before the age of\u00a026.</p>\n<p>So I neglected most of my social life spending most days at home. I would occasionally meet up with a few friends, but I hated when they would ask me, \u201cwhat have you been up to?\u201d And when I would explain to them my endeavors, there would be a confused look on their faces. Then spend emotional energy to get them to understand, but it always ended up in my disappointment.</p>\n<blockquote>Nobody can truly understand your perspective, your vision, your\u00a0dreams.</blockquote>\n<p>But the idea of being alone in my pursuits wasn\u2019t new to me. I felt like most of my life I\u2019ve had dreams that nobody understood or believed in. But I knew that the only opinion that truly mattered was\u00a0mine.</p>\n<h3>How I Coped With My\u00a0Issues</h3>\n<h3>Routine</h3>\n<p>Routine. Routine.\u00a0Routine.</p>\n<p>I briefly outline my routine in my <a href=\"https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3\">previous post</a>, but I can\u2019t emphasize enough how important a routine is and how it significantly improved my well-being and productivity.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*13hu8fUOz6vcN0h2\"><figcaption>Photo by <a href=\"https://unsplash.com/@jazminantoinette?utm_source=medium&amp;utm_medium=referral\">Jazmin Quaynor</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Anxiety improved significantly.</h4>\n<blockquote>Anxiety thrives from the\u00a0unknown.</blockquote>\n<p>I was adventuring into the unknown. I didn\u2019t know exactly what the outcome was going to be. And when I would spend too much time thinking about what could happen, my mind assumed the worse. I was\u00a0scared.</p>\n<blockquote>Adventuring into the unknown isn\u2019t so bad after all if you take it one day at a\u00a0time.</blockquote>\n<p>Taking it one day at a time helped me realize the negative thoughts in my mind were all an illusion. We don\u2019t know what will happen in the\u00a0future.</p>\n<p>Routine gave me a sense of control over my life. I knew what was coming next. Everything was predictable from one task to\u00a0another.</p>\n<p>And when I would rest my head on my pillow at night I could reflect on the day and be proud of myself for the progress I\u00a0made.</p>\n<h4>Productivity stayed consistent.</h4>\n<p>We are habitual creatures. Once a habit is established, the effort to perform the activity becomes effortless. And a routine is, by definition, a sequence of daily\u00a0habits.</p>\n<p>Our habits allow us if chosen and implemented correctly, to minimize <strong><em>decision fatigue</em></strong>. The concept behind decision\u00a0fatigue</p>\n<blockquote>\u201cis that a human\u2019s ability to make decisions can get worse after making many decisions, as their brain will be more fatigued.\u201d\u200a\u2014\u200a<a href=\"https://www.medicalnewstoday.com/articles/decision-fatigue#what-is-it\">Medical News\u00a0Today</a>\n</blockquote>\n<p>I wanted to conserve my energy to be primarily exerted on my work rather than on making decisions on things that can be automated. This robotic way of life is necessary for me to be consistent.</p>\n<p>A work block consists of 90 minutes of work and a 20-minute break. In the article, \u201c<a href=\"https://hubermanlab.com/teach-and-learn-better-with-a-neuroplasticity-super-protocol/\">TEACH &amp; LEARN BETTER WITH A \u201cNEUROPLASTICITY SUPER PROTOCOL</a>\u201d by Andrew Huberman,</p>\n<blockquote>\u201cSolid research shows that 90 minutes is about the longest period we can expect to maintain intense focus and effort toward learning.\u201d\u200a\u2014\u200aAndrew Huberman.</blockquote>\n<p>I came to figure out that 4 sessions a day were my limit. 2 sessions in the morning and 2 sessions in the afternoon.</p>\n<h3><strong>Social Media</strong></h3>\n<p>Have you ever caught yourself mindlessly scrolling through Instagram, Youtube, and/or other social media platforms? Sometimes I will catch myself in the act of scrolling and ask myself, \u201cWhat am I doing?\u201d But then continue to\u00a0scroll.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*FcAzrGhEF5nNIQSG\"><figcaption>Photo by <a href=\"https://unsplash.com/@georgiadelotz?utm_source=medium&amp;utm_medium=referral\">Georgia de Lotz</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Social media can be very helpful, especially Youtube. When an issue arises, Youtube is one of the top places on the internet I go to to find the answer. Youtube is also filled with a ton of aspiring content that motivated me to keep\u00a0going.</p>\n<blockquote>The algorithm is fighting for your attention.</blockquote>\n<p>I\u2019ll be watching a video I intended to watch. And then my curiosity gets the best of me. I\u2019ll scan the recommended videos and I\u2019ll come across an interesting title or thumbnail. Without thinking, I\u2019ll click on that video. And an hour later, I\u2019ll be down this rabbit hole. Repeating the same process over and over\u00a0again.</p>\n<p>Most of us use social media as our entertainment of choice. So I\u2019m not saying to abandon it, but to be aware of when and how you are using\u00a0it.</p>\n<h3>Pros of building an\u00a0MVP</h3>\n<h4>It\u2019s significantly cheaper than outsourcing</h4>\n<p>The tech stack I chose to use was free to get started building. <strong>MongoDB</strong> and <strong>Firebase</strong> have free tiers for development purposes. <strong>Node</strong> and <strong>React Native</strong> are open sources and free to\u00a0use.</p>\n<p>Going live will require some money. For me, I tried my best to spend the least amount of money possible. Below is the list of my monthly expenses after going\u00a0live.</p>\n<ul>\n<li>Heroku ~ $7.00 /\u00a0Month</li>\n<li>MongoDB ~ $50.00 /\u00a0Month</li>\n<li>Domain ~ $5.00 /\u00a0Month</li>\n<li>Custom Email ~ $12 / Month (Maybe, not necessary for\u00a0MVP)</li>\n<li>Apple Developer Program Fee ~ $99 / Year (IOS\u00a0Apps)</li>\n</ul>\n<p>It cost me about $83 per month to have my app live plus a bunch of time to get my product\u00a0built.</p>\n<h4><strong>Becoming more\u00a0skillful</strong></h4>\n<p>Have you ever heard of the compound effect? The concept of it all is that small habits compound over\u00a0time.</p>\n<figure><img alt=\"https://jamesclear.com/continuous-improvement\" src=\"https://cdn-images-1.medium.com/max/700/0*mNyQgkUpXy0v7joC.jpg\"><figcaption><a href=\"https://jamesclear.com/continuous-improvement\">Continuous Improvement:<br>How It Works and How to Master\u00a0It</a></figcaption></figure><blockquote>\u201cIf you get one percent better each day for one year, you\u2019ll end up thirty-seven times better by the time you\u2019re done.\u201d\u200a\u2014<a href=\"https://jamesclear.com/continuous-improvement\"><em>\u200aJames\u00a0Clear</em></a>\n</blockquote>\n<p>The small actions add up over time! So the more I apply my skills daily, the exponentially better I will become at\u00a0it.</p>\n<p>And the more skillful you become the more competitive advantage you have in the labor market. And If the product you build performs decently, then it shows potential clients and/or employers your competence.</p>\n<h4>Identifying Your\u00a0Limits</h4>\n<p>At about 7\u20138 hours of work, my energy levels are significantly drained. It becomes difficult for me to focus and my productivity takes a significant hit.</p>\n<p>There are some days when I would get stuck on a problem and I ended up working 10 hours that day. But I soon found out that I\u2019ve had more trouble sleeping those nights and was less productive the next\u00a0day.</p>\n<p>I don\u2019t know how some people can work beyond 8 hours a day consistently. I guess some people are built differently. I admire\u00a0it.</p>\n<p>I also learned that I can\u2019t function effectively without a sufficient amount of sleep. For me, the least I can get away with was 7 hours. Anything less than 7 hours I\u2019m a zombie. 8 hours of sleep is what I aim\u00a0for.</p>\n<blockquote>Getting enough quality sleep is even more important to our physical and mental health than diet and exercise.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5A-Hc1yNPW7n69fd\"><figcaption>Photo by <a href=\"https://unsplash.com/@twinsfisch?utm_source=medium&amp;utm_medium=referral\">Isabella and Zsa Fischer</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Matthew Walker, a scientist and professor of neuroscience and psychology who specializes in sleep, explains the importance of sleep and the severe side effects if we don\u2019t get enough sleep in his book, \u201c<a href=\"https://www.amazon.com/Why-We-Sleep-Unlocking-Dreams/dp/1501144316\">Why We Sleep</a>.\u201d You should give it a\u00a0read.</p>\n<h3>Cons of building an\u00a0MVP</h3>\n<h4>Time &amp; Hard Work (Expected)</h4>\n<p>Building an app requires discipline over a long time. It is not an easy goal. It\u2019s like a rollercoaster ride.</p>\n<p>It\u2019s somewhat easy at first. You are motivated and inspired by your idea so you start off sprinting. You are eager to get up in the morning so you can get working on your\u00a0project.</p>\n<p>But as you know, motivation fades. And when my motivation faded, about a month in, I relied on my routine to sustain my productivity.</p>\n<p>Expect your motivation to fade and have a plan. For me, my plan was a routine. Like I stated previously, A routine made it significantly easier for me to get myself at my desk and\u00a0work.</p>\n<h4>Money</h4>\n<p>Most products, if not all, require some initial investment. Previously, I stated that it cost me about $83 per month to have my app live. I wouldn\u2019t consider this a large amount of money, but it still cost me\u00a0money.</p>\n<p>The amount of money needed will vary from project to project. Depending on your project, it might require more or less than $83 a month. Beforehand, do your research to ensure you have the proper financial resources to support your\u00a0product.</p>\n<h3>Just Do\u00a0It</h3>\n<p>It will be difficult, but you can do it. Don\u2019t focus too much on the outcome. Focus on what is needed of you daily. Take each day one at a time. Be aware of your thoughts. If you have anxiety issues, established a\u00a0routine.</p>\n<blockquote>The future is nearly unpredictable, so choose to be optimistic about\u00a0it.</blockquote>\n<p>Failure and regret are both painful experiences. But,</p>\n<blockquote>Failure is only temporary. Regret lasts\u00a0forever.</blockquote>\n<p>Failure is an inevitable experience in the process<strong> </strong>of you becoming the best version of yourself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*O7uxEBtk4q5-ZXFr\"><figcaption>Photo by <a href=\"https://unsplash.com/@clarktibbs?utm_source=medium&amp;utm_medium=referral\">Clark Tibbs</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>If you have an idea, and you truly think it\u2019s valuable, then you should go for it. I mean, why not? There\u2019s only good that comes from the experience of trying. And what if everything works out in your favor? Then that will be\u00a0awesome!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3d2702c7a925\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["anxiety", "mvp-development", "overcoming-fear", "habits", "app-development"], "id": "3d2702c7a925"}, {"title": "Turning An Idea Into A Reality", "pubDate": "2022-01-26 15:37:49", "link": "https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/a75af7170fc3", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif", "description": "<h4>I built an\u00a0app</h4><p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new f...</p>", "content": "\n<h4>I built an\u00a0app</h4>\n<p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new favorite. I could feel the soreness in my bum beginning to kick in from sitting on a hard wooden chair for over 2 hours. I suddenly notice my teeth gnawing at a fingernail. I pull my finger away from my mouth and lay them on the\u00a0table.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif\"><figcaption>Photo by <a href=\"https://unsplash.com/@romanbozhko?utm_source=medium&amp;utm_medium=referral\">Roman Bozhko</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I took my gaze away from the screen and moved it to the view in front of me. The sun beamed through the glass windows. The light faded to a dim from the left side of the coffee shop to the right side. There were tables neatly placed around the coffee bar below. The shop was wrapped around with roads and trees. The different shades of green elevated the sense of life. People on motorbikes would constantly speed past. Most were single riders, but some would have multiple passengers. On occasion, I would see riders with multiple boxes stacked on top of each other balancing on the back of the bike. How did they not fall\u00a0over?</p>\n<p>\u201cWhat are you going to do with your life,\u201d I asked\u00a0myself.</p>\n<p>This question seemed to be a common occurrence at the time. I would typically tell myself that I\u2019m going to be a professional football player. But, when I would tell myself that I truly didn\u2019t believe it. The dream of playing professional football seemed unattainable. It seemed beyond my reach. I lost\u00a0faith.</p>\n<p>After what felt like hours, but was only a couple of minutes, the space between each thought began to expand. And then suddenly It became quiet inside my head for a long brief\u00a0moment.</p>\n<p>\u201cWhat if I can create a tool and/or service tailored to athletes, like myself, to help them enhance their training?\u201d</p>\n<p>And that\u2019s the first time the idea popped into my head. At the time, in 2019, I was on my soul-searching trip through Vietnam. The issue was I didn\u2019t know how to bring that idea to life. I didn\u2019t have enough money. Most of the money I made was already invested in this trip. And I didn\u2019t have the knowledge or skills to build it on my own. I only knew the basics of HTML, CSS, and JavaScript (JS).</p>\n<p>Fast forward to the end of January of 2020 (I abandoned the idea for a while), I was in Louisville, Kentucky employed as an IT Consultant. Most days I would arrive at the office about 10 minutes before 9, place a k-cup in the coffee machine, ponder what I\u2019m doing with myself, grab my coffee and then walk over to my desk. I was hardly engaged with what I was doing, so I found myself constantly wondering about life. But one day, the idea reappeared in my thoughts. I felt determined. I told myself I had nothing to lose and all the world to\u00a0gain.</p>\n<p>I brainstormed a couple of strategic options. I came down to two. I could wait until I had enough money to invest in contractors to build it for me, or I could teach myself the skills to do it on my own. The journey to do it on my own had less risk and more benefits if failure was the outcome. I also knew it was going to be a challenge.</p>\n<p>I typed into the Google search bar, \u201cHow to build an application from scratch?\u201d \u201cHave an idea, create a plan, and execute.\u201d I already knew most of these things. I was asking the wrong questions. I needed to know exactly what tech stack I was going to use and how I was going to apply them.<br> I had experience with JS so I stuck with it. NodeJs as the backend environment and JS, HTML, and CSS as the frontend. Doing additional research on frontend development, I stumbled upon JS frameworks. What I learned is that JS frameworks are prewritten JS code that allows for easier development. There were multiple JS frameworks to choose from; <strong>React</strong>, Vue and Angular were the most popular. <a href=\"https://reactjs.org/\"><strong>React</strong></a> seemed the most appealing based on popularity, so I decided to go with\u00a0it.</p>\n<p>I typed, \u201cTutorials on React,\u201d into Google\u2019s search bar. <a href=\"http://udemy.com/\">Udemy</a> was the first result. It was a website I\u2019ve heard about before through numerous ads. I arrived on Udemy\u2019s website, created an account, and found a course called, \u201cModern React and Redux.\u201d I didn\u2019t know what Redux was, but it had plenty of reviews and almost a 5-star rating so I bought\u00a0it.</p>\n<p>5:30 the next morning, and I\u2019m in my apartment sitting in front of my laptop computer screen starting the first lesson of \u201cModern React and Redux.\u201d And for the next month and a half, I would spend most mornings, for an hour or so, tackling each instructional video.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*a3L7KQrSEtxsa2-c\"><figcaption>Photo by <a href=\"https://unsplash.com/@altumcode?utm_source=medium&amp;utm_medium=referral\">AltumCode</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>After completing the course, I had a good understanding of the React Framework and how <a href=\"https://react-redux.js.org/\">Redux</a> integrated with it. But I needed to apply what I learned to\u00a0reality.</p>\n<p>A good buddy of mine recently started a podcast that focused on reviewing books and beers. It was the perfect opportunity for me to apply what I learned so I created a website for\u00a0them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FEMaWPMT6h-QopBZ_OUQFg.png\"><figcaption>The homepage of the website I created for the\u00a0podcast</figcaption></figure><p>The website had a store, blog, admin panel, and basic pages that every website needs. The store was the most difficult to implement. <a href=\"https://stripe.com/\"><strong>Stripe\u2019s API</strong></a> (payment processor) documentation was very easy to go through, but figuring out how to configure the process from item to cart, and then cart to checkout was difficult.</p>\n<p>I continued building other websites for leisure. Coming up with random ideas and then trying to bring those ideas to life. Then one day, I stumbled upon React Native when I was scrolling through Youtube. <a href=\"https://reactnative.dev/\">React Native</a> is a framework used to develop mobile and web applications, but mainly used for mobile applications.</p>\n<p>\u201cWhy not?\u201d I asked myself. I already have experience with React. The world is going towards mobile devices if it hasn\u2019t already. It will be a useful skill to have under my belt. Plus, my training idea will need to be mobile-first.</p>\n<p>I googled \u201cReact Native,\u201d navigated to their website, clicked on the \u201cGet Started\u201d button on the homepage, and then skimmed through their documentation. For newbies, like myself, the documentation recommended using <a href=\"https://expo.dev/\"><strong>Expo CLI</strong></a> to get started. So I dove right into\u00a0it.</p>\n<p>For my first mobile application with React Native, I built a social networking application called, \u201cLetsLink.\u201d It was an app where you were only shown other users within a 1-mile radius. It was complex, but I learned more about how to interact with APIs and honed my skills in React and\u00a0Redux.</p>\n<p>In my next app, I was a little intimidated at first, but I ejected my Expo CLI app into a bare workflow environment. Soon I came to realize it wasn\u2019t as bad as I thought, and that Google is my best\u00a0friend.</p>\n<p>In July of 2021, I was in San Diego, CA visiting my brother. It was a sunny afternoon and I was taking a stroll along the beach. A couple of hours prior, I submitted my first app to the app store. It was a <a href=\"https://habt-b0f23.web.app/\">habit tracker app</a>. I felt confident. \u201cI\u2019m ready,\u201d I whispered to myself with the thought of my main idea in\u00a0mind.</p>\n<p>The following day at about 6:30 AM, I walked over, with a black coffee in hand, to my brother\u2019s standing desk with my laptop resting on top of it. I opened the lid of the laptop and took a couple of sips of coffee while I waited for the laptop to boot up. When the login screen displayed I took one last sip of my coffee and rested the coffee mug to the left of my laptop. I typed in my login credentials.</p>\n<p>I spent the next 4 hours or so brainstorming the functionalities of the app, and creating a broad timeline of the process from scratch to launch. I planned for the app to be on the app store towards the end of December of 2021, so that gave me about 4\u00a0months.</p>\n<p>That same afternoon, after working out and spending some downtime with family and friends, I found myself back at the desk working on designing the prototype in <a href=\"https://www.figma.com/\">Figma</a> (a prototype software). I spent the next week designing a prototype of the app. Design isn\u2019t my strong suit, but I tried my best to say the\u00a0least.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*IS1mh5NZIwsxM5hg\"><figcaption>Photo by <a href=\"https://unsplash.com/@balazsketyi?utm_source=medium&amp;utm_medium=referral\">Bal\u00e1zs K\u00e9tyi</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I was looking outside the airplane window on my way back to Seattle, WA. Being above the clouds makes you wonder if you could just choose to see the brighter side of things. Sometimes we get so caught up below the clouds that we don\u2019t even wonder what\u2019s above\u00a0it.</p>\n<p>Is this going to work? Are people going to like it? What if it fails? It\u2019s going to be embarrassing.</p>\n<p>These negative self-degrading thoughts make a frequent occurrence throughout my pursuit for the next couple of months. I had no choice but to implement a routine to keep these thoughts at\u00a0bay.</p>\n<p>I was normally awake at 6:00 AM. Made coffee, took out the dogs, meditated for 10 minutes, and worked from 6:30 -7:00 AM until about 10:00 AM\u200a\u2014\u200a11:00 AM. I worked in 90-minute intervals with 20-minute breaks in between. Then I would eat breakfast, work out, and be back at it at around 2:00 -3:00 PM until about 6:00\u20137:00 PM. I would have dinner, and then, depending on how I was feeling, I would squeeze in another hour or so before I would get ready for bed. I was in bed at around 9:00 PM and asleep at 10:00 PM. I was consistent most days, but obviously, life and procrastination would sometimes get in the\u00a0way.</p>\n<p>It\u2019s always the first couple of minutes of my work session where my mind would complain about how I don\u2019t want to be doing this right now. And then suddenly, my mind would transition into a deep state of focus on the task at hand. I started to enjoy diving into those work sessions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-umRWDH1aVlAH_7C\"><figcaption>Photo by <a href=\"https://unsplash.com/@avirichards?utm_source=medium&amp;utm_medium=referral\">Avi Richards</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>It\u2019s Mid-December and I had an overwhelming amount of work to be done. I\u2019ve made significant progress, but there was a lot of design and content configuration that needed to be done. I audibled and planned for the app to be completed by the end of December and to hopefully submit the app towards the beginning of\u00a0January.</p>\n<p>January 10th, I was in Denver, Colorado visiting a friend I met in college. It was an early Friday morning, the sun beamed through the window and onto my face. I\u2019m standing at a tall round wooden table with my laptop resting on top of it. I feel a sense of relief as I hit the submit button. My app is finally done. For\u00a0now.</p>\n<p>This was only the start of this app\u2019s journey. This first release was just the MVP (minimal viable product) version. More like a beta version. This app still needs a lot of work. I know things didn\u2019t go exactly how I planned in July, but I\u2019m glad I accomplished my main goal and that was to complete and submit the\u00a0app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BncmMbXS9mSNgh6H\"><figcaption>Photo by <a href=\"https://unsplash.com/@nullplus?utm_source=medium&amp;utm_medium=referral\">Razvan Chisu</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Feel free to check out the app I created <a href=\"https://www.softlete.com/\">here</a>. Let me know what you think through the feedback form on the\u00a0website.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a75af7170fc3\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["entrepreneurship", "ideas", "app-development", "fear-of-failure", "coding"], "id": "a75af7170fc3"}, {"title": "Contributing To A Open Source Library", "pubDate": "2022-02-17 15:48:05", "link": "https://medium.com/@athletecoder/my-first-attempt-to-contribute-to-a-open-source-library-87aee810d31e?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/87aee810d31e", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png", "description": "<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4><p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things....</p>", "content": "\n<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4>\n<p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things.</p>\n<p>But recently, I attempted to implement a new feature for the <a href=\"https://github.com/agencyenterprise/react-native-health\">React-Native-Health</a> library. Its intended purpose is to interact with the Apple HealthKit for\u00a0iOS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png\"></figure><h3>Backstory</h3>\n<p>I built this app called <a href=\"https://www.softlete.com/\">softlete</a> with the <a href=\"https://reactnative.dev/\">React-Native</a> framework. It\u2019s a training tool for athletes (anyone who physically trains for any purpose) that helps them organize their training while also providing meaningful resources, information, and feedback. It\u2019s still in its development phase.</p>\n<p>With the React-Native-Health library installed, I immediately have the configuration set up (permissions and methods) to retrieve data from Apple HealthKit.</p>\n<p>Most of the methods provided by the library satisfy my needs, but there is a method that is missing for a few key features I want to implement.</p>\n<h4>Key Features</h4>\n<p>A couple of key features I want to add\u00a0are:</p>\n<ol>\n<li>Display the user\u2019s workout route on a\u00a0map.</li>\n<li>Provide in-depth performance statistics and feedback for a user\u2019s workout\u00a0route.</li>\n</ol>\n<p>Plenty of fitness apps already offer these features, like Strava, so I thought I might as well\u00a0too.</p>\n<p>The issue is the React-Native-Health library doesn\u2019t have a method to accomplish this. And to implement these features, I need access to the workout route\u00a0data.</p>\n<p>So I was like, \u201cyou know what. I\u2019ll try to do it myself.\u201d And that\u2019s exactly what I\u00a0did.</p>\n<h3>The Journey</h3>\n<p>Beware, I\u2019m unfamiliar with native iOS development. I\u2019ve never attempted to contribute to an open-source library. So I\u2019m stepping into unknown territory.</p>\n<p>I had no idea how to export native modules in React Native. So, like what everyone would do, I headed straight to the motherland (React docs) and walked through the <a href=\"https://reactnative.dev/docs/native-modules-intro\">native modules documentation</a>.</p>\n<p>I followed \u201cexactly\u201d the steps in the documentation to add the demo method into my app. And\u00a0\u2026 I completely broke it. I spend the whole day debugging, looking through forums, blogs, and everything you can think\u00a0of.</p>\n<p>Nothing.</p>\n<p>After banging my head on the keyboard a couple of times. I took a leap of faith and assumed it was Xcode (It definitely wasn\u2019t Xcode itself, but my clumsiness). I uninstalled and reinstalled it. That night, I laid in bed, stared at the ceiling, and regretted my decision to attempt\u00a0this.</p>\n<p>I woke up, relieved myself, and sprinted straight to my computer. Xcode was successfully installed. I opened my app project, pushed the build button that looks like a play button, and I stared at the status, biting my nails (I know, it\u2019s a bad habit), as it slowly proceeded to\u00a0build.</p>\n<p>\u201cBuild Succeeded.\u201d</p>\n<p>I opened the console, and \u201cidgaf Keisha\u201d was\u00a0printed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/236/0*6HtxzsZxAH18YKtV.jpg\"></figure><h3>The Implementation</h3>\n<p>Now onto what I wanted to implement.</p>\n<p>I didn\u2019t even know how to edit the libraries that I installed into my app. So I started poking around and came across the Pods file. I opened it and then opened the development pods folder. I saw the <strong>RCTAppleHealthKit </strong>folder. It looked promising so I opened\u00a0it.</p>\n<p>What\u2019s up with the\u00a0.h and\u00a0.m\u00a0files?</p>\n<p>I opened the <strong>RCTAppleHealthKit.h</strong>. It didn\u2019t look too bad. I then proceeded to open the <strong>RCTAppleHealthKit.m</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/275/0*DAwbkHKlJnDcUG1D\"></figure><p>Why does Objective-C function declaration syntax look so confusing? It\u2019s like they intentionally wanted to scare people away from Objective-C.</p>\n<p>Example:</p>\n<p><strong>- (void)workout_getRoute:(NSDictionary *)input callback:(RCTResponseSenderBlock)callback;</strong></p>\n<p>Why is the first parameter of the function formatted differently than the subsequent parameters?</p>\n<p>Thank God for Google and people smarter than me willing to post and respond to blogs and forums because I would have been completely lost.</p>\n<p>So I pretty much copied and pasted the <strong>getAnchoredWorkouts</strong> method in the\u00a0<strong>.m </strong>file, changed the name to \u201c<strong>getWorkoutRoute</strong>,\u201d and updated the function logic to log \u201cWazzzzup\u201d in the\u00a0console.</p>\n<p>I rebuild my app and BOOM! I can see the text \u201cWazzzzup\u201d logged on the\u00a0console.</p>\n<h4>Implementation Steps</h4>\n<p>Now for the difficult, but fun part. Using <a href=\"https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/reading_route_data\">this</a> Apple Developer Docs article as a reference, I had to perform these three queries in sequence.</p>\n<ol>\n<li><strong>Get workout</strong></li>\n<li><strong>Get route</strong></li>\n<li><strong>Get locations</strong></li>\n</ol>\n<p>The problem with the article is that the code is stuck on Swift. The language option at the top won\u2019t convert the language to Objective-C. And I\u2019ve never even seen Swift code\u00a0before.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*g8Qwj_nQYHM1LNqq\"><figcaption>Photo by <a href=\"https://unsplash.com/@a_d_s_w?utm_source=medium&amp;utm_medium=referral\">Adrian Swancar</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I had no clue how to export or import classes so I continued to use the method <strong>getAnchoredWorkouts </strong>as a reference.</p>\n<p>I created another method called <strong>workout_getRoute </strong>in the <strong>Methods_Workout</strong> files. This method will be used as the container for the logic to handle fetching the\u00a0data.</p>\n<p>Alright. The first step is to get the <strong>HKWorkout</strong> class. How do I do that? I\u2019ll just see how <strong>getAnchoredWorkouts </strong>does\u00a0it.</p>\n<p>Great. Create another method in the <strong>Queries</strong> files and I\u2019ll call it <strong>\u201cfetchWorkoutById.\u201d </strong>Use the <strong>HKSampleQuery </strong>class to get the <strong>HKWorkout</strong> class.</p>\n<p>Next, I need to get the <strong>HKWorkoutRoute </strong>class that is associated with the <strong>HKWorkout</strong> class, and to do this I need to perform another query using the <strong>HKAnchoredObjectQuery </strong>class.</p>\n<p>So I created another method in the <strong>Queries</strong> files, called it <strong>\u201cfetchWorkoutRoute,\u201d </strong>and inserted the configuration to get the <strong>HKWorkoutRoute</strong>.</p>\n<p>Lastly, I needed to query for the location data associated with the <strong>HKWorkoutRoute</strong> class by using the <strong>HKWorkoutRouteQuery</strong> class. I inserted this logic inside the same method I created previously, <strong>fetchWorkoutRoute.</strong></p>\n<p>Yay! I got a response! I did\u00a0it!</p>\n<p>And obviously, it didn\u2019t go as smoothly as I described above. It literally took me a week to get a successful response. And most of the time I spent figuring out syntax and type\u00a0issues.</p>\n<p>So I integrated this method into my app. I created a new screen, imported a map, and configured it to display the locations on the\u00a0map.</p>\n<p>I rebuilt my project and tested it on my device for a run I did early that\u00a0day.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/413/0*WtODBvapT8BoO0sb.jpg\"></figure><p>I wasn\u2019t done. It wasn\u2019t displaying the whole route. Something was wrong with my configuration.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/354/1*hl3hyMmBRMWj4SCNq44H7w.png\"></figure><p>I promise I ran further than\u00a0this\u2026</p>\n<p>Like every developer would do, I went straight to Google. To my luck, nobody had this issue. And surprisingly, not many people attempted this.</p>\n<p>After two days of debugging, I almost lost hope and was about to throw in the\u00a0towel.</p>\n<blockquote>But then I realized that I was the main character and kept\u00a0going.</blockquote>\n<p>Not even an hour later, I found out what the problem\u00a0was.</p>\n<blockquote>\u201cYour block receives one or more batches of location data. When the block\u2019s done parameter is true, you have received all the\u00a0data.\u201d</blockquote>\n<p>After rereading this statement a million times, I realized my logic inside the data handler block was configured incorrectly.</p>\n<p>I assumed all the location data was passed at once when the done parameter was set to true, but I was wrong. Now that I think about it, this assumption made no\u00a0sense.</p>\n<p>I reconfigured my logic, rebuilt my project, and the whole workout route was displayed nicely on the\u00a0map.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*oGgVJQ8EmzKVCTGc\"><figcaption>Photo by <a href=\"https://unsplash.com/@dre0316?utm_source=medium&amp;utm_medium=referral\">Andre Hunter</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3>Conclusion</h3>\n<p>From start to finish, this process took me a little over a week. And this was my first attempt to contribute to an open-source project. It was also my first time being exposed to Objective-C and working with native modules in React\u00a0Native.</p>\n<p>It was a struggle from start to finish. I spent a lot of time trying to figure out syntaxes, types, class references, and other concepts.</p>\n<blockquote>And I thank all of you programmers for contributing to forums, blogs, dicussions, and whatever deemed helpful to me. You people make programming bearable.</blockquote>\n<p>I was a little intimated at first and I wasn\u2019t sure if I had enough competence to accomplish the task, but I\u2019m glad I took on the challenge. I learned a lot about Objective-C, how to interact with Apple HealthKit, and more about what I\u2019m capable\u00a0of.</p>\n<p>Although the code might not be perfect and probably has issues, I\u2019m happy to at least get a response that I\u2019m looking\u00a0for.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/0*8p5zNvZierBPw5R_.jpg\"></figure><p>You can critique my code here: <a href=\"https://github.com/nguyening20/react-native-health\">My React-Native-Health Fork</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=87aee810d31e\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["libraries", "open-source", "app-development", "code", "react-native"], "id": "87aee810d31e"}, {"title": "How to UseEffect In React", "pubDate": "2022-02-13 16:25:41", "link": "https://medium.com/@athletecoder/how-to-useeffect-in-react-97c4e6dc0a88?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/97c4e6dc0a88", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png", "description": "<h4>A quick tutorial on how to useEffect.</h4><p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to ...</p>", "content": "\n<h4>A quick tutorial on how to useEffect.</h4>\n<p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to perform side\u00a0effects.</p>\n<p>Thanks to the React team, now we have\u00a0<a href=\"https://reactjs.org/docs/hooks-intro.html\"><strong>hooks</strong></a><strong>.</strong></p>\n<blockquote>\n<strong>React hooks </strong>give functions similar features to what is provided to\u00a0classes<strong>.</strong>\n</blockquote>\n<p>But In this post, we are going to focus on a React hook called <a href=\"https://reactjs.org/docs/hooks-effect.html\"><strong>useEffect</strong></a>. A hook that is pretty complex at first, but after today you will get a good grasp on how everything works.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png\"></figure><h3>What Is UseEffect</h3>\n<p><strong>useEffect </strong>is a hook that allows you to perform side effects from a functional component. It serves the same purpose as <strong>componentDidMount</strong>, <strong>componentDidUpdate</strong>, and <strong>componentWillUnmount </strong>lifecycle methods in React classes, but is unified into a single\u00a0API.</p>\n<p>useEffect takes two\u00a0params.</p>\n<ol>\n<li><strong>A function</strong></li>\n<li><strong>An array of dependencies (optional)</strong></li>\n</ol>\n<p>Example.</p>\n<blockquote>useEffect(() =&gt;\u00a0{</blockquote>\n<blockquote>},[${dependency}])</blockquote>\n<h3>What We Are Going To\u00a0Learn</h3>\n<p>I think the best way to understand a coding concept is to see it in action. So we are going to identify how we can use useEffect to interact with these\u00a0events:</p>\n<ol>\n<li><strong>When the component mounts.</strong></li>\n<li><strong>When a state variable\u00a0changes.</strong></li>\n<li><strong>When multiple state variable\u00a0changes.</strong></li>\n<li><strong>When the component unmounts.</strong></li>\n</ol>\n<h3>What You\u00a0Need</h3>\n<ul>\n<li>\n<strong>Computer</strong> (Me: Macbook\u00a0Pro)</li>\n<li>\n<strong>Code Editor </strong>(Me: Visual Studio\u00a0Code)</li>\n<li>\n<strong>Browser </strong>(Me:\u00a0Chrome)</li>\n<li>\n<strong>A shallow understanding of React </strong>(Me:\u00a0IDK)</li>\n</ul>\n<h3>Initiate React\u00a0App</h3>\n<p>Go to your chosen directory, and <strong>npx create-react-app useeffect. </strong>I named this project \u201cuseeffect\u201d, but feel free to choose whatever name you would\u00a0like.</p>\n<p>If you need more clarification on how to set up a react project then follow <a href=\"https://create-react-app.dev/docs/getting-started\">these</a> instructions.</p>\n<h4>UseEffect On\u00a0Mount</h4>\n<p>Once you have everything running.</p>\n<ul>\n<li>Go to App.js (src\u00a0folder).</li>\n<li>Import <strong>useEffect</strong> from <strong>react </strong>at the top of the\u00a0file.</li>\n<li>Inside the function component above the <strong>return</strong> statement call the <strong>useEffect</strong> hook.</li>\n<li>Insert an arrow function as the first argument.</li>\n<li>Inside the arrow function, console.log(\u201cmount\u201d).</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*E4nSwhf8S5NdIEv0zJszpw.png\"></figure><p>In the developer console, you will notice \u201cmount\u201d has been logged. And every time you refresh you will see \u201cmount\u201d reappear in the\u00a0console.</p>\n<blockquote>So far, this tells us that every time the component <strong>App</strong> is mounted onto the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a>, the <strong>useEffect</strong> is\u00a0called.</blockquote>\n<h4>UseEffect On State\u00a0Update</h4>\n<p>Now let's see how <strong>useEffect</strong> interacts when a state variable is\u00a0changed.</p>\n<ul>\n<li>Import the <strong>useState</strong> hook at the top of the\u00a0file.</li>\n<li>Initiate a state variable called <strong>count</strong> with the default value\u00a0zero.</li>\n<li>Erase all the contents inside the <strong>div </strong>with the className \u201cApp.\u201d</li>\n<li>Create a button inside the div that displays the count and increments the count by one when\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aQ9SIHRYMBz7_ILRPuMNxg.png\"></figure><p>With the developer console open, interact with the button, and watch how the useEffect responds to the state\u00a0updates.</p>\n<blockquote>In this case, useEffect is initially called after the component as mounted, and then called every time the count state is\u00a0updated.</blockquote>\n<p>Honestly, this was unexpected for me when I started working with React. By not passing a dependency array, I expected useEffect to only be called once when the component mounts.</p>\n<p>To confirm this, we are going to add another state variable and then see how useEffect reacts to each state\u00a0change.</p>\n<h4>UseEffect On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Initiate another state variable called <strong>\u201cdecrement\u201d</strong>. And set the default value as\u00a0100.</li>\n<li>Inside the div class \u201cApp\u201d, add another button that displays the value of <strong>decrement </strong>and decrements by one when the button is\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U6mmguYKC_7E0vKlBJe02A.png\"></figure><p>Notice when you switch between clicking on both buttons, the <strong>useEffect</strong> will always be\u00a0called.</p>\n<blockquote>useEffect will always be called on any state update when we don\u2019t pass a dependency array.</blockquote>\n<p>Since we didn\u2019t provide a dependency array, useEffect will always be called with any state update occurring inside the component.</p>\n<h4>UseEffect With A Dependency When Multiple States Are\u00a0Updated</h4>\n<p>Let\u2019s say we only want useEffect to update when count updates. Well, we can do that by adding a <strong>dependency array </strong>as a second parameter.</p>\n<ul>\n<li>Add an array as a second parameter to the useEffect hook.</li>\n<li>Add count inside the\u00a0array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6LfAIEF7Cg4UPuJOcZpJyg.png\"></figure><blockquote>useEffect is called after the component has mounted and then called again every time count updates and not decrement. This is accomplished through providing count as a dependency.</blockquote>\n<p>By only passing count as a dependency to the useEffect hook, we are essentially telling useEffect to only be called again when the count state variable\u00a0changes.</p>\n<h4>UseEffect With A Empty Dependency Array When Multiple States Are\u00a0Updated</h4>\n<p>We are going to see what happens when we pass an empty dependency array.</p>\n<ul>\n<li>Remove count from dependency array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/774/1*MlkFB2kJ0s1F2l5rNJ-WlQ.png\"></figure><p>As you interact with both buttons, you will notice that the developer console doesn\u2019t relog \u201cmount.\u201d It only logged \u201cmount\u201d after the component has been\u00a0mounted.</p>\n<blockquote>useEffect with an empty dependency array will only be called once after the component has\u00a0mounted.</blockquote>\n<p>But let\u2019s say that we want to separate the logic between how we handle when count updates and when decrement updates.</p>\n<p>We can achieve this by\u00a0either:</p>\n<ol>\n<li>Adding both states to the dependency array of the useEffect and insert logic in the function to separate the\u00a0process.</li>\n<li><strong><em>Adding another useEffect hook.</em></strong></li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*VUPK-jUct6g6NgYC\"><figcaption>Photo by <a href=\"https://unsplash.com/@benwhitephotography?utm_source=medium&amp;utm_medium=referral\">Ben White</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I know. I know. We can have multiple useEffect hooks inside a component. It took me a while to figure out that this was feasible.</p>\n<h4>Multiple UseEffects On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Create another useEffect hook and add decrement as a dependency.</li>\n<li>Update both console.logs to log their dependency variable.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*F--8bKn-bAhui1UgcSj9qQ.png\"></figure><blockquote>Both useEffects are called after the component has been mounted and are called again depending on when their dependencies update.</blockquote>\n<h4><strong>Perform Actions When The Component Will\u00a0Unmount</strong></h4>\n<p>Lastly, we are going to see how we can add logic before the component will unmount. Similarly to how we would use the lifecycle method <strong>componentWillUnmount </strong>for class components.</p>\n<p>A perfect example of when we would need to implement a process like this is when we subscribe to a listener and want to unsubscribe before the component unmounts.</p>\n<ol>\n<li>Remove the useEffects we previously created.</li>\n<li>Create a new useEffect and inside we will subscribe to the event listener\u00a0\u201cclick.\u201d</li>\n<li>At the end of the function, return a function that removes the listener.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yONhKL9uqHvuj9-yVJOJEg.png\"></figure><blockquote>return a function at the end of the useEffect function to perform actions before a component will unmount. Similarly to the lifecycle method componentWillUnmount.</blockquote>\n<p>Ta-da! Now you know how to perform actions before a component will\u00a0unmount.</p>\n<h3>Summary</h3>\n<p>Here\u2019s what we\u00a0learned:</p>\n<ol>\n<li>useEffect is always called once after the component is\u00a0mounted.</li>\n<li>useEffect <strong>without the dependency</strong> array will always be called again when any state is updated inside the component.</li>\n<li>useEffect with an <strong>empty dependency array</strong> will only be called once after the component is\u00a0mounted.</li>\n<li>useEffect with <strong>one or few dependencies</strong> will only be called again depending on when their dependencies update.</li>\n<li>Multiple useEffects can be declared inside a component.</li>\n<li>To handle actions before the component will unmount, return a function at the end of the useEffect function.</li>\n</ol>\n<p>Congrats on getting to the end! Now you have a better grasp on how to useEffect.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=97c4e6dc0a88\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["react", "useeffect", "react-hook", "learning-to-code", "coding"], "id": "97c4e6dc0a88"}, {"title": "Fetch Your Medium Posts Every day At Midnight", "pubDate": "2022-02-08 15:00:33", "link": "https://medium.com/@athletecoder/fetch-your-medium-posts-every-day-at-midnight-f9c02cac177c?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/f9c02cac177c", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh", "description": "<h4>And create a simple API to update your website\u00a0content.</h4><p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using Node, Express, and\u00a0Cron....</p>", "content": "\n<h3>How To Fetch Your Medium Posts Every day At\u00a0Midnight</h3>\n<h4>And create a simple API to update your website\u00a0content.</h4>\n<p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using <strong>Node</strong>, <strong>Express</strong>, and\u00a0<strong>Cron</strong>.</p>\n<p>I want to automate the process of copying the content from your Medium posts and pasting it to your personal\u00a0website.</p>\n<blockquote>Let\u2019s make our lives easier through automation so we have more free time to do whatever we\u00a0want!</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh\"><figcaption>Photo by <a href=\"https://unsplash.com/@anete_lusina?utm_source=medium&amp;utm_medium=referral\">Anete L\u016bsi\u0146a</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>For this tutorial, I\u2019ll be using <strong>Visual Studio</strong> for my code editor, but feel free to use whatever code editor you\u00a0desire.</p>\n<p>Let\u2019s get right into\u00a0it.</p>\n<h4>If you just want to see the code. Go\u00a0<a href=\"https://github.com/athlete-coder/medium\"><strong>here</strong></a>.</h4>\n<h3>Initiate Project</h3>\n<p>First, create a project folder director. I named my project folder <strong>medium. </strong>Once you have that created, let's init our project by opening the command line and typing <strong><em>npm\u00a0init</em>.</strong></p>\n<blockquote>Ensure that you are in your project director when npm\u00a0initing.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UrujjLmVGqFw9jZp9HYVkg.png\"></figure><p>I accepted all the default parameters when npm initing. After you finish the initiation process create an <strong>index.js</strong> file in the same directory. We will leave it for now and continue with installing our <strong>npm packages</strong>.</p>\n<p>In the command line, type<strong> <em>npm I node-fetch express\u00a0cron</em>.</strong></p>\n<p>After, open your <strong>package.json</strong> file.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gnZNk6poW0Lwl6gY3Yx4kw.png\"></figure><p>Your package.json file should look similar to the screenshot above. If you glance at the \u201c<strong>dependencies\u201d</strong> key, you\u2019ll notice an object with keys associated with the packages we installed and the version\u00a0number.</p>\n<p>This step is important.</p>\n<blockquote><strong>Add another key named \u201ctype\u201d and add \u201cmodule\u201d as its\u00a0value.</strong></blockquote>\n<p>This will allow us to use \u201c<strong>import\u201d </strong>instead<strong> </strong>of \u201c<strong>require\u201d</strong> to import packages into our index.js\u00a0file.</p>\n<p>Nice! We got everything we need to get to the fun part. It\u2019s time to\u00a0code.</p>\n<h3>Get Medium\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open the index.js\u00a0file.</li>\n<li>Import fetch from \u201cnode-fetch.\u201d</li>\n<li>Create an async function called \u201c<strong>getMediumPosts\u201d</strong> that accepts a parameter \u201c<strong>username\u201d</strong>. This function will be used to fetch all your medium posts from the username provided.</li>\n<li>Within the function brackets, let\u2019s write a script that will check if the username name is\u00a0valid.</li>\n<li>Next, within the same function, let\u2019s create a variable called <strong>URL</strong> that assigned a value of the URL we are going to request along with our username.</li>\n</ol>\n<blockquote>\n<strong>https://api.rss2json.com/v1/api.json</strong>?<strong>rss_url=https://medium.com/feed/{@username}</strong>\n</blockquote>\n<ol>\n<li>Next, we use the <strong>fetch</strong> package imported from above to send a request to the URL (created in the previous step) to fetch our profile information. We want the result of the fetch to be the result of this function so we need to add a <strong>return</strong> statement.</li>\n<li>Let\u2019s see the response we get by using <strong>console.log </strong>to log the response of our\u00a0fetch.</li>\n<li>Now, let's call the function with your medium username.</li>\n<li>In the command line run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XT7FSD9K8brp_5XLT_8S6Q.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9Sp_OoeuUN86NjeDe0Pn_g.png\"></figure><p>The terminal should log the response of our fetch function.</p>\n<p>For this tutorial, I only want the medium posts that the user, I, created. Looking at the response, I only need the \u201c<strong>items\u201d </strong>key<strong> </strong>in this response<strong>.</strong></p>\n<p>Next steps (use the next image for reference):</p>\n<ol><li>update the fetch function to only return the <strong>data.items</strong>.</li></ol>\n<p>We successfully created a function that will return the medium posts of the username provided.</p>\n<h3>Process and Store\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>storePosts\u201d</strong> that accepts a parameter \u201c<strong>posts\u201d</strong>. This function will create and store a JSON file of the posts we fetched from the previous function, <strong>getMediumPosts.</strong>\n</li>\n<li>Add <strong><em>Import fs from \u201cfs\u201d</em></strong> at the top of the file. We are going to use this preinstalled package to store the file\u00a0locally.</li>\n<li>Within the <strong>\u201cstorePosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully creates and stores the posts as a JSON file or <strong>rejects</strong> if it fails (reference next\u00a0image).</li>\n<li>Create another async function below<strong> \u201cstorePosts\u201d </strong>named<strong> \u201cprocessPosts\u201d </strong>that doesn\u2019t receive any parameters.</li>\n<li>Within this function, create a variable called <strong>\u201cposts\u201d</strong> that will store the response of the <strong>\u201cgetMediumPosts\u201d. </strong>Ensure you add an <strong>\u201cawait\u201d</strong> to wait for the response before continuing to the next line of\u00a0code.</li>\n<li>Within the same function and on the next line, we now want to pass the variable we created in the previous step to the function <strong>\u201cstorePosts\u201d </strong>to store our posts. Let\u2019s <strong>await</strong> this response.</li>\n<li>Below all of this beautiful code, let's call <strong>\u201cprocessPosts\u201d </strong>to test out our\u00a0logic.</li>\n</ol>\n<p>8. In the terminal run <strong>node\u00a0index.js</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ceFEcvtKt6g8sE3LnXcMTQ.png\"></figure><p>If everything worked properly you should see a <strong>posts.json</strong> file appear in your directory.</p>\n<p>Nice! Now we 3 functions created.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n</ol>\n<h3>Get Stored\u00a0Posts</h3>\n<p>Now, we want to be able to retrieve the posts we stored locally as a JSON\u00a0file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>getPosts\u201d</strong> that has no parameters. This function returns the <strong>posts.json</strong> file the <strong>\u201cstorePosts\u201d </strong>stored\u00a0locally.</li>\n<li>Within the <strong>\u201cgetPosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully retrieves the posts.json file or <strong>rejects</strong> it if it fails (reference next\u00a0image).</li>\n<li>Below this function, let's call <strong>\u201cgetPosts\u201d </strong>and <strong>console.log</strong> our response to ensure it\u2019s working properly.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ytcIyXGBjPd9WF-EHAnX-Q.png\"></figure><p>Nice! It logged our values from the posts.json file.</p>\n<p>Now we added another function to our \u201cfunction created\u201d\u00a0list.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n<li>\n<strong>\u201cgetPosts\u201d\u200a\u2014\u200a</strong>get our locally stored\u00a0posts</li>\n</ol>\n<h3>Create and Serve Our\u00a0Website</h3>\n<p>We are now going to use the <strong>express </strong>package to serve our plain HTML website and create an API that will return our medium\u00a0posts.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Add <strong>import express from \u201cexpress\u201d </strong>at the top of the\u00a0file.</li>\n<li>We need to initiate the express app so below we need to create a variable called <strong>app </strong>and assign it to the response of express (use image as a reference).</li>\n<li>At the bottom, we want our app to listen for a specific port to serve our website. We can use port <strong>3000 </strong>and add a callback function that will console.log that it is listening.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2BEJX3ltuzrHdeS_IgoDRg.png\"></figure><p>You should see listening on port\u00a03000.</p>\n<h4>Routes</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>We are going to create an API route that will send back a response to our client with our posts. Use <strong>\u201capp. get\u201d </strong>to initiate the route we\u00a0need.</li>\n<li>In the <strong>\u201capp. get\u201d</strong> function, for the first parameter, add a string value <strong>\u201c/API/posts/get\u201d. </strong>This will specify the route path the client will need to ping to retrieve the\u00a0posts.</li>\n<li>For the second parameter, add an async callback function (arrow or regular function) with two parameters, <strong>\u201creq\u201d </strong>and\u00a0<strong>\u201cres.\u201d</strong>\n</li>\n<li>In the callback function, call the <strong>\u201cgetPosts\u201d </strong>function.</li>\n<li>\n<strong>\u201cgetPosts\u201d</strong> is an async function that returns a promise. And we need to send the response back to the client. So I\u2019ll use <strong>\u201c.then\u201d </strong>to handle the successful response and <strong>\u201c.catch\u201d </strong>to handle the error if occurred<strong>.</strong>\n</li>\n<li>In the <strong>\u201c.then,\u201d </strong>add a callback function that will send the posts to the client using <strong>\u201cres.send\u201d</strong>.</li>\n<li>In the <strong>\u201c.catch,\u201d </strong>add a callback function that will send a status code of <strong>500 </strong>back to the client to indicate a failed response.</li>\n<li>Next, Using <strong>\u201capp. get\u201d</strong>, we want to create a base route that will send back our website as a response for all other routes. For the first parameter, use <strong>\u201c*\u201d </strong>to indicate all\u00a0routes.</li>\n<li>Add <strong>import path from \u201cpath\u201d </strong>at the top of the file. The path package is preinstalled with node. We will use this package to find the exact location of our <strong>HTML</strong>\u00a0file.</li>\n<li>Above the <strong>\u201capp. get\u201d </strong>we just created, create a variable named root and assign the variable the value of the function <strong>\u201cpath.resolve\u201d </strong>with the parameter of our HTML file, which will be <strong>\u201c./client\u201d.</strong>\n</li>\n<li>We also need to call<strong> \u201cexpress.static(root)\u201d</strong> to serve the static files we will create for our website inside our client folder. Add <strong>\u201capp.use(express.static(root))\u201d </strong>just below the previous step line of\u00a0code.</li>\n<li>In the <strong>\u201capp. get\u201d </strong>and in the second parameter, add a function that will send back the HTML file that we will create later (use the next image as a reference).</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GP1A7jttkivs3g6qsa_KVQ.png\"></figure><p>Congrats on getting this far. Now, have our server set up to the point where it will send back an HTML file that we haven\u2019t quite created yet. Let's get to that\u00a0now.</p>\n<h4>Website</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create a new folder named\u00a0<strong>client</strong>\n</li>\n<li>Inside the folder, create an <strong>index.html</strong> file</li>\n<li>Create another folder inside the client folder we just created named\u00a0<strong>js</strong>\n</li>\n<li>Inside the js folder create a file called<strong> script.js</strong>\n</li>\n<li>Open the <strong>index.html</strong> file, and initiate an HTML document.</li>\n<li>Inside the body tags, add an <strong>h1 </strong>tag and name it \u201cBlog\u201d or whatever you so\u00a0choose.</li>\n<li>Next, add a div with id as\u00a0<strong>root</strong>\n</li>\n<li>Load the js file we created previously by using the script\u00a0tag.</li>\n</ol>\n<blockquote>Shortcut for create an HTML document in VS is\u00a0! and then press\u00a0tab.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*viV8ksFIz72EvZrK08wsag.png\"></figure><p>We got our basic HTML created. Next, we need to update our <strong>script.js </strong>file to fetch our posts from our\u00a0server.</p>\n<p>Open the <strong>script.js </strong>file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called <strong>\u201cgetPosts\u201d</strong>. This function will ping the API we created previously from our server to get our\u00a0posts.</li>\n<li>Within the function, let's use the fetch function (preinstalled) to ping the route <strong>\u201capi/posts/get\u201d </strong>and return the response.</li>\n<li>Let\u2019s call the function and log the output using <strong>console.log</strong>\n</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jFhRJwOFVaQIBFkXF2Cr8Q.png\"></figure><p>Open a browser and go to <strong>localhost:3000. </strong>You should see a page with \u201cBlog\u201d displayed as header\u00a0text.</p>\n<p>In the developer tools, go to the console tab and you should see the posts logged in the\u00a0console.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aFNscSNdTHdCTLlEKf_ujg.png\"></figure><p>Good job! We are almost there. Let\u2019s display the posts on the page with the function <strong>\u201crenderPosts\u201d.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RZRAjPDRFOhjPE_yDfdb0Q.png\"></figure><p>Alright cool. We can see all of our posts displayed on the page now after we refreshed the\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LgZfHzj1SdUJxuJRhRQeuw.png\"></figure><p>One last\u00a0step!</p>\n<h3><strong>Cron Job (Schedule To Fetch Posts At Midnight Every\u00a0Day)</strong></h3>\n<p>Say we want to get the most up-to-date posts. We can do that by creating a job that will run every day at midnight. To do that, we can use the <strong>corn </strong>package that we installed.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open our index.js file to access our server\u00a0code.</li>\n<li>Add <strong>import cron from \u201ccron\u201d </strong>at the top of the\u00a0file.</li>\n<li>Create a variable just below called<strong> \u201cCronJob\u201d </strong>and assign it the value of<strong> \u201ccron.CronJob.\u201d</strong>\n</li>\n<li>Before our API route, create a variable called <strong>\u201cjob\u201d</strong> and assign it the value of the new function <strong>\u201cnew CropJob(\u2026)\u201d </strong>(use the image below for reference)<strong>.</strong>\n</li>\n<li>The first argument will be the time in which the function will be called. We will use <strong>\u201c00 00 * * *\u201d which indicates for every day at midnight. Use </strong><a href=\"https://crontab.guru/\"><strong>crontab</strong></a> for time reference.</li>\n<li>The second argument will be the function that will be called. We want to call <strong>\u201cprocessPosts\u201d </strong>to fetch and store the posts from\u00a0Medium.</li>\n<li>The third argument we can pass\u00a0null</li>\n<li>The fourth argument indicates whether to start the job after initiating. So we will pass\u00a0true.</li>\n<li>Back to the second argument, we want to stop the batch or notify us if an error occurs. In this case, I\u2019ll stop the batch, but you can send yourself a message or email indicating an\u00a0issue.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yPBjIbZcCbWqe2a1u5Rhzg.png\"></figure><h3>Congratulations!</h3>\n<p>You got to the end. That was a long process. Glad you stuck with it all the way through. You now have a server\u00a0that:</p>\n<ol>\n<li><strong>Runs a job at midnight to fetch your Medium posts and stores them\u00a0locally.</strong></li>\n<li><strong>Has an API that will send back a response of the posts that were stored\u00a0locally.</strong></li>\n<li><strong>And serves a basic website that calls the posts API and displays the\u00a0content.</strong></li>\n</ol>\n<p>You can visit the code\u00a0<a href=\"https://github.com/athlete-coder/medium\">here</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f9c02cac177c\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["blog", "express", "code", "automation", "node"], "id": "f9c02cac177c"}, {"title": "Linear-Gradient Underline Text", "pubDate": "2022-02-05 16:03:21", "link": "https://medium.com/@athletecoder/linear-gradient-underline-text-4e42d28aa343?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/4e42d28aa343", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png", "description": "<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4><p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it....</p>", "content": "\n<h3>Make A Linear-Gradient Underline Text</h3>\n<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4>\n<p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png\"></figure><p>I\u2019ll use <a href=\"http://codesandbox.io/\">codesandbox.io</a> for this illustration, but you can use whatever code editor you so\u00a0choose.</p>\n<p>Let\u2019s create a basic layout of a\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CfEvjW3xrVBrGLkjI9STtQ.png\"><figcaption>codesandbox.io</figcaption></figure><p>We now have the basic layout of the page with \u201cHello Everyone\u201d wrapped with an <strong>h1</strong> tag and displayed on the\u00a0page.</p>\n<p>In terms of content, we have everything we need in between the <strong>html</strong> tags. It\u2019s time for\u00a0styling.</p>\n<p>To add <strong>CSS </strong>styles, we need to add the <strong>style</strong> tags above or below the <strong>html</strong> tags. Let's place it above and add the initial styles for our <strong>h1</strong>\u00a0text.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KuP62ApaasDdrjUx9kI5Eg.png\"></figure><p>We made the font size 40 pixels and the font color\u00a0black.</p>\n<p>Now we can get to what you came here for. Adding the cool underline style.</p>\n<p>We first need to add a background color. I chose grey. I thought it complimented the black well, but you can use any color combination. Just replace the <strong>rgba</strong>\u00a0values.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bbPVyTeqbJdpI2ErzSYysQ.png\"></figure><p>We have to use the <strong>background-image </strong>property with <strong>linear-gradient</strong> instead of the <strong>background </strong>property.</p>\n<p>For some browsers, linear-gradient might need a prefix. You can learn more about it at <a href=\"https://www.w3schools.com/cssref/func_linear-gradient.asp\">w3schools.com</a>.</p>\n<p>I tried the background property, but the additional properties we will be adding do not apply to the background property.</p>\n<p>There\u2019s already an issue with the background color extending beyond the text. We\u2019ll fix that\u00a0now.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BmeXcxz3TeofSATNZfL9BA.png\"></figure><p>We set the <strong>display</strong> property as <strong>inline</strong> to make the width and height of the h1 tag the same as its\u00a0content.</p>\n<p>Now, need to adjust the size and position of the background.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ovrse_E1X9HtkHMBVCkonQ.png\"></figure><p>We adjust the size and position of the background based on the size of the font using\u00a0<strong>em.</strong></p>\n<p>And we also made the width of the background 100% to cover the size of the\u00a0content.</p>\n<p>Notice the background did not change when we add the<strong> background-size</strong> and <strong>background-position</strong> properties. We just need to add one more property.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*l3Y27gGKoamnGSPa_bSB9Q.png\"></figure><p>The <strong>background-repeat </strong>property fixed this for us. Now the size of the background is the size we set it\u00a0as.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y6b2U4q8MN1JTJSg7obsRw.png\"></figure><p>And it\u00a0wraps!</p>\n<p>The CSS code is below for your convenience.</p>\n<blockquote>background-image: linear-gradient(to right, rgba(180, 180, 180, 0.8), rgba(180, 180, 180,\u00a00.2));</blockquote>\n<blockquote>display: inline;</blockquote>\n<blockquote>background-position: 0\u00a00.6em;</blockquote>\n<blockquote>background-size: 100%\u00a00.8em;</blockquote>\n<blockquote>background-repeat: repeat-x;</blockquote>\n<p>There are limitations to this technique like not being able to round the background, but if I find a better way to do this I\u2019ll make sure to post it. If you already know a better way, let me know in the comments.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4e42d28aa343\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["html", "programming", "css", "style", "code"], "id": "4e42d28aa343"}, {"title": "Turning An Idea Into A Reality", "pubDate": "2022-01-26 15:37:49", "link": "https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/a75af7170fc3", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif", "description": "<h4>I built an\u00a0app</h4><p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new f...</p>", "content": "\n<h4>I built an\u00a0app</h4>\n<p>Jazz music was quietly playing in the background, my laptop rested on the coffee table in front of me, and a Coconut Vietnamese coffee accompanied it. Coconut Vietnamese coffee soon became my new favorite. I could feel the soreness in my bum beginning to kick in from sitting on a hard wooden chair for over 2 hours. I suddenly notice my teeth gnawing at a fingernail. I pull my finger away from my mouth and lay them on the\u00a0table.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*k6DYMimQrjXLMJif\"><figcaption>Photo by <a href=\"https://unsplash.com/@romanbozhko?utm_source=medium&amp;utm_medium=referral\">Roman Bozhko</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I took my gaze away from the screen and moved it to the view in front of me. The sun beamed through the glass windows. The light faded to a dim from the left side of the coffee shop to the right side. There were tables neatly placed around the coffee bar below. The shop was wrapped around with roads and trees. The different shades of green elevated the sense of life. People on motorbikes would constantly speed past. Most were single riders, but some would have multiple passengers. On occasion, I would see riders with multiple boxes stacked on top of each other balancing on the back of the bike. How did they not fall\u00a0over?</p>\n<p>\u201cWhat are you going to do with your life,\u201d I asked\u00a0myself.</p>\n<p>This question seemed to be a common occurrence at the time. I would typically tell myself that I\u2019m going to be a professional football player. But, when I would tell myself that I truly didn\u2019t believe it. The dream of playing professional football seemed unattainable. It seemed beyond my reach. I lost\u00a0faith.</p>\n<p>After what felt like hours, but was only a couple of minutes, the space between each thought began to expand. And then suddenly It became quiet inside my head for a long brief\u00a0moment.</p>\n<p>\u201cWhat if I can create a tool and/or service tailored to athletes, like myself, to help them enhance their training?\u201d</p>\n<p>And that\u2019s the first time the idea popped into my head. At the time, in 2019, I was on my soul-searching trip through Vietnam. The issue was I didn\u2019t know how to bring that idea to life. I didn\u2019t have enough money. Most of the money I made was already invested in this trip. And I didn\u2019t have the knowledge or skills to build it on my own. I only knew the basics of HTML, CSS, and JavaScript (JS).</p>\n<p>Fast forward to the end of January of 2020 (I abandoned the idea for a while), I was in Louisville, Kentucky employed as an IT Consultant. Most days I would arrive at the office about 10 minutes before 9, place a k-cup in the coffee machine, ponder what I\u2019m doing with myself, grab my coffee and then walk over to my desk. I was hardly engaged with what I was doing, so I found myself constantly wondering about life. But one day, the idea reappeared in my thoughts. I felt determined. I told myself I had nothing to lose and all the world to\u00a0gain.</p>\n<p>I brainstormed a couple of strategic options. I came down to two. I could wait until I had enough money to invest in contractors to build it for me, or I could teach myself the skills to do it on my own. The journey to do it on my own had less risk and more benefits if failure was the outcome. I also knew it was going to be a challenge.</p>\n<p>I typed into the Google search bar, \u201cHow to build an application from scratch?\u201d \u201cHave an idea, create a plan, and execute.\u201d I already knew most of these things. I was asking the wrong questions. I needed to know exactly what tech stack I was going to use and how I was going to apply them.<br> I had experience with JS so I stuck with it. NodeJs as the backend environment and JS, HTML, and CSS as the frontend. Doing additional research on frontend development, I stumbled upon JS frameworks. What I learned is that JS frameworks are prewritten JS code that allows for easier development. There were multiple JS frameworks to choose from; <strong>React</strong>, Vue and Angular were the most popular. <a href=\"https://reactjs.org/\"><strong>React</strong></a> seemed the most appealing based on popularity, so I decided to go with\u00a0it.</p>\n<p>I typed, \u201cTutorials on React,\u201d into Google\u2019s search bar. <a href=\"http://udemy.com/\">Udemy</a> was the first result. It was a website I\u2019ve heard about before through numerous ads. I arrived on Udemy\u2019s website, created an account, and found a course called, \u201cModern React and Redux.\u201d I didn\u2019t know what Redux was, but it had plenty of reviews and almost a 5-star rating so I bought\u00a0it.</p>\n<p>5:30 the next morning, and I\u2019m in my apartment sitting in front of my laptop computer screen starting the first lesson of \u201cModern React and Redux.\u201d And for the next month and a half, I would spend most mornings, for an hour or so, tackling each instructional video.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*a3L7KQrSEtxsa2-c\"><figcaption>Photo by <a href=\"https://unsplash.com/@altumcode?utm_source=medium&amp;utm_medium=referral\">AltumCode</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>After completing the course, I had a good understanding of the React Framework and how <a href=\"https://react-redux.js.org/\">Redux</a> integrated with it. But I needed to apply what I learned to\u00a0reality.</p>\n<p>A good buddy of mine recently started a podcast that focused on reviewing books and beers. It was the perfect opportunity for me to apply what I learned so I created a website for\u00a0them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FEMaWPMT6h-QopBZ_OUQFg.png\"><figcaption>The homepage of the website I created for the\u00a0podcast</figcaption></figure><p>The website had a store, blog, admin panel, and basic pages that every website needs. The store was the most difficult to implement. <a href=\"https://stripe.com/\"><strong>Stripe\u2019s API</strong></a> (payment processor) documentation was very easy to go through, but figuring out how to configure the process from item to cart, and then cart to checkout was difficult.</p>\n<p>I continued building other websites for leisure. Coming up with random ideas and then trying to bring those ideas to life. Then one day, I stumbled upon React Native when I was scrolling through Youtube. <a href=\"https://reactnative.dev/\">React Native</a> is a framework used to develop mobile and web applications, but mainly used for mobile applications.</p>\n<p>\u201cWhy not?\u201d I asked myself. I already have experience with React. The world is going towards mobile devices if it hasn\u2019t already. It will be a useful skill to have under my belt. Plus, my training idea will need to be mobile-first.</p>\n<p>I googled \u201cReact Native,\u201d navigated to their website, clicked on the \u201cGet Started\u201d button on the homepage, and then skimmed through their documentation. For newbies, like myself, the documentation recommended using <a href=\"https://expo.dev/\"><strong>Expo CLI</strong></a> to get started. So I dove right into\u00a0it.</p>\n<p>For my first mobile application with React Native, I built a social networking application called, \u201cLetsLink.\u201d It was an app where you were only shown other users within a 1-mile radius. It was complex, but I learned more about how to interact with APIs and honed my skills in React and\u00a0Redux.</p>\n<p>In my next app, I was a little intimidated at first, but I ejected my Expo CLI app into a bare workflow environment. Soon I came to realize it wasn\u2019t as bad as I thought, and that Google is my best\u00a0friend.</p>\n<p>In July of 2021, I was in San Diego, CA visiting my brother. It was a sunny afternoon and I was taking a stroll along the beach. A couple of hours prior, I submitted my first app to the app store. It was a <a href=\"https://habt-b0f23.web.app/\">habit tracker app</a>. I felt confident. \u201cI\u2019m ready,\u201d I whispered to myself with the thought of my main idea in\u00a0mind.</p>\n<p>The following day at about 6:30 AM, I walked over, with a black coffee in hand, to my brother\u2019s standing desk with my laptop resting on top of it. I opened the lid of the laptop and took a couple of sips of coffee while I waited for the laptop to boot up. When the login screen displayed I took one last sip of my coffee and rested the coffee mug to the left of my laptop. I typed in my login credentials.</p>\n<p>I spent the next 4 hours or so brainstorming the functionalities of the app, and creating a broad timeline of the process from scratch to launch. I planned for the app to be on the app store towards the end of December of 2021, so that gave me about 4\u00a0months.</p>\n<p>That same afternoon, after working out and spending some downtime with family and friends, I found myself back at the desk working on designing the prototype in <a href=\"https://www.figma.com/\">Figma</a> (a prototype software). I spent the next week designing a prototype of the app. Design isn\u2019t my strong suit, but I tried my best to say the\u00a0least.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*IS1mh5NZIwsxM5hg\"><figcaption>Photo by <a href=\"https://unsplash.com/@balazsketyi?utm_source=medium&amp;utm_medium=referral\">Bal\u00e1zs K\u00e9tyi</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I was looking outside the airplane window on my way back to Seattle, WA. Being above the clouds makes you wonder if you could just choose to see the brighter side of things. Sometimes we get so caught up below the clouds that we don\u2019t even wonder what\u2019s above\u00a0it.</p>\n<p>Is this going to work? Are people going to like it? What if it fails? It\u2019s going to be embarrassing.</p>\n<p>These negative self-degrading thoughts make a frequent occurrence throughout my pursuit for the next couple of months. I had no choice but to implement a routine to keep these thoughts at\u00a0bay.</p>\n<p>I was normally awake at 6:00 AM. Made coffee, took out the dogs, meditated for 10 minutes, and worked from 6:30 -7:00 AM until about 10:00 AM\u200a\u2014\u200a11:00 AM. I worked in 90-minute intervals with 20-minute breaks in between. Then I would eat breakfast, work out, and be back at it at around 2:00 -3:00 PM until about 6:00\u20137:00 PM. I would have dinner, and then, depending on how I was feeling, I would squeeze in another hour or so before I would get ready for bed. I was in bed at around 9:00 PM and asleep at 10:00 PM. I was consistent most days, but obviously, life and procrastination would sometimes get in the\u00a0way.</p>\n<p>It\u2019s always the first couple of minutes of my work session where my mind would complain about how I don\u2019t want to be doing this right now. And then suddenly, my mind would transition into a deep state of focus on the task at hand. I started to enjoy diving into those work sessions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-umRWDH1aVlAH_7C\"><figcaption>Photo by <a href=\"https://unsplash.com/@avirichards?utm_source=medium&amp;utm_medium=referral\">Avi Richards</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>It\u2019s Mid-December and I had an overwhelming amount of work to be done. I\u2019ve made significant progress, but there was a lot of design and content configuration that needed to be done. I audibled and planned for the app to be completed by the end of December and to hopefully submit the app towards the beginning of\u00a0January.</p>\n<p>January 10th, I was in Denver, Colorado visiting a friend I met in college. It was an early Friday morning, the sun beamed through the window and onto my face. I\u2019m standing at a tall round wooden table with my laptop resting on top of it. I feel a sense of relief as I hit the submit button. My app is finally done. For\u00a0now.</p>\n<p>This was only the start of this app\u2019s journey. This first release was just the MVP (minimal viable product) version. More like a beta version. This app still needs a lot of work. I know things didn\u2019t go exactly how I planned in July, but I\u2019m glad I accomplished my main goal and that was to complete and submit the\u00a0app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BncmMbXS9mSNgh6H\"><figcaption>Photo by <a href=\"https://unsplash.com/@nullplus?utm_source=medium&amp;utm_medium=referral\">Razvan Chisu</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Feel free to check out the app I created <a href=\"https://www.softlete.com/\">here</a>. Let me know what you think through the feedback form on the\u00a0website.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a75af7170fc3\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["entrepreneurship", "ideas", "app-development", "fear-of-failure", "coding"], "id": "a75af7170fc3"}, {"title": "Contributing To A Open Source Library", "pubDate": "2022-02-17 15:48:05", "link": "https://medium.com/@athletecoder/my-first-attempt-to-contribute-to-a-open-source-library-87aee810d31e?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/87aee810d31e", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png", "description": "<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4><p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things....</p>", "content": "\n<h4>I created a method to fetch a user\u2019s workout route locations from Apple HealthKit for\u00a0IOS.</h4>\n<p>I\u2019m a noobie. I\u2019ve only been seriously programming for 2 years now. Not even professionally either. Mostly been teaching myself how to code and build\u00a0things.</p>\n<p>But recently, I attempted to implement a new feature for the <a href=\"https://github.com/agencyenterprise/react-native-health\">React-Native-Health</a> library. Its intended purpose is to interact with the Apple HealthKit for\u00a0iOS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Upz-FjcovPptUNHWWJMdpA.png\"></figure><h3>Backstory</h3>\n<p>I built this app called <a href=\"https://www.softlete.com/\">softlete</a> with the <a href=\"https://reactnative.dev/\">React-Native</a> framework. It\u2019s a training tool for athletes (anyone who physically trains for any purpose) that helps them organize their training while also providing meaningful resources, information, and feedback. It\u2019s still in its development phase.</p>\n<p>With the React-Native-Health library installed, I immediately have the configuration set up (permissions and methods) to retrieve data from Apple HealthKit.</p>\n<p>Most of the methods provided by the library satisfy my needs, but there is a method that is missing for a few key features I want to implement.</p>\n<h4>Key Features</h4>\n<p>A couple of key features I want to add\u00a0are:</p>\n<ol>\n<li>Display the user\u2019s workout route on a\u00a0map.</li>\n<li>Provide in-depth performance statistics and feedback for a user\u2019s workout\u00a0route.</li>\n</ol>\n<p>Plenty of fitness apps already offer these features, like Strava, so I thought I might as well\u00a0too.</p>\n<p>The issue is the React-Native-Health library doesn\u2019t have a method to accomplish this. And to implement these features, I need access to the workout route\u00a0data.</p>\n<p>So I was like, \u201cyou know what. I\u2019ll try to do it myself.\u201d And that\u2019s exactly what I\u00a0did.</p>\n<h3>The Journey</h3>\n<p>Beware, I\u2019m unfamiliar with native iOS development. I\u2019ve never attempted to contribute to an open-source library. So I\u2019m stepping into unknown territory.</p>\n<p>I had no idea how to export native modules in React Native. So, like what everyone would do, I headed straight to the motherland (React docs) and walked through the <a href=\"https://reactnative.dev/docs/native-modules-intro\">native modules documentation</a>.</p>\n<p>I followed \u201cexactly\u201d the steps in the documentation to add the demo method into my app. And\u00a0\u2026 I completely broke it. I spend the whole day debugging, looking through forums, blogs, and everything you can think\u00a0of.</p>\n<p>Nothing.</p>\n<p>After banging my head on the keyboard a couple of times. I took a leap of faith and assumed it was Xcode (It definitely wasn\u2019t Xcode itself, but my clumsiness). I uninstalled and reinstalled it. That night, I laid in bed, stared at the ceiling, and regretted my decision to attempt\u00a0this.</p>\n<p>I woke up, relieved myself, and sprinted straight to my computer. Xcode was successfully installed. I opened my app project, pushed the build button that looks like a play button, and I stared at the status, biting my nails (I know, it\u2019s a bad habit), as it slowly proceeded to\u00a0build.</p>\n<p>\u201cBuild Succeeded.\u201d</p>\n<p>I opened the console, and \u201cidgaf Keisha\u201d was\u00a0printed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/236/0*6HtxzsZxAH18YKtV.jpg\"></figure><h3>The Implementation</h3>\n<p>Now onto what I wanted to implement.</p>\n<p>I didn\u2019t even know how to edit the libraries that I installed into my app. So I started poking around and came across the Pods file. I opened it and then opened the development pods folder. I saw the <strong>RCTAppleHealthKit </strong>folder. It looked promising so I opened\u00a0it.</p>\n<p>What\u2019s up with the\u00a0.h and\u00a0.m\u00a0files?</p>\n<p>I opened the <strong>RCTAppleHealthKit.h</strong>. It didn\u2019t look too bad. I then proceeded to open the <strong>RCTAppleHealthKit.m</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/275/0*DAwbkHKlJnDcUG1D\"></figure><p>Why does Objective-C function declaration syntax look so confusing? It\u2019s like they intentionally wanted to scare people away from Objective-C.</p>\n<p>Example:</p>\n<p><strong>- (void)workout_getRoute:(NSDictionary *)input callback:(RCTResponseSenderBlock)callback;</strong></p>\n<p>Why is the first parameter of the function formatted differently than the subsequent parameters?</p>\n<p>Thank God for Google and people smarter than me willing to post and respond to blogs and forums because I would have been completely lost.</p>\n<p>So I pretty much copied and pasted the <strong>getAnchoredWorkouts</strong> method in the\u00a0<strong>.m </strong>file, changed the name to \u201c<strong>getWorkoutRoute</strong>,\u201d and updated the function logic to log \u201cWazzzzup\u201d in the\u00a0console.</p>\n<p>I rebuild my app and BOOM! I can see the text \u201cWazzzzup\u201d logged on the\u00a0console.</p>\n<h4>Implementation Steps</h4>\n<p>Now for the difficult, but fun part. Using <a href=\"https://developer.apple.com/documentation/healthkit/workouts_and_activity_rings/reading_route_data\">this</a> Apple Developer Docs article as a reference, I had to perform these three queries in sequence.</p>\n<ol>\n<li><strong>Get workout</strong></li>\n<li><strong>Get route</strong></li>\n<li><strong>Get locations</strong></li>\n</ol>\n<p>The problem with the article is that the code is stuck on Swift. The language option at the top won\u2019t convert the language to Objective-C. And I\u2019ve never even seen Swift code\u00a0before.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*g8Qwj_nQYHM1LNqq\"><figcaption>Photo by <a href=\"https://unsplash.com/@a_d_s_w?utm_source=medium&amp;utm_medium=referral\">Adrian Swancar</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I had no clue how to export or import classes so I continued to use the method <strong>getAnchoredWorkouts </strong>as a reference.</p>\n<p>I created another method called <strong>workout_getRoute </strong>in the <strong>Methods_Workout</strong> files. This method will be used as the container for the logic to handle fetching the\u00a0data.</p>\n<p>Alright. The first step is to get the <strong>HKWorkout</strong> class. How do I do that? I\u2019ll just see how <strong>getAnchoredWorkouts </strong>does\u00a0it.</p>\n<p>Great. Create another method in the <strong>Queries</strong> files and I\u2019ll call it <strong>\u201cfetchWorkoutById.\u201d </strong>Use the <strong>HKSampleQuery </strong>class to get the <strong>HKWorkout</strong> class.</p>\n<p>Next, I need to get the <strong>HKWorkoutRoute </strong>class that is associated with the <strong>HKWorkout</strong> class, and to do this I need to perform another query using the <strong>HKAnchoredObjectQuery </strong>class.</p>\n<p>So I created another method in the <strong>Queries</strong> files, called it <strong>\u201cfetchWorkoutRoute,\u201d </strong>and inserted the configuration to get the <strong>HKWorkoutRoute</strong>.</p>\n<p>Lastly, I needed to query for the location data associated with the <strong>HKWorkoutRoute</strong> class by using the <strong>HKWorkoutRouteQuery</strong> class. I inserted this logic inside the same method I created previously, <strong>fetchWorkoutRoute.</strong></p>\n<p>Yay! I got a response! I did\u00a0it!</p>\n<p>And obviously, it didn\u2019t go as smoothly as I described above. It literally took me a week to get a successful response. And most of the time I spent figuring out syntax and type\u00a0issues.</p>\n<p>So I integrated this method into my app. I created a new screen, imported a map, and configured it to display the locations on the\u00a0map.</p>\n<p>I rebuilt my project and tested it on my device for a run I did early that\u00a0day.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/413/0*WtODBvapT8BoO0sb.jpg\"></figure><p>I wasn\u2019t done. It wasn\u2019t displaying the whole route. Something was wrong with my configuration.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/354/1*hl3hyMmBRMWj4SCNq44H7w.png\"></figure><p>I promise I ran further than\u00a0this\u2026</p>\n<p>Like every developer would do, I went straight to Google. To my luck, nobody had this issue. And surprisingly, not many people attempted this.</p>\n<p>After two days of debugging, I almost lost hope and was about to throw in the\u00a0towel.</p>\n<blockquote>But then I realized that I was the main character and kept\u00a0going.</blockquote>\n<p>Not even an hour later, I found out what the problem\u00a0was.</p>\n<blockquote>\u201cYour block receives one or more batches of location data. When the block\u2019s done parameter is true, you have received all the\u00a0data.\u201d</blockquote>\n<p>After rereading this statement a million times, I realized my logic inside the data handler block was configured incorrectly.</p>\n<p>I assumed all the location data was passed at once when the done parameter was set to true, but I was wrong. Now that I think about it, this assumption made no\u00a0sense.</p>\n<p>I reconfigured my logic, rebuilt my project, and the whole workout route was displayed nicely on the\u00a0map.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*oGgVJQ8EmzKVCTGc\"><figcaption>Photo by <a href=\"https://unsplash.com/@dre0316?utm_source=medium&amp;utm_medium=referral\">Andre Hunter</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3>Conclusion</h3>\n<p>From start to finish, this process took me a little over a week. And this was my first attempt to contribute to an open-source project. It was also my first time being exposed to Objective-C and working with native modules in React\u00a0Native.</p>\n<p>It was a struggle from start to finish. I spent a lot of time trying to figure out syntaxes, types, class references, and other concepts.</p>\n<blockquote>And I thank all of you programmers for contributing to forums, blogs, dicussions, and whatever deemed helpful to me. You people make programming bearable.</blockquote>\n<p>I was a little intimated at first and I wasn\u2019t sure if I had enough competence to accomplish the task, but I\u2019m glad I took on the challenge. I learned a lot about Objective-C, how to interact with Apple HealthKit, and more about what I\u2019m capable\u00a0of.</p>\n<p>Although the code might not be perfect and probably has issues, I\u2019m happy to at least get a response that I\u2019m looking\u00a0for.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/0*8p5zNvZierBPw5R_.jpg\"></figure><p>You can critique my code here: <a href=\"https://github.com/nguyening20/react-native-health\">My React-Native-Health Fork</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=87aee810d31e\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["libraries", "open-source", "app-development", "code", "react-native"], "id": "87aee810d31e"}, {"title": "How to UseEffect In React", "pubDate": "2022-02-13 16:25:41", "link": "https://medium.com/@athletecoder/how-to-useeffect-in-react-97c4e6dc0a88?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/97c4e6dc0a88", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png", "description": "<h4>A quick tutorial on how to useEffect.</h4><p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to ...</p>", "content": "\n<h4>A quick tutorial on how to useEffect.</h4>\n<p>Before hooks were invented, class components dominated the landscape for React developers. React\u2019s lifecycle methods were only accessible to class components thus making classes the only option to perform side\u00a0effects.</p>\n<p>Thanks to the React team, now we have\u00a0<a href=\"https://reactjs.org/docs/hooks-intro.html\"><strong>hooks</strong></a><strong>.</strong></p>\n<blockquote>\n<strong>React hooks </strong>give functions similar features to what is provided to\u00a0classes<strong>.</strong>\n</blockquote>\n<p>But In this post, we are going to focus on a React hook called <a href=\"https://reactjs.org/docs/hooks-effect.html\"><strong>useEffect</strong></a>. A hook that is pretty complex at first, but after today you will get a good grasp on how everything works.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DBYdna-TCLtNkZLBlqOoXA.png\"></figure><h3>What Is UseEffect</h3>\n<p><strong>useEffect </strong>is a hook that allows you to perform side effects from a functional component. It serves the same purpose as <strong>componentDidMount</strong>, <strong>componentDidUpdate</strong>, and <strong>componentWillUnmount </strong>lifecycle methods in React classes, but is unified into a single\u00a0API.</p>\n<p>useEffect takes two\u00a0params.</p>\n<ol>\n<li><strong>A function</strong></li>\n<li><strong>An array of dependencies (optional)</strong></li>\n</ol>\n<p>Example.</p>\n<blockquote>useEffect(() =&gt;\u00a0{</blockquote>\n<blockquote>},[${dependency}])</blockquote>\n<h3>What We Are Going To\u00a0Learn</h3>\n<p>I think the best way to understand a coding concept is to see it in action. So we are going to identify how we can use useEffect to interact with these\u00a0events:</p>\n<ol>\n<li><strong>When the component mounts.</strong></li>\n<li><strong>When a state variable\u00a0changes.</strong></li>\n<li><strong>When multiple state variable\u00a0changes.</strong></li>\n<li><strong>When the component unmounts.</strong></li>\n</ol>\n<h3>What You\u00a0Need</h3>\n<ul>\n<li>\n<strong>Computer</strong> (Me: Macbook\u00a0Pro)</li>\n<li>\n<strong>Code Editor </strong>(Me: Visual Studio\u00a0Code)</li>\n<li>\n<strong>Browser </strong>(Me:\u00a0Chrome)</li>\n<li>\n<strong>A shallow understanding of React </strong>(Me:\u00a0IDK)</li>\n</ul>\n<h3>Initiate React\u00a0App</h3>\n<p>Go to your chosen directory, and <strong>npx create-react-app useeffect. </strong>I named this project \u201cuseeffect\u201d, but feel free to choose whatever name you would\u00a0like.</p>\n<p>If you need more clarification on how to set up a react project then follow <a href=\"https://create-react-app.dev/docs/getting-started\">these</a> instructions.</p>\n<h4>UseEffect On\u00a0Mount</h4>\n<p>Once you have everything running.</p>\n<ul>\n<li>Go to App.js (src\u00a0folder).</li>\n<li>Import <strong>useEffect</strong> from <strong>react </strong>at the top of the\u00a0file.</li>\n<li>Inside the function component above the <strong>return</strong> statement call the <strong>useEffect</strong> hook.</li>\n<li>Insert an arrow function as the first argument.</li>\n<li>Inside the arrow function, console.log(\u201cmount\u201d).</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*E4nSwhf8S5NdIEv0zJszpw.png\"></figure><p>In the developer console, you will notice \u201cmount\u201d has been logged. And every time you refresh you will see \u201cmount\u201d reappear in the\u00a0console.</p>\n<blockquote>So far, this tells us that every time the component <strong>App</strong> is mounted onto the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a>, the <strong>useEffect</strong> is\u00a0called.</blockquote>\n<h4>UseEffect On State\u00a0Update</h4>\n<p>Now let's see how <strong>useEffect</strong> interacts when a state variable is\u00a0changed.</p>\n<ul>\n<li>Import the <strong>useState</strong> hook at the top of the\u00a0file.</li>\n<li>Initiate a state variable called <strong>count</strong> with the default value\u00a0zero.</li>\n<li>Erase all the contents inside the <strong>div </strong>with the className \u201cApp.\u201d</li>\n<li>Create a button inside the div that displays the count and increments the count by one when\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aQ9SIHRYMBz7_ILRPuMNxg.png\"></figure><p>With the developer console open, interact with the button, and watch how the useEffect responds to the state\u00a0updates.</p>\n<blockquote>In this case, useEffect is initially called after the component as mounted, and then called every time the count state is\u00a0updated.</blockquote>\n<p>Honestly, this was unexpected for me when I started working with React. By not passing a dependency array, I expected useEffect to only be called once when the component mounts.</p>\n<p>To confirm this, we are going to add another state variable and then see how useEffect reacts to each state\u00a0change.</p>\n<h4>UseEffect On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Initiate another state variable called <strong>\u201cdecrement\u201d</strong>. And set the default value as\u00a0100.</li>\n<li>Inside the div class \u201cApp\u201d, add another button that displays the value of <strong>decrement </strong>and decrements by one when the button is\u00a0clicked.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U6mmguYKC_7E0vKlBJe02A.png\"></figure><p>Notice when you switch between clicking on both buttons, the <strong>useEffect</strong> will always be\u00a0called.</p>\n<blockquote>useEffect will always be called on any state update when we don\u2019t pass a dependency array.</blockquote>\n<p>Since we didn\u2019t provide a dependency array, useEffect will always be called with any state update occurring inside the component.</p>\n<h4>UseEffect With A Dependency When Multiple States Are\u00a0Updated</h4>\n<p>Let\u2019s say we only want useEffect to update when count updates. Well, we can do that by adding a <strong>dependency array </strong>as a second parameter.</p>\n<ul>\n<li>Add an array as a second parameter to the useEffect hook.</li>\n<li>Add count inside the\u00a0array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6LfAIEF7Cg4UPuJOcZpJyg.png\"></figure><blockquote>useEffect is called after the component has mounted and then called again every time count updates and not decrement. This is accomplished through providing count as a dependency.</blockquote>\n<p>By only passing count as a dependency to the useEffect hook, we are essentially telling useEffect to only be called again when the count state variable\u00a0changes.</p>\n<h4>UseEffect With A Empty Dependency Array When Multiple States Are\u00a0Updated</h4>\n<p>We are going to see what happens when we pass an empty dependency array.</p>\n<ul>\n<li>Remove count from dependency array.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/774/1*MlkFB2kJ0s1F2l5rNJ-WlQ.png\"></figure><p>As you interact with both buttons, you will notice that the developer console doesn\u2019t relog \u201cmount.\u201d It only logged \u201cmount\u201d after the component has been\u00a0mounted.</p>\n<blockquote>useEffect with an empty dependency array will only be called once after the component has\u00a0mounted.</blockquote>\n<p>But let\u2019s say that we want to separate the logic between how we handle when count updates and when decrement updates.</p>\n<p>We can achieve this by\u00a0either:</p>\n<ol>\n<li>Adding both states to the dependency array of the useEffect and insert logic in the function to separate the\u00a0process.</li>\n<li><strong><em>Adding another useEffect hook.</em></strong></li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*VUPK-jUct6g6NgYC\"><figcaption>Photo by <a href=\"https://unsplash.com/@benwhitephotography?utm_source=medium&amp;utm_medium=referral\">Ben White</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>I know. I know. We can have multiple useEffect hooks inside a component. It took me a while to figure out that this was feasible.</p>\n<h4>Multiple UseEffects On Multiple State\u00a0Updates</h4>\n<ul>\n<li>Create another useEffect hook and add decrement as a dependency.</li>\n<li>Update both console.logs to log their dependency variable.</li>\n<li>Save and\u00a0refresh.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*F--8bKn-bAhui1UgcSj9qQ.png\"></figure><blockquote>Both useEffects are called after the component has been mounted and are called again depending on when their dependencies update.</blockquote>\n<h4><strong>Perform Actions When The Component Will\u00a0Unmount</strong></h4>\n<p>Lastly, we are going to see how we can add logic before the component will unmount. Similarly to how we would use the lifecycle method <strong>componentWillUnmount </strong>for class components.</p>\n<p>A perfect example of when we would need to implement a process like this is when we subscribe to a listener and want to unsubscribe before the component unmounts.</p>\n<ol>\n<li>Remove the useEffects we previously created.</li>\n<li>Create a new useEffect and inside we will subscribe to the event listener\u00a0\u201cclick.\u201d</li>\n<li>At the end of the function, return a function that removes the listener.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yONhKL9uqHvuj9-yVJOJEg.png\"></figure><blockquote>return a function at the end of the useEffect function to perform actions before a component will unmount. Similarly to the lifecycle method componentWillUnmount.</blockquote>\n<p>Ta-da! Now you know how to perform actions before a component will\u00a0unmount.</p>\n<h3>Summary</h3>\n<p>Here\u2019s what we\u00a0learned:</p>\n<ol>\n<li>useEffect is always called once after the component is\u00a0mounted.</li>\n<li>useEffect <strong>without the dependency</strong> array will always be called again when any state is updated inside the component.</li>\n<li>useEffect with an <strong>empty dependency array</strong> will only be called once after the component is\u00a0mounted.</li>\n<li>useEffect with <strong>one or few dependencies</strong> will only be called again depending on when their dependencies update.</li>\n<li>Multiple useEffects can be declared inside a component.</li>\n<li>To handle actions before the component will unmount, return a function at the end of the useEffect function.</li>\n</ol>\n<p>Congrats on getting to the end! Now you have a better grasp on how to useEffect.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=97c4e6dc0a88\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["react", "useeffect", "react-hook", "learning-to-code", "coding"], "id": "97c4e6dc0a88"}, {"title": "Fetch Your Medium Posts Every day At Midnight", "pubDate": "2022-02-08 15:00:33", "link": "https://medium.com/@athletecoder/fetch-your-medium-posts-every-day-at-midnight-f9c02cac177c?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/f9c02cac177c", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh", "description": "<h4>And create a simple API to update your website\u00a0content.</h4><p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using Node, Express, and\u00a0Cron....</p>", "content": "\n<h3>How To Fetch Your Medium Posts Every day At\u00a0Midnight</h3>\n<h4>And create a simple API to update your website\u00a0content.</h4>\n<p>I\u2019ll be taking you through how to create a simple server that will run a job at midnight every day to fetch your Medium posts using <strong>Node</strong>, <strong>Express</strong>, and\u00a0<strong>Cron</strong>.</p>\n<p>I want to automate the process of copying the content from your Medium posts and pasting it to your personal\u00a0website.</p>\n<blockquote>Let\u2019s make our lives easier through automation so we have more free time to do whatever we\u00a0want!</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*h2wfzOFeoMa1AvEh\"><figcaption>Photo by <a href=\"https://unsplash.com/@anete_lusina?utm_source=medium&amp;utm_medium=referral\">Anete L\u016bsi\u0146a</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>For this tutorial, I\u2019ll be using <strong>Visual Studio</strong> for my code editor, but feel free to use whatever code editor you\u00a0desire.</p>\n<p>Let\u2019s get right into\u00a0it.</p>\n<h4>If you just want to see the code. Go\u00a0<a href=\"https://github.com/athlete-coder/medium\"><strong>here</strong></a>.</h4>\n<h3>Initiate Project</h3>\n<p>First, create a project folder director. I named my project folder <strong>medium. </strong>Once you have that created, let's init our project by opening the command line and typing <strong><em>npm\u00a0init</em>.</strong></p>\n<blockquote>Ensure that you are in your project director when npm\u00a0initing.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UrujjLmVGqFw9jZp9HYVkg.png\"></figure><p>I accepted all the default parameters when npm initing. After you finish the initiation process create an <strong>index.js</strong> file in the same directory. We will leave it for now and continue with installing our <strong>npm packages</strong>.</p>\n<p>In the command line, type<strong> <em>npm I node-fetch express\u00a0cron</em>.</strong></p>\n<p>After, open your <strong>package.json</strong> file.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gnZNk6poW0Lwl6gY3Yx4kw.png\"></figure><p>Your package.json file should look similar to the screenshot above. If you glance at the \u201c<strong>dependencies\u201d</strong> key, you\u2019ll notice an object with keys associated with the packages we installed and the version\u00a0number.</p>\n<p>This step is important.</p>\n<blockquote><strong>Add another key named \u201ctype\u201d and add \u201cmodule\u201d as its\u00a0value.</strong></blockquote>\n<p>This will allow us to use \u201c<strong>import\u201d </strong>instead<strong> </strong>of \u201c<strong>require\u201d</strong> to import packages into our index.js\u00a0file.</p>\n<p>Nice! We got everything we need to get to the fun part. It\u2019s time to\u00a0code.</p>\n<h3>Get Medium\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open the index.js\u00a0file.</li>\n<li>Import fetch from \u201cnode-fetch.\u201d</li>\n<li>Create an async function called \u201c<strong>getMediumPosts\u201d</strong> that accepts a parameter \u201c<strong>username\u201d</strong>. This function will be used to fetch all your medium posts from the username provided.</li>\n<li>Within the function brackets, let\u2019s write a script that will check if the username name is\u00a0valid.</li>\n<li>Next, within the same function, let\u2019s create a variable called <strong>URL</strong> that assigned a value of the URL we are going to request along with our username.</li>\n</ol>\n<blockquote>\n<strong>https://api.rss2json.com/v1/api.json</strong>?<strong>rss_url=https://medium.com/feed/{@username}</strong>\n</blockquote>\n<ol>\n<li>Next, we use the <strong>fetch</strong> package imported from above to send a request to the URL (created in the previous step) to fetch our profile information. We want the result of the fetch to be the result of this function so we need to add a <strong>return</strong> statement.</li>\n<li>Let\u2019s see the response we get by using <strong>console.log </strong>to log the response of our\u00a0fetch.</li>\n<li>Now, let's call the function with your medium username.</li>\n<li>In the command line run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XT7FSD9K8brp_5XLT_8S6Q.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9Sp_OoeuUN86NjeDe0Pn_g.png\"></figure><p>The terminal should log the response of our fetch function.</p>\n<p>For this tutorial, I only want the medium posts that the user, I, created. Looking at the response, I only need the \u201c<strong>items\u201d </strong>key<strong> </strong>in this response<strong>.</strong></p>\n<p>Next steps (use the next image for reference):</p>\n<ol><li>update the fetch function to only return the <strong>data.items</strong>.</li></ol>\n<p>We successfully created a function that will return the medium posts of the username provided.</p>\n<h3>Process and Store\u00a0Posts</h3>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>storePosts\u201d</strong> that accepts a parameter \u201c<strong>posts\u201d</strong>. This function will create and store a JSON file of the posts we fetched from the previous function, <strong>getMediumPosts.</strong>\n</li>\n<li>Add <strong><em>Import fs from \u201cfs\u201d</em></strong> at the top of the file. We are going to use this preinstalled package to store the file\u00a0locally.</li>\n<li>Within the <strong>\u201cstorePosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully creates and stores the posts as a JSON file or <strong>rejects</strong> if it fails (reference next\u00a0image).</li>\n<li>Create another async function below<strong> \u201cstorePosts\u201d </strong>named<strong> \u201cprocessPosts\u201d </strong>that doesn\u2019t receive any parameters.</li>\n<li>Within this function, create a variable called <strong>\u201cposts\u201d</strong> that will store the response of the <strong>\u201cgetMediumPosts\u201d. </strong>Ensure you add an <strong>\u201cawait\u201d</strong> to wait for the response before continuing to the next line of\u00a0code.</li>\n<li>Within the same function and on the next line, we now want to pass the variable we created in the previous step to the function <strong>\u201cstorePosts\u201d </strong>to store our posts. Let\u2019s <strong>await</strong> this response.</li>\n<li>Below all of this beautiful code, let's call <strong>\u201cprocessPosts\u201d </strong>to test out our\u00a0logic.</li>\n</ol>\n<p>8. In the terminal run <strong>node\u00a0index.js</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ceFEcvtKt6g8sE3LnXcMTQ.png\"></figure><p>If everything worked properly you should see a <strong>posts.json</strong> file appear in your directory.</p>\n<p>Nice! Now we 3 functions created.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n</ol>\n<h3>Get Stored\u00a0Posts</h3>\n<p>Now, we want to be able to retrieve the posts we stored locally as a JSON\u00a0file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called \u201c<strong>getPosts\u201d</strong> that has no parameters. This function returns the <strong>posts.json</strong> file the <strong>\u201cstorePosts\u201d </strong>stored\u00a0locally.</li>\n<li>Within the <strong>\u201cgetPosts\u201d</strong> function, <strong>return</strong> a <strong>promise</strong> that will <strong>resolve</strong> when the function successfully retrieves the posts.json file or <strong>rejects</strong> it if it fails (reference next\u00a0image).</li>\n<li>Below this function, let's call <strong>\u201cgetPosts\u201d </strong>and <strong>console.log</strong> our response to ensure it\u2019s working properly.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ytcIyXGBjPd9WF-EHAnX-Q.png\"></figure><p>Nice! It logged our values from the posts.json file.</p>\n<p>Now we added another function to our \u201cfunction created\u201d\u00a0list.</p>\n<ol>\n<li>\n<strong>\u201cgetMediumPosts\u201d\u200a\u2014\u200a</strong>get our posts from\u00a0Medium.</li>\n<li>\n<strong>\u201cstorePosts\u201d\u200a\u2014\u200a</strong>stores the posts\u00a0locally.</li>\n<li>\n<strong>\u201cprocessPosts\u201d\u200a\u2014\u200a</strong>call the previous two functions to\u00a0process.</li>\n<li>\n<strong>\u201cgetPosts\u201d\u200a\u2014\u200a</strong>get our locally stored\u00a0posts</li>\n</ol>\n<h3>Create and Serve Our\u00a0Website</h3>\n<p>We are now going to use the <strong>express </strong>package to serve our plain HTML website and create an API that will return our medium\u00a0posts.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Add <strong>import express from \u201cexpress\u201d </strong>at the top of the\u00a0file.</li>\n<li>We need to initiate the express app so below we need to create a variable called <strong>app </strong>and assign it to the response of express (use image as a reference).</li>\n<li>At the bottom, we want our app to listen for a specific port to serve our website. We can use port <strong>3000 </strong>and add a callback function that will console.log that it is listening.</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2BEJX3ltuzrHdeS_IgoDRg.png\"></figure><p>You should see listening on port\u00a03000.</p>\n<h4>Routes</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>We are going to create an API route that will send back a response to our client with our posts. Use <strong>\u201capp. get\u201d </strong>to initiate the route we\u00a0need.</li>\n<li>In the <strong>\u201capp. get\u201d</strong> function, for the first parameter, add a string value <strong>\u201c/API/posts/get\u201d. </strong>This will specify the route path the client will need to ping to retrieve the\u00a0posts.</li>\n<li>For the second parameter, add an async callback function (arrow or regular function) with two parameters, <strong>\u201creq\u201d </strong>and\u00a0<strong>\u201cres.\u201d</strong>\n</li>\n<li>In the callback function, call the <strong>\u201cgetPosts\u201d </strong>function.</li>\n<li>\n<strong>\u201cgetPosts\u201d</strong> is an async function that returns a promise. And we need to send the response back to the client. So I\u2019ll use <strong>\u201c.then\u201d </strong>to handle the successful response and <strong>\u201c.catch\u201d </strong>to handle the error if occurred<strong>.</strong>\n</li>\n<li>In the <strong>\u201c.then,\u201d </strong>add a callback function that will send the posts to the client using <strong>\u201cres.send\u201d</strong>.</li>\n<li>In the <strong>\u201c.catch,\u201d </strong>add a callback function that will send a status code of <strong>500 </strong>back to the client to indicate a failed response.</li>\n<li>Next, Using <strong>\u201capp. get\u201d</strong>, we want to create a base route that will send back our website as a response for all other routes. For the first parameter, use <strong>\u201c*\u201d </strong>to indicate all\u00a0routes.</li>\n<li>Add <strong>import path from \u201cpath\u201d </strong>at the top of the file. The path package is preinstalled with node. We will use this package to find the exact location of our <strong>HTML</strong>\u00a0file.</li>\n<li>Above the <strong>\u201capp. get\u201d </strong>we just created, create a variable named root and assign the variable the value of the function <strong>\u201cpath.resolve\u201d </strong>with the parameter of our HTML file, which will be <strong>\u201c./client\u201d.</strong>\n</li>\n<li>We also need to call<strong> \u201cexpress.static(root)\u201d</strong> to serve the static files we will create for our website inside our client folder. Add <strong>\u201capp.use(express.static(root))\u201d </strong>just below the previous step line of\u00a0code.</li>\n<li>In the <strong>\u201capp. get\u201d </strong>and in the second parameter, add a function that will send back the HTML file that we will create later (use the next image as a reference).</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GP1A7jttkivs3g6qsa_KVQ.png\"></figure><p>Congrats on getting this far. Now, have our server set up to the point where it will send back an HTML file that we haven\u2019t quite created yet. Let's get to that\u00a0now.</p>\n<h4>Website</h4>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create a new folder named\u00a0<strong>client</strong>\n</li>\n<li>Inside the folder, create an <strong>index.html</strong> file</li>\n<li>Create another folder inside the client folder we just created named\u00a0<strong>js</strong>\n</li>\n<li>Inside the js folder create a file called<strong> script.js</strong>\n</li>\n<li>Open the <strong>index.html</strong> file, and initiate an HTML document.</li>\n<li>Inside the body tags, add an <strong>h1 </strong>tag and name it \u201cBlog\u201d or whatever you so\u00a0choose.</li>\n<li>Next, add a div with id as\u00a0<strong>root</strong>\n</li>\n<li>Load the js file we created previously by using the script\u00a0tag.</li>\n</ol>\n<blockquote>Shortcut for create an HTML document in VS is\u00a0! and then press\u00a0tab.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*viV8ksFIz72EvZrK08wsag.png\"></figure><p>We got our basic HTML created. Next, we need to update our <strong>script.js </strong>file to fetch our posts from our\u00a0server.</p>\n<p>Open the <strong>script.js </strong>file.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Create an async function called <strong>\u201cgetPosts\u201d</strong>. This function will ping the API we created previously from our server to get our\u00a0posts.</li>\n<li>Within the function, let's use the fetch function (preinstalled) to ping the route <strong>\u201capi/posts/get\u201d </strong>and return the response.</li>\n<li>Let\u2019s call the function and log the output using <strong>console.log</strong>\n</li>\n<li>In the terminal run <strong>node\u00a0index.js</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jFhRJwOFVaQIBFkXF2Cr8Q.png\"></figure><p>Open a browser and go to <strong>localhost:3000. </strong>You should see a page with \u201cBlog\u201d displayed as header\u00a0text.</p>\n<p>In the developer tools, go to the console tab and you should see the posts logged in the\u00a0console.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aFNscSNdTHdCTLlEKf_ujg.png\"></figure><p>Good job! We are almost there. Let\u2019s display the posts on the page with the function <strong>\u201crenderPosts\u201d.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RZRAjPDRFOhjPE_yDfdb0Q.png\"></figure><p>Alright cool. We can see all of our posts displayed on the page now after we refreshed the\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LgZfHzj1SdUJxuJRhRQeuw.png\"></figure><p>One last\u00a0step!</p>\n<h3><strong>Cron Job (Schedule To Fetch Posts At Midnight Every\u00a0Day)</strong></h3>\n<p>Say we want to get the most up-to-date posts. We can do that by creating a job that will run every day at midnight. To do that, we can use the <strong>corn </strong>package that we installed.</p>\n<p>Next steps (use the next image for reference):</p>\n<ol>\n<li>Open our index.js file to access our server\u00a0code.</li>\n<li>Add <strong>import cron from \u201ccron\u201d </strong>at the top of the\u00a0file.</li>\n<li>Create a variable just below called<strong> \u201cCronJob\u201d </strong>and assign it the value of<strong> \u201ccron.CronJob.\u201d</strong>\n</li>\n<li>Before our API route, create a variable called <strong>\u201cjob\u201d</strong> and assign it the value of the new function <strong>\u201cnew CropJob(\u2026)\u201d </strong>(use the image below for reference)<strong>.</strong>\n</li>\n<li>The first argument will be the time in which the function will be called. We will use <strong>\u201c00 00 * * *\u201d which indicates for every day at midnight. Use </strong><a href=\"https://crontab.guru/\"><strong>crontab</strong></a> for time reference.</li>\n<li>The second argument will be the function that will be called. We want to call <strong>\u201cprocessPosts\u201d </strong>to fetch and store the posts from\u00a0Medium.</li>\n<li>The third argument we can pass\u00a0null</li>\n<li>The fourth argument indicates whether to start the job after initiating. So we will pass\u00a0true.</li>\n<li>Back to the second argument, we want to stop the batch or notify us if an error occurs. In this case, I\u2019ll stop the batch, but you can send yourself a message or email indicating an\u00a0issue.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yPBjIbZcCbWqe2a1u5Rhzg.png\"></figure><h3>Congratulations!</h3>\n<p>You got to the end. That was a long process. Glad you stuck with it all the way through. You now have a server\u00a0that:</p>\n<ol>\n<li><strong>Runs a job at midnight to fetch your Medium posts and stores them\u00a0locally.</strong></li>\n<li><strong>Has an API that will send back a response of the posts that were stored\u00a0locally.</strong></li>\n<li><strong>And serves a basic website that calls the posts API and displays the\u00a0content.</strong></li>\n</ol>\n<p>You can visit the code\u00a0<a href=\"https://github.com/athlete-coder/medium\">here</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f9c02cac177c\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["blog", "express", "code", "automation", "node"], "id": "f9c02cac177c"}, {"title": "Linear-Gradient Underline Text", "pubDate": "2022-02-05 16:03:21", "link": "https://medium.com/@athletecoder/linear-gradient-underline-text-4e42d28aa343?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/4e42d28aa343", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png", "description": "<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4><p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it....</p>", "content": "\n<h3>Make A Linear-Gradient Underline Text</h3>\n<h4>Let\u2019s walk through it, or you can just skip to the end for the\u00a0code!</h4>\n<p>See that cool gradient underline? That\u2019s what I\u2019m going to be showing you how to do in this post. Let's get right into\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*26ORk5xONOslnMiFgnsR1w.png\"></figure><p>I\u2019ll use <a href=\"http://codesandbox.io/\">codesandbox.io</a> for this illustration, but you can use whatever code editor you so\u00a0choose.</p>\n<p>Let\u2019s create a basic layout of a\u00a0page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CfEvjW3xrVBrGLkjI9STtQ.png\"><figcaption>codesandbox.io</figcaption></figure><p>We now have the basic layout of the page with \u201cHello Everyone\u201d wrapped with an <strong>h1</strong> tag and displayed on the\u00a0page.</p>\n<p>In terms of content, we have everything we need in between the <strong>html</strong> tags. It\u2019s time for\u00a0styling.</p>\n<p>To add <strong>CSS </strong>styles, we need to add the <strong>style</strong> tags above or below the <strong>html</strong> tags. Let's place it above and add the initial styles for our <strong>h1</strong>\u00a0text.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KuP62ApaasDdrjUx9kI5Eg.png\"></figure><p>We made the font size 40 pixels and the font color\u00a0black.</p>\n<p>Now we can get to what you came here for. Adding the cool underline style.</p>\n<p>We first need to add a background color. I chose grey. I thought it complimented the black well, but you can use any color combination. Just replace the <strong>rgba</strong>\u00a0values.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bbPVyTeqbJdpI2ErzSYysQ.png\"></figure><p>We have to use the <strong>background-image </strong>property with <strong>linear-gradient</strong> instead of the <strong>background </strong>property.</p>\n<p>For some browsers, linear-gradient might need a prefix. You can learn more about it at <a href=\"https://www.w3schools.com/cssref/func_linear-gradient.asp\">w3schools.com</a>.</p>\n<p>I tried the background property, but the additional properties we will be adding do not apply to the background property.</p>\n<p>There\u2019s already an issue with the background color extending beyond the text. We\u2019ll fix that\u00a0now.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BmeXcxz3TeofSATNZfL9BA.png\"></figure><p>We set the <strong>display</strong> property as <strong>inline</strong> to make the width and height of the h1 tag the same as its\u00a0content.</p>\n<p>Now, need to adjust the size and position of the background.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ovrse_E1X9HtkHMBVCkonQ.png\"></figure><p>We adjust the size and position of the background based on the size of the font using\u00a0<strong>em.</strong></p>\n<p>And we also made the width of the background 100% to cover the size of the\u00a0content.</p>\n<p>Notice the background did not change when we add the<strong> background-size</strong> and <strong>background-position</strong> properties. We just need to add one more property.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*l3Y27gGKoamnGSPa_bSB9Q.png\"></figure><p>The <strong>background-repeat </strong>property fixed this for us. Now the size of the background is the size we set it\u00a0as.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y6b2U4q8MN1JTJSg7obsRw.png\"></figure><p>And it\u00a0wraps!</p>\n<p>The CSS code is below for your convenience.</p>\n<blockquote>background-image: linear-gradient(to right, rgba(180, 180, 180, 0.8), rgba(180, 180, 180,\u00a00.2));</blockquote>\n<blockquote>display: inline;</blockquote>\n<blockquote>background-position: 0\u00a00.6em;</blockquote>\n<blockquote>background-size: 100%\u00a00.8em;</blockquote>\n<blockquote>background-repeat: repeat-x;</blockquote>\n<p>There are limitations to this technique like not being able to round the background, but if I find a better way to do this I\u2019ll make sure to post it. If you already know a better way, let me know in the comments.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4e42d28aa343\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["html", "programming", "css", "style", "code"], "id": "4e42d28aa343"}, {"title": "What I Experienced Creating An MVP", "pubDate": "2022-02-03 15:35:00", "link": "https://medium.com/@athletecoder/what-i-experienced-creating-an-mvp-3d2702c7a925?source=rss-bfbe96e0fb27------2", "guid": "https://medium.com/p/3d2702c7a925", "author": "John Nguyen", "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9", "description": "<h4>4 months (over 1000\u00a0hours).</h4><p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working...</p>", "content": "\n<h4>4 months (over 1000\u00a0hours).</h4>\n<p>I want to be completely honest. I live at home with my mom and I volunteer for a nonprofit organization part-time. So I have more free time than most people who have full-time jobs to spend working on this\u00a0app.</p>\n<p>On July 26th, 2021 I began working on the mock-up of my training app. From then to January of 2022, I spent an average of 8 hours a day, over 1000 hours in total, slowly building this app. It was a slow, long, and dreadful process, but it was worth\u00a0it.</p>\n<h3>Issues I had During The\u00a0Process</h3>\n<p>Most of the issues I had were self-inflicting. Not physically, but emotionally and mentally. I would constantly doubt my abilities. I would say to\u00a0myself,</p>\n<blockquote>\u201cNobody is going to like my app. There will be something wrong with it. People are going to make fun of me. It\u2019ll be embarrassing. Is it even worth\u00a0it?\u201d</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*K-PkoDguzwtqEsw9\"><figcaption>Photo by <a href=\"https://unsplash.com/@surface?utm_source=medium&amp;utm_medium=referral\">Surface</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Being a 26-year-old adult living with my mother didn\u2019t help either. In America, at the age of 18, you are expected to be on your own. You go to college and then right into the workforce. You are expected to have your life together before the age of\u00a026.</p>\n<p>So I neglected most of my social life spending most days at home. I would occasionally meet up with a few friends, but I hated when they would ask me, \u201cwhat have you been up to?\u201d And when I would explain to them my endeavors, there would be a confused look on their faces. Then spend emotional energy to get them to understand, but it always ended up in my disappointment.</p>\n<blockquote>Nobody can truly understand your perspective, your vision, your\u00a0dreams.</blockquote>\n<p>But the idea of being alone in my pursuits wasn\u2019t new to me. I felt like most of my life I\u2019ve had dreams that nobody understood or believed in. But I knew that the only opinion that truly mattered was\u00a0mine.</p>\n<h3>How I Coped With My\u00a0Issues</h3>\n<h3>Routine</h3>\n<p>Routine. Routine.\u00a0Routine.</p>\n<p>I briefly outline my routine in my <a href=\"https://medium.com/@athletecoder/turning-an-idea-into-a-reality-a75af7170fc3\">previous post</a>, but I can\u2019t emphasize enough how important a routine is and how it significantly improved my well-being and productivity.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*13hu8fUOz6vcN0h2\"><figcaption>Photo by <a href=\"https://unsplash.com/@jazminantoinette?utm_source=medium&amp;utm_medium=referral\">Jazmin Quaynor</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Anxiety improved significantly.</h4>\n<blockquote>Anxiety thrives from the\u00a0unknown.</blockquote>\n<p>I was adventuring into the unknown. I didn\u2019t know exactly what the outcome was going to be. And when I would spend too much time thinking about what could happen, my mind assumed the worse. I was\u00a0scared.</p>\n<blockquote>Adventuring into the unknown isn\u2019t so bad after all if you take it one day at a\u00a0time.</blockquote>\n<p>Taking it one day at a time helped me realize the negative thoughts in my mind were all an illusion. We don\u2019t know what will happen in the\u00a0future.</p>\n<p>Routine gave me a sense of control over my life. I knew what was coming next. Everything was predictable from one task to\u00a0another.</p>\n<p>And when I would rest my head on my pillow at night I could reflect on the day and be proud of myself for the progress I\u00a0made.</p>\n<h4>Productivity stayed consistent.</h4>\n<p>We are habitual creatures. Once a habit is established, the effort to perform the activity becomes effortless. And a routine is, by definition, a sequence of daily\u00a0habits.</p>\n<p>Our habits allow us if chosen and implemented correctly, to minimize <strong><em>decision fatigue</em></strong>. The concept behind decision\u00a0fatigue</p>\n<blockquote>\u201cis that a human\u2019s ability to make decisions can get worse after making many decisions, as their brain will be more fatigued.\u201d\u200a\u2014\u200a<a href=\"https://www.medicalnewstoday.com/articles/decision-fatigue#what-is-it\">Medical News\u00a0Today</a>\n</blockquote>\n<p>I wanted to conserve my energy to be primarily exerted on my work rather than on making decisions on things that can be automated. This robotic way of life is necessary for me to be consistent.</p>\n<p>A work block consists of 90 minutes of work and a 20-minute break. In the article, \u201c<a href=\"https://hubermanlab.com/teach-and-learn-better-with-a-neuroplasticity-super-protocol/\">TEACH &amp; LEARN BETTER WITH A \u201cNEUROPLASTICITY SUPER PROTOCOL</a>\u201d by Andrew Huberman,</p>\n<blockquote>\u201cSolid research shows that 90 minutes is about the longest period we can expect to maintain intense focus and effort toward learning.\u201d\u200a\u2014\u200aAndrew Huberman.</blockquote>\n<p>I came to figure out that 4 sessions a day were my limit. 2 sessions in the morning and 2 sessions in the afternoon.</p>\n<h3><strong>Social Media</strong></h3>\n<p>Have you ever caught yourself mindlessly scrolling through Instagram, Youtube, and/or other social media platforms? Sometimes I will catch myself in the act of scrolling and ask myself, \u201cWhat am I doing?\u201d But then continue to\u00a0scroll.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*FcAzrGhEF5nNIQSG\"><figcaption>Photo by <a href=\"https://unsplash.com/@georgiadelotz?utm_source=medium&amp;utm_medium=referral\">Georgia de Lotz</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Social media can be very helpful, especially Youtube. When an issue arises, Youtube is one of the top places on the internet I go to to find the answer. Youtube is also filled with a ton of aspiring content that motivated me to keep\u00a0going.</p>\n<blockquote>The algorithm is fighting for your attention.</blockquote>\n<p>I\u2019ll be watching a video I intended to watch. And then my curiosity gets the best of me. I\u2019ll scan the recommended videos and I\u2019ll come across an interesting title or thumbnail. Without thinking, I\u2019ll click on that video. And an hour later, I\u2019ll be down this rabbit hole. Repeating the same process over and over\u00a0again.</p>\n<p>Most of us use social media as our entertainment of choice. So I\u2019m not saying to abandon it, but to be aware of when and how you are using\u00a0it.</p>\n<h3>Pros of building an\u00a0MVP</h3>\n<h4>It\u2019s significantly cheaper than outsourcing</h4>\n<p>The tech stack I chose to use was free to get started building. <strong>MongoDB</strong> and <strong>Firebase</strong> have free tiers for development purposes. <strong>Node</strong> and <strong>React Native</strong> are open sources and free to\u00a0use.</p>\n<p>Going live will require some money. For me, I tried my best to spend the least amount of money possible. Below is the list of my monthly expenses after going\u00a0live.</p>\n<ul>\n<li>Heroku ~ $7.00 /\u00a0Month</li>\n<li>MongoDB ~ $50.00 /\u00a0Month</li>\n<li>Domain ~ $5.00 /\u00a0Month</li>\n<li>Custom Email ~ $12 / Month (Maybe, not necessary for\u00a0MVP)</li>\n<li>Apple Developer Program Fee ~ $99 / Year (IOS\u00a0Apps)</li>\n</ul>\n<p>It cost me about $83 per month to have my app live plus a bunch of time to get my product\u00a0built.</p>\n<h4><strong>Becoming more\u00a0skillful</strong></h4>\n<p>Have you ever heard of the compound effect? The concept of it all is that small habits compound over\u00a0time.</p>\n<figure><img alt=\"https://jamesclear.com/continuous-improvement\" src=\"https://cdn-images-1.medium.com/max/700/0*mNyQgkUpXy0v7joC.jpg\"><figcaption><a href=\"https://jamesclear.com/continuous-improvement\">Continuous Improvement:<br>How It Works and How to Master\u00a0It</a></figcaption></figure><blockquote>\u201cIf you get one percent better each day for one year, you\u2019ll end up thirty-seven times better by the time you\u2019re done.\u201d\u200a\u2014<a href=\"https://jamesclear.com/continuous-improvement\"><em>\u200aJames\u00a0Clear</em></a>\n</blockquote>\n<p>The small actions add up over time! So the more I apply my skills daily, the exponentially better I will become at\u00a0it.</p>\n<p>And the more skillful you become the more competitive advantage you have in the labor market. And If the product you build performs decently, then it shows potential clients and/or employers your competence.</p>\n<h4>Identifying Your\u00a0Limits</h4>\n<p>At about 7\u20138 hours of work, my energy levels are significantly drained. It becomes difficult for me to focus and my productivity takes a significant hit.</p>\n<p>There are some days when I would get stuck on a problem and I ended up working 10 hours that day. But I soon found out that I\u2019ve had more trouble sleeping those nights and was less productive the next\u00a0day.</p>\n<p>I don\u2019t know how some people can work beyond 8 hours a day consistently. I guess some people are built differently. I admire\u00a0it.</p>\n<p>I also learned that I can\u2019t function effectively without a sufficient amount of sleep. For me, the least I can get away with was 7 hours. Anything less than 7 hours I\u2019m a zombie. 8 hours of sleep is what I aim\u00a0for.</p>\n<blockquote>Getting enough quality sleep is even more important to our physical and mental health than diet and exercise.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5A-Hc1yNPW7n69fd\"><figcaption>Photo by <a href=\"https://unsplash.com/@twinsfisch?utm_source=medium&amp;utm_medium=referral\">Isabella and Zsa Fischer</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Matthew Walker, a scientist and professor of neuroscience and psychology who specializes in sleep, explains the importance of sleep and the severe side effects if we don\u2019t get enough sleep in his book, \u201c<a href=\"https://www.amazon.com/Why-We-Sleep-Unlocking-Dreams/dp/1501144316\">Why We Sleep</a>.\u201d You should give it a\u00a0read.</p>\n<h3>Cons of building an\u00a0MVP</h3>\n<h4>Time &amp; Hard Work (Expected)</h4>\n<p>Building an app requires discipline over a long time. It is not an easy goal. It\u2019s like a rollercoaster ride.</p>\n<p>It\u2019s somewhat easy at first. You are motivated and inspired by your idea so you start off sprinting. You are eager to get up in the morning so you can get working on your\u00a0project.</p>\n<p>But as you know, motivation fades. And when my motivation faded, about a month in, I relied on my routine to sustain my productivity.</p>\n<p>Expect your motivation to fade and have a plan. For me, my plan was a routine. Like I stated previously, A routine made it significantly easier for me to get myself at my desk and\u00a0work.</p>\n<h4>Money</h4>\n<p>Most products, if not all, require some initial investment. Previously, I stated that it cost me about $83 per month to have my app live. I wouldn\u2019t consider this a large amount of money, but it still cost me\u00a0money.</p>\n<p>The amount of money needed will vary from project to project. Depending on your project, it might require more or less than $83 a month. Beforehand, do your research to ensure you have the proper financial resources to support your\u00a0product.</p>\n<h3>Just Do\u00a0It</h3>\n<p>It will be difficult, but you can do it. Don\u2019t focus too much on the outcome. Focus on what is needed of you daily. Take each day one at a time. Be aware of your thoughts. If you have anxiety issues, established a\u00a0routine.</p>\n<blockquote>The future is nearly unpredictable, so choose to be optimistic about\u00a0it.</blockquote>\n<p>Failure and regret are both painful experiences. But,</p>\n<blockquote>Failure is only temporary. Regret lasts\u00a0forever.</blockquote>\n<p>Failure is an inevitable experience in the process<strong> </strong>of you becoming the best version of yourself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*O7uxEBtk4q5-ZXFr\"><figcaption>Photo by <a href=\"https://unsplash.com/@clarktibbs?utm_source=medium&amp;utm_medium=referral\">Clark Tibbs</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>If you have an idea, and you truly think it\u2019s valuable, then you should go for it. I mean, why not? There\u2019s only good that comes from the experience of trying. And what if everything works out in your favor? Then that will be\u00a0awesome!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3d2702c7a925\" width=\"1\" height=\"1\" alt=\"\">\n", "enclosure": {}, "categories": ["anxiety", "mvp-development", "overcoming-fear", "habits", "app-development"], "id": "3d2702c7a925"}]